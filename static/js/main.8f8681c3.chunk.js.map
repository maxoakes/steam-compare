{"version":3,"sources":["graphs/TimePlayed.js","graphs/RatioPlayed.js","GamesGraph.js","Loading.js","RandomGame.js","main.js","App.js","index.js"],"names":["TimePlayed","games","counts","i","length","playtime_forever","data","labels","datasets","label","backgroundColor","borderColor","options","responsive","plugins","title","display","color","position","text","legend","RatioPlayed","totalTime","avgTime","gamesSort","sort","a","b","gameNames","playTime","push","name","GamesGraph","className","Loading","loading","loadingMsg","ProgressBar","now","RandomGame","useState","rngGame","setGame","unplayed","splice","click","setClick","useEffect","rng","Math","floor","random","src","appid","img_logo_url","alt","onClick","event","Main","usernameSearch","searchClick","console","log","state","country","proxy","key","process","headers","mode","cache","credentials","redirect","referrerPolicy","setLoad","loadMsg","setLoadMsg","broken","setBroken","playerSummary","setPlayerSummary","steamLevel","setLevel","allGames","setGames","setSteamid","playedGames","setPlayedGames","friendsList","setFriendsList","setAppid","gameBannerURL","setGameBannerURL","gameTitle","setGameTitle","playerCount","setPlayerCount","gameAchievements","setGameAchievements","playerGameStats","setPlayerGameStats","searchedApp","document","getElementById","value","searchedProfile","fetchJSON","steamidResponse","generatedSteamid","response","steamid","test","undefined","error","setLoadingMessage","appListResponse","appObject","applist","apps","find","app","toLowerCase","toString","generatedAppid","generatedAppTitle","playerSummeryResponse","players","steamLevelResponse","friendsListResponse","ownedGamesResponse","player_level","friendslist","friends","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","player_count","gameSchemaResponse","game","availableGameStats","stats","userStatsForGameResponse","playerstats","achievements","mergedAchievementList","mergeAchievementObjects","achievementpercentages","fullStatObject","makeStatObjects","unused","recentlyPlayedGamesResponse","communityBadgeProgressResponse","playerBansResponse","fetchGameBannerURL","userAchievements","globalAchievements","achievementSchemas","achievementObjectList","achievementObject","achieved","apiname","unlocktime","percent","defaultvalue","displayName","hidden","icon","icongray","description","message","statSchema","playerStats","j","filter","stat","apiURL","fetch","status","ok","json","convertSteamTimeToUTC","seconds","Date","toLocaleDateString","weekday","year","month","day","hour","minute","fullTimeWithDifference","timeInMilliseconds","timeInSeconds","then","differenceInMinutes","abs","minutes","differenceInHours","hours","differenceInDays","days","differenceInYears","years","getTimeDifferenceString","id","bannerURL","Promise","reject","catch","finally","getAchievementStatus","achievement","getAchievementDescription","grabData","href","profileurl","avatarfull","personaname","statusCode","getStatusString","personastate","realname","locstatecode","loccountrycode","lastlogoff","timecreated","map","img_icon_url","height","width","style","backgroundImage","lineHeight","achievementList","targetGame","gameList","gameFound","userAchievementCount","getAchievementPercent","toFixed","scope","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","bodyHTML","required","preventDefault","ReactDOM","render","StrictMode"],"mappings":"oPA+EeA,EA9EI,SAAC,GAwBhB,IAxB4B,IAAXC,EAAU,EAAVA,MAoBbC,EAAS,CACT,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAGRC,EAAE,EAAGA,EAAIF,EAAMG,OAAQD,IACM,IAA9BF,EAAME,GAAGE,mBACRH,EAAO,IAAM,GAEdD,EAAME,GAAGE,iBAAmB,KAAOJ,EAAME,GAAGE,iBAAmB,IAC9DH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,KAAOJ,EAAME,GAAGE,iBAAmB,OAC/DH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,MAAQJ,EAAME,GAAGE,iBAAmB,OAChEH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,MAAQJ,EAAME,GAAGE,iBAAmB,OAChEH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,MAAQJ,EAAME,GAAGE,iBAAmB,OAChEH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,OAC5BH,EAAO,GAAKA,EAAO,GAAK,GAIhC,IAcMI,EAAO,CACTC,OArDa,CACb,aACA,WACA,YACA,YACA,YACA,YACA,WA+CAC,SAAU,CAAC,CACTC,MAAO,WACPH,KAAMJ,EACNQ,gBAlEiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBA4DFC,YAAa,WAInB,OACI,8BACI,cAAC,IAAD,CAAUL,KAAMA,EAAMM,QA1Bd,CACZC,YAAY,EACZC,QAAS,CACTC,MAAO,CACHC,SAAS,EACTC,MAAO,QACPC,SAAU,MACVC,KAAM,cAEVC,OAAQ,CACJJ,SAAS,UCSNK,EAlEK,SAAC,GAYjB,IAZ8B,IAAZpB,EAAW,EAAXA,MAWdqB,EAAY,EACRnB,EAAE,EAAGA,EAAEF,EAAMG,OAAQD,IACzBmB,GAAarB,EAAME,GAAGE,iBAG1B,IAAIkB,EAAUD,EAAUrB,EAAMG,OAC9BmB,GAAkB,IAClB,IAAIC,EAAYvB,EAEhBuB,EAAUC,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEtB,iBAAqBqB,EAAErB,oBAGnD,IAFA,IAAIuB,EAAY,GACZC,EAAW,GACP1B,EAAE,EAAGA,EAAEqB,EAAUpB,OAAQD,IAC1BqB,EAAUrB,GAAGE,kBAAoBkB,GAAWK,EAAUxB,OAAS,KAC9DwB,EAAUE,KAAKN,EAAUrB,GAAG4B,MAC5BF,EAASC,KAAKN,EAAUrB,GAAGE,mBAGnC,GAAe,IAAZkB,EACC,OACI,wBAKR,IAcMjB,EAAO,CACTC,OAAQqB,EACRpB,SAAU,CAAC,CACTC,MAAO,WACPH,KAAMuB,EACNnB,gBAtDO,CACT,sBACA,qBACA,qBACA,qBACA,oBACA,qBACA,sBAgDEC,YAAa,WAInB,OACI,8BACI,cAAC,IAAD,CAAUL,KAAMA,EAAMM,QA1Bd,CACZC,YAAY,EACZC,QAAS,CACTC,MAAO,CACHC,SAAS,EACTG,KAAM,oBACNF,MAAO,QACPC,SAAU,OAEdE,OAAQ,CACJJ,SAAS,UC1BNgB,EAlBI,SAAC,GAAa,IAAZ/B,EAAW,EAAXA,MACjB,OACI,8BACCA,GACG,sBAAKgC,UAAU,kEAAf,UACI,qBAAKA,UAAU,yBAAf,SACI,cAAC,EAAD,CAAYhC,MAAOA,MAEvB,qBAAKgC,UAAU,yBAAf,SACI,cAAC,EAAD,CAAahC,MAAOA,Y,QCDzBiC,EAXC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACvB,OACI,sBAAKH,UAAU,iBAAf,UACI,sBAAMA,UAAU,2BAAhB,qBACA,oBAAIA,UAAU,aAAd,SAA4BG,IAC5B,qBAAIH,UAAU,aAAd,UAA4BE,EAA5B,OACA,cAACE,EAAA,EAAD,CAAaC,IAAKH,QCwCfI,EA7CI,SAAC,GAIhB,IAJ6B,IAAZtC,EAAW,EAAXA,MACjB,EAA2BuC,mBAAS,MAApC,mBAAOC,EAAP,KAAgBC,EAAhB,KACIC,EAAW,GAEPxC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC7BwC,EAASb,KAAK7B,EAAME,IAGxB,IAAI,IAAIA,EAAIwC,EAASvC,OAAO,EAAGD,GAAK,IAAKA,EAClCwC,EAASxC,GAAGE,iBAAmB,IAC9BsC,EAASC,OAAOzC,EAAG,GAI3B,MAA0BqC,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACN,IAAIC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYR,EAASvC,OAAO,EAAI,GAAK,GAE/DsC,EAAQC,EAASK,MAClB,CAACH,IAEmB,IAApBF,EAASvC,OAEJ,wBAKJ,sBAAK6B,UAAU,kEAAf,UACI,oBAAIA,UAAU,2BAAd,iDACCQ,GACG,sBAAKR,UAAU,gDAAf,UACK,qBAAKA,UAAU,kBAAkBmB,IAAK,mEAAqEX,EAAQY,MAAQ,IAAMZ,EAAQa,aAAe,OACrJC,IAAK,cAAgBd,EAAQV,OACjC,6BAAKU,EAAQV,UAGrB,wBAAQE,UAAU,0CAA0CuB,QA1BpE,SAAqBC,GACjBX,EAASD,EAAQ,IAyBb,0BCutBGa,EA3vBF,SAAC,GAAkC,EAAjCC,eAAkC,IAAlBC,EAAiB,EAAjBA,YAE7BC,QAAQC,IAAI,uCAGZ,IAohB2BC,EAAOC,EAphB5BC,EAAQ,yCAGRC,EAAMC,mCACNC,EACN,CACIC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbH,QAAS,CAAC,eAAgB,oBAC1BI,SAAU,SACVC,eAAgB,eAGpB,EAA2BjC,mBAAS,MAApC,mBAAOL,EAAP,KAAgBuC,EAAhB,KACA,EAA8BlC,mBAAS,IAAvC,mBAAOmC,EAAP,KAAgBC,EAAhB,KACA,EAA4BpC,mBAAS,MAArC,mBAAOqC,EAAP,KAAeC,EAAf,KAEA,EAA0CtC,mBAAS,MAAnD,mBAAOuC,EAAP,KAAsBC,EAAtB,KACA,EAA+BxC,mBAAS,IAAxC,mBAAOyC,EAAP,KAAmBC,EAAnB,KACA,EAA6B1C,mBAAS,MAAtC,mBAAO2C,EAAP,KAAiBC,EAAjB,KAGA,EAA8B5C,mBAAS,GAAvC,mBAAgB6C,GAAhB,WACA,EAAsC7C,mBAAS,IAA/C,mBAAO8C,EAAP,KAAoBC,EAApB,KACA,EAAsC/C,mBAAS,IAA/C,mBAAOgD,EAAP,KAAoBC,EAApB,KAGA,EAA0BjD,mBAAS,GAAnC,mBAAOa,GAAP,KAAcqC,GAAd,KACA,GAA0ClD,mBAAS,IAAnD,qBAAOmD,GAAP,MAAsBC,GAAtB,MACA,GAAkCpD,mBAAS,IAA3C,qBAAOqD,GAAP,MAAkBC,GAAlB,MACA,GAAsCtD,mBAAS,GAA/C,qBAAOuD,GAAP,MAAoBC,GAApB,MACA,GAAgDxD,mBAAS,IAAzD,qBAAOyD,GAAP,MAAyBC,GAAzB,MACA,GAA8C1D,mBAAS,IAAvD,qBAAO2D,GAAP,MAAwBC,GAAxB,MAtC8C,8CA+C9C,WAAwB3C,GAAxB,yDAAA/B,EAAA,yDAGEsD,EAAiB,MACjBE,EAAS,IACTE,EAAS,MAETC,EAAW,GACXE,EAAe,MACfE,EAAe,MAEfK,GAAa,MACbI,GAAoB,MACpBE,GAAmB,MACnBtB,EAAU,MAGNuB,EAAcC,SAASC,eAAe,QAAQC,QAC9CC,EAAkBH,SAASC,eAAe,YAAYC,OAlB5D,wBA6BI3C,QAAQC,IAAI,+BA7BhB,UA8BgC4C,GAAUzC,EACpC,oEACAC,EAAM,cAAgBuC,EAAkB,eAAgBrC,GAhC9D,QA8BQuC,EA9BR,SAkCIC,EAAmBD,EAAgBE,SAASC,UAGnB,QAAQC,KAAKN,KAEpCG,EAAmBH,GAErB5C,QAAQC,IAAI,cAAgB8C,EAAmB,SAAWH,QAClCO,IAArBJ,GACD/C,QAAQoD,MAAM,oBAGhBC,GAAkB,EAAG,gBAAkBN,GA9C3C,YAiDMP,EAjDN,wBAqDIxC,QAAQC,IAAI,yBArDhB,UAsDgC4C,GAAUzC,EACpC,2DAA4DG,GAvDlE,QAsDQ+C,EAtDR,OAyDID,GAAkB,EAAG,iBAAmBb,KAIpCe,EAAYD,EAAgBE,QAAQC,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAIzF,KAAK0F,gBAAkBpB,EAAYoB,mBAG9E,QAAQV,KAAKV,KAE7BxC,QAAQC,IAAI,iDACZsD,EAAYD,EAAgBE,QAAQC,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAInE,MAAMqE,aAAerB,MAI5Ee,GAEFO,EAAiBP,EAAU/D,MAC3BuE,EAAoBR,EAAUrF,KAC9B8B,QAAQC,IAAI,cAAgBsD,EAAU/D,MAAQ,SAAWgD,IAIzDxC,QAAQC,IAAI,4BAA8BuC,GA/EhD,YAuFMO,EAvFN,wBAyFI/C,QAAQC,IAAI,iCAzFhB,UA0FkC4C,GAAUzC,EACtC,sEACAC,EAAM,aAAe0C,EAAmB,eAAgBxC,GA5F9D,eA0FIyD,EA1FJ,OA6FIhE,QAAQC,IAAI+D,EAAsBhB,SAASiB,QAAQ,SACFd,IAA9Ca,EAAsBhB,SAASiB,QAAQ,KACxCjE,QAAQoD,MAAM,gBACdnC,EAAU,IAGZoC,GAAkB,GAAI,2BAEtBrD,QAAQC,IAAI,gCArGhB,UAsGmC4C,GAAUzC,EACvC,qEACAC,EAAM,YAAc0C,EAAmB,eAAgBxC,GAxG7D,eAsGQ2D,EAtGR,OAyGIlE,QAAQC,IAAIiE,EAAmBlB,UAC/BK,GAAkB,GAAI,IAEtBrD,QAAQC,IAAI,4BA5GhB,UA6GgC4C,GAAUzC,EACpC,iEACAC,EAAM,YAAc0C,EAAmB,gBAAiBxC,GA/G9D,eA6GI4D,EA7GJ,OAiHId,GAAkB,GAAI,IAEtBrD,QAAQC,IAAI,gCAnHhB,UAoHmC4C,GAAUzC,EACvC,qEACAC,EAAM,YAAc0C,EAAmB,iCAAkCxC,GAtH/E,QAoHQ6D,EApHR,OAuHIpE,QAAQC,IAAImE,EAAmBpB,UAC/BK,GAAkB,GAAI,IAEtB9B,EAAS6C,EAAmBpB,SAAS5G,OACrC+E,EAAiB6C,EAAsBhB,SAASiB,QAAQ,IACxD5C,EAAS6C,EAAmBlB,SAASqB,cACjCF,GAAqBvC,EAAeuC,EAAoBG,YAAYC,SA7H5E,YAgIMxB,IAAoBe,EAhI1B,yBAkII9D,QAAQC,IAAI,gCAEZoD,GAAkB,GAAI,iCACtBrD,QAAQC,IAAI,yCArIhB,UAsI2C4C,GAAUzC,EAC/C,8EACAC,EAAM,YAAc0C,EAAmB,UAAYe,EAAiB,eAAgBvD,GAxI1F,eAsIQiE,EAtIR,OAyIIxE,QAAQC,IAAIuE,GACZnB,GAAkB,GAAI,IAEtBrD,QAAQC,IAAI,yDA5IhB,UA6IqD4C,GAAUzC,EACzD,8FACAC,EAAM,WAAayD,EAAiB,eAAgBvD,GA/I1D,eA6IQkE,EA7IR,OAgJIzE,QAAQC,IAAIwE,GACZpB,GAAkB,GAAI,IAEtBrD,QAAQC,IAAI,6CAnJhB,UAoJ0C4C,GAAUzC,EAC9C,kFACAC,EAAM,UAAYyD,EAAiB,eAAgBvD,GAtJzD,eAoJQmE,EApJR,OAuJI1E,QAAQC,IAAIyE,GACZvC,GAAeuC,EAA0B1B,SAAS2B,cAClDtB,GAAkB,GAAI,IAEtBrD,QAAQC,IAAI,oCA3JhB,UA4JmC4C,GAAUzC,EACvC,yEACAC,EAAM,UAAYyD,EAAiB,eAAgBvD,GA9JzD,eA4JQqE,EA5JR,OA+JI5E,QAAQC,IAAI2E,EAAmBC,MAC/BxB,GAAkB,IAAK,IAhK3B,UAuKkBuB,EAAmBC,KAAKC,mBAAmBC,MAEvD/E,QAAQC,IAAI,uCAzKlB,UA0KuC4C,GAAUzC,EACzC,4EACAC,EAAM,UAAYyD,EAAiB,YAAcf,EAAmB,eAAgBxC,GA5K5F,QA0KMyE,EA1KN,OA8KMhF,QAAQC,IAAI+E,EAAyBC,YAAYF,OA9KvD,oDAiLM/E,QAAQC,IAAI,4BAjLlB,SAoLI,IACM2E,EAAmBC,KAAKC,mBAAmBI,eAEzCC,EAAwBC,GAC1BZ,EAA2BS,YAAYC,aACvCT,EAAqCY,uBAAuBH,aAC5DN,EAAmBC,KAAKC,mBAAmBI,cAC7ClF,QAAQC,IAAIkF,GACZ9C,GAAoB8C,GAEhBG,EAAiBC,GAAgBX,EAAmBC,KAAKC,mBAAmBC,MAC9EC,EAAyBC,YAAYF,OACvCxC,GAAmB+C,IAUvB,MAAME,GACJxF,QAAQC,IAAI,wEA3MlB,8BA8MW8C,GAAqBe,EA9MhC,yBAgNI9D,QAAQC,IAAI,2BAEZD,QAAQC,IAAI,yCAlNhB,WAmN4C4C,GAAUzC,EAChD,8EACAC,EAAM,YAAc0C,EAAmB,eAAgBxC,GArN7D,gBAmNQkF,EAnNR,OAsNIzF,QAAQC,IAAIwF,EAA4BzC,UACxCtB,EAAe+D,EAA4BzC,SAAS5G,OACpDiH,GAAkB,GAAI,sBAEtBrD,QAAQC,IAAI,4CA1NhB,WA2N+C4C,GAAUzC,EACnD,iFACAC,EAAM,YAAc0C,EAAmB,eAAgBxC,GA7N7D,gBA2NQmF,EA3NR,OA8NI1F,QAAQC,IAAIyF,EAA+B1C,UAC3CK,GAAkB,GAAI,IAEtBrD,QAAQC,IAAI,4BAjOhB,WAkOmC4C,GAAUzC,EACvC,iEACAC,EAAM,aAAe0C,EAAmB,eAAgBxC,GApO9D,SAkOQoF,EAlOR,OAqOI3F,QAAQC,IAAI0F,EAAmB1B,QAAQ,IArO3C,2BAuOYlB,GAAoBe,EAE5B9D,QAAQC,IAAI,gCAIZD,QAAQC,IAAI,4BACZgB,EAAU,IA9Od,SAiPEO,EAAWuB,GACXlB,GAASiC,GACT7B,GAAa8B,GACb6B,GAAmB9B,GAEnBjD,EAAQ,MAtPV,6DA/C8C,sBA0S9C,SAASuE,GAAwBS,EAAkBC,EAAoBC,GAGrE,IADA,IAAIC,EAAwB,GACnB1J,EAAI,EAAGA,EAAIyJ,EAAmBxJ,OAAQD,IAC/C,CAAC,IAAD,EACM2J,GAAiB,GACnBC,SAAUL,EAAiBvJ,GAAG4J,SAC9BC,QAASN,EAAiBvJ,GAAG6J,QAC7BC,WAAYP,EAAiBvJ,GAAG8J,WAChClI,KAAM4H,EAAmBxJ,GAAG4B,KAC5BmI,QAASP,EAAmBxJ,GAAG+J,QAC/BC,aAAcP,EAAmBzJ,GAAGgK,aACpCC,YAAaR,EAAmBzJ,GAAGiK,YACnCC,OAAQT,EAAmBzJ,GAAGkK,OAC9BC,KAAMV,EAAmBzJ,GAAGmK,KAC5BC,SAAUX,EAAmBzJ,GAAGoK,UAVb,qBAWbX,EAAmBzJ,GAAG4B,MAXT,4BAYN6H,EAAmBzJ,GAAGqK,aAZhB,GAcrBX,EAAsB/H,KAAKgI,GAE7B,OAAOD,EAqFT,SAAS3C,GAAkBgD,EAASO,GAElC/F,EAAQwF,GACJO,GAAS7F,EAAW6F,GAI1B,SAASrB,GAAgBsB,EAAYC,GAEnC,IAAK,IAAIxK,EAAI,EAAGA,EAAIuK,EAAWtK,OAAQD,IACvC,CACE,IAAK,IAAIyK,EAAI,EAAGA,EAAID,EAAYvK,OAAQwK,IAElCF,EAAWvK,GAAG4B,OAAS4I,EAAYC,GAAG7I,OAExC2I,EAAWvK,GAAGqG,MAAQmE,EAAYC,GAAGpE,OAGnC,UAAWkE,EAAWvK,KAAKuK,EAAWvK,GAAGqG,MAAQ,GACjDkE,EAAWvK,GAAGiK,cAAcM,EAAWvK,GAAGiK,YAAcM,EAAWvK,GAAG4B,MAG9E,OADA2I,EAAaA,EAAWG,QAAO,SAAAC,GAAI,OAAkB,GAAdA,EAAKtE,SAzaA,SA8a/BE,GA9a+B,mFA8a9C,WAAyBqE,EAAQ3G,GAAjC,iBAAA1C,EAAA,sEAEuBsJ,MAAMD,EAAQ3G,GAFrC,aAEMyC,EAFN,QAGgBoE,QAAU,KAASpE,EAASoE,OAAS,KAHrD,uBAKIpH,QAAQoD,MAAM,2DALlB,uBAMWD,GANX,OAQYH,EAASqE,IAEjBrH,QAAQoD,MAAM,uBAAyBJ,EAASoE,QAVpD,wBAYmBpE,EAASsE,OAZ5B,eAYM7K,EAZN,yBAaSA,GAbT,6CA9a8C,sBAue9C,SAAS8K,GAAsBC,GAE7B,IAAKA,EACH,MAAO,UAYT,OAVW,IAAIC,KAAe,IAAVD,GAURE,mBAAmB,QARjB,CACZC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YA4BZ,SAASC,GAAuBC,GAE9B,OAAKA,EAEEX,GAAsBW,GAC3B,KA3BJ,SAAiCC,GAE/B,IAAIC,EAAO,IAAIX,KAAmB,IAAdU,GAChBE,EAAsBjJ,KAAKkJ,IAAIb,KAAKhJ,MAAQ2J,GAAtB,IACtBG,EAAUnJ,KAAKC,MAAMgJ,EAAsB,IAE3CG,EAAqBH,EAAsB,GAC3CI,EAAQrJ,KAAKC,MAAMmJ,EAAoB,IAEvCE,EAAoBL,EAAmB,KACvCM,EAAOvJ,KAAKC,MAAMqJ,EAAmB,KACrCE,EAAqBP,EAAmB,OACxCQ,EAAQzJ,KAAKC,MAAMuJ,GAMvB,OAJsBC,EAASA,EAAQ,WAAc,KAClDF,EAAQA,EAAO,UAAa,KAC5BF,EAASA,EAAQ,WAAc,KAC/BF,EAAWA,EAAU,YAAe,IAAM,MAUpCO,CAAwBZ,GAAsB,IAHvB,UAlhBY,SA+hB/BtC,GA/hB+B,iFA+hB9C,WAAkCmD,GAAlC,eAAAlL,EAAA,6DAEMmL,EAAY,8CAAgDD,EAAK,yBAFvE,SAGuB5B,MAAM/G,EAAQ4I,GAClCZ,MAAK,SAAApF,GACJ,OAAIA,EAASqE,GACJrE,EAEAiG,QAAQC,OAAOlG,EAASoE,WAElC+B,OAAM,SAAA/F,GAGL,OAFApD,QAAQC,IAAI,qFAAuFmD,GACnG4F,EAAY,8CAAgDD,EAAK,iBAGlEK,SAAQ,WACP,OAAOJ,KAhBX,cAkBEjH,GAAiBiH,GAlBnB,4CA/hB8C,sBAmlB9C,SAASK,GAAqBC,GAE5B,OAAOA,EAAYpD,SAChB,YAAcqB,GAAsB+B,EAAYlD,YAAe,SAIpE,SAASmD,GAA0BD,GAE/B,OAAOA,EAAY3C,YAAc2C,EAAY3C,YAAc,GAI/D,OAvjBAzH,qBAAW,WACT2B,EAAQ,GA1CoC,qCA2C5C2I,GACA3I,EAAQ,QACP,CAACd,IAmjBIzB,EACN,gCACG0C,GACD,8BACE,oBAAI5C,UAAU,qBAAd,mCAGC4C,GACD,8BACC,cAAC,EAAD,CAAS1C,QAASA,EAASC,WAAYuC,SAM5C,gCACGE,GACD,8BACE,oBAAI5C,UAAU,qBAAd,kCAGD8C,GACD,sBAAK9C,UAAU,oCAAf,UAEE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,sEAAf,UACI,mBAAGA,UAAU,wBAAwBqL,KAAMvI,EAAcwI,WAAzD,SACE,qBAAKX,GAAG,gBAAgBxJ,IAAK2B,EAAcyI,WAAYjK,IAAKwB,EAAc0I,YAAc,gBAE1F,sBAAKxL,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,+BAAoE8C,EAAc0I,eAEpF,sBAAKxL,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,qBAA0D8C,EAAc+B,WAE1E,sBAAK7E,UAAU,6BAAf,UACE,sBAAMA,UAAU,2BAAhB,oBArMd,SAAyByL,GAEvB,IAAIzC,EAAS,UACb,OAAOyC,GAEL,KAAK,EACHzC,EAAS,UACT,MACF,KAAK,EACHA,EAAS,SACT,MACF,KAAK,EACHA,EAAS,OACT,MACF,KAAK,EACHA,EAAS,OACT,MACF,KAAK,EACHA,EAAS,SACT,MACF,KAAK,EACHA,EAAS,mBACT,MACF,KAAK,EACHA,EAAS,kBACT,MACF,QACEA,EAAS,UAGb,OAAOA,EAuK8D0C,CAAgB5I,EAAc6I,iBAExFpI,GACD,sBAAKvD,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,qBAA0DuD,EAAYpF,UAGvE2E,EAAc8I,UACf,sBAAK5L,UAAU,gCAAf,UACE,sBAAMA,UAAU,2BAAhB,uBAA4D8C,EAAc8I,aAG1E9I,EAAc+I,cAAgB/I,EAAcgJ,iBAC9C,sBAAK9L,UAAU,+BAAf,UACE,sBAAMA,UAAU,2BAAhB,uBAzHa8B,EAyHgEgB,EAAc+I,aAzHvE9J,EAyHoFe,EAAcgJ,gBAvH1HhK,GAAgB,KAAOA,EAAQ,KAAO,KAAOC,GAAoB,KAwH7D,qBAAK/B,UAAU,sBAAsBmB,IAAK,+BAAiC2B,EAAcgJ,eAAiB,qBAG5G,sBAAK9L,UAAU,kCAAf,UACE,sBAAMA,UAAU,2BAAhB,0BAA+D6J,GAAuB/G,EAAciJ,eAEtG,sBAAK/L,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,6BAAkE6J,GAAuB/G,EAAckJ,gBAEzG,sBAAKhM,UAAU,4BAAf,UACE,sBAAMA,UAAU,2BAAhB,yBAA8DgD,KAE/DE,GACD,sBAAKlD,UAAU,4BAAf,UACE,sBAAMA,UAAU,2BAAhB,yBAA8DkD,EAAS/E,eAK/E,sBAAKwM,GAAG,mBAAmB3K,UAAU,6BAArC,UAECqD,GACD,qBAAKrD,UAAU,gBAAf,SACE,sBAAKA,UAAU,iDAAf,UACE,oBAAIA,UAAU,0BAAd,mCACCqD,EAAY4I,KAAI,SAAAxF,GAAI,OACrB,sBAAsBzG,UAAU,iEAAhC,UACE,qBAAK2K,GAAG,YAAY3K,UAAU,OAAOmB,IAAK,mEAAqEsF,EAAKrF,MAAQ,IAAMqF,EAAKyF,aAAe,OACpJ5K,IAAK,aAAemF,EAAK3G,KAAMqM,OAAO,OAAOC,MAAM,SACrD,uBAAMpM,UAAU,OAAhB,cAAyByG,EAAK3G,QAC9B,uBAAME,UAAU,iDAAhB,wBAhNYmK,EAgN+E1D,EAAKrI,iBA9MnG4C,KAAKC,MAAMkJ,EAAU,IAAM,OAAUA,EAAU,GAAM,aA0M1C1D,EAAKrF,OA5MzB,IAAwB+I,UAwNjBvG,IACC,sBAAK5D,UAAU,kBAAf,UACE,qBAAKA,UAAU,+CAA+CqM,MAAO,CAACC,gBAAgB,OAAD,OAAS5I,GAAT,MAArF,SACA,oBAAI1D,UAAU,oCAAoCqM,MAAO,CAACE,WAAY,QAAtE,SAAgF3I,OAEhF,sBAAK5D,UAAU,sCAAf,UACE,mBAAGA,UAAU,0CAAb,SAAwD8D,GAAc,oBACtE,mBAAG9D,UAAU,0CAAb,SA3IZ,SAA+BwM,EAAiBC,EAAYC,GAG1D,IADA,IAAIC,GAAY,EACPzO,EAAI,EAAGA,EAAIwO,EAASvO,OAAQD,IAE/BwO,EAASxO,GAAGkD,QAAUqL,IAAYE,GAAY,GAGpD,IAAKA,EAEH,MAAO,kCAGT,GAAIH,EACJ,CAGE,IADA,IAAII,EAAuB,EAClB1O,EAAI,EAAGA,EAAIsO,EAAgBrO,OAAQD,IAEtCsO,EAAgBtO,GAAG4J,UAAU8E,IAEnC,OAAQA,EAAuB,WAAaJ,EAAgBrO,OAAS,yBAIrE,MAAQ,uCAkHwD0O,CAAsB7I,GAAkB5C,GAAO8B,WAK5Gc,IACC,qBAAKhE,UAAU,gBAAf,SACE,qBAAKA,UAAU,qEAAf,SACCgE,GAAiBiI,KAAI,SAAAf,GAAW,OAC/B,sBAA4BlL,UAAU,oEAAtC,UACE,qBAAKA,UAAU,2BAA2BmB,IAAK+J,EAAY7C,KAAM/G,IAAK4J,EAAYpL,KAAMsM,MAAM,OAAOD,OAAO,SAC5G,oBAAGnM,UAAU,wCAAb,UAAsDkL,EAAYjD,QAAQ6E,QAAQ,GAAlF,yCACA,mBAAG9M,UAAU,gCAAb,SAA8CiL,GAAqBC,KACnE,oBAAIlL,UAAU,+BAAd,SAA8CkL,EAAY/C,cAC1D,mBAAGnI,UAAU,qCAAb,SAAmDmL,GAA0BD,OALrEA,EAAYpL,aAY3BoE,IACD,qBAAKlE,UAAU,YAAf,SACE,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,oBAAI+M,MAAM,MAAV,uBACA,qBAAIA,MAAM,MAAV,UAAiBjK,EAAc0I,YAA/B,kBAGHtH,GAAgB+H,KAAI,SAAApD,GAAI,OACzB,uBAAuB7I,UAAU,gBAAjC,SACE,+BACE,oBAAI+M,MAAM,MAAV,SAAiBlE,EAAKV,cACtB,6BAAKU,EAAKtE,YAHFsE,EAAK/I,kBAWlBsB,IAAU8B,GAEX,sBAAKlD,UAAU,2CAAf,UACE,uBACA,cAAC,EAAD,CAAYhC,MAAOkF,IACnB,cAAC,EAAD,CAAYlF,MAAOkF,UAK3B,qBAAKlD,UAAU,iBACb,cAAC,IAAD,CAAUgN,GAAI,UCtlBLC,MAhKf,WAEE,SAASC,IAGP,MAA4C3M,mBAAS,IAArD,mBAAOmB,EAAP,KAAuByL,EAAvB,KACA,EAAkC5M,mBAAS,IAA3C,mBAAO6M,EAAP,KAAkBC,EAAlB,KACA,EAAgD9M,oBAAS,GAAzD,mBAAO+M,EAAP,KAAyBC,EAAzB,KACA,EAAgChN,mBAAS,GAAzC,mBAAOoB,EAAP,KAAoBd,EAApB,KAEAC,qBAAU,WACRc,QAAQC,IAAI,kBAAoBH,EAAiB,mBAAoB0L,MAIvE,IAAII,EACF,qBAAKxN,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAMyN,SAAUC,EAAhB,SACE,sBAAK1N,UAAU,iBAAf,UACE,sBAAKA,UAAU,WAAf,UACE,uBAAOA,UAAU,aAAa2N,QAAQ,WAAtC,0BACA,uBAAOC,KAAK,OACV5N,UAAU,uBACV2K,GAAG,WACHkD,mBAAiB,gBACjBC,YAAY,iCACZhO,KAAK,WACLyE,MAAO7C,EACPqM,SAAU,SAAAC,GAAC,OAAIb,EAAkBa,EAAEC,OAAO1J,aAG9C,sBAAKvE,UAAU,WAAf,UACE,uBAAOA,UAAU,aAAa2N,QAAQ,OAAtC,wBACA,uBAAOC,KAAK,OACV5N,UAAU,eACV2K,GAAG,OACHkD,mBAAiB,YACjBC,YAAY,gCACZhO,KAAK,OACLyE,MAAO6I,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAaW,EAAEC,OAAO1J,aAGzC,qBAAKvE,UAAU,0BAAf,SACI,wBAAQ4N,KAAK,SAASjD,GAAG,eAAe3K,UAAU,0BAA0BuB,QA2E1F,SAAqBC,GACnBX,EAASc,EAAY,IA5ET,4BAIR,uBAEA,cAAC,IAAD,UACE,cAAC,EAAD,CAAMD,eAAgBA,EAAgBC,YAAaA,WA6CvDuM,EAAWZ,EArCb,qBAAKtN,UAAU,MAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAM2K,GAAG,aAAa8C,SAAUC,EAAhC,UACE,sBAAK1N,UAAU,aAAf,UACE,uBAAOA,UAAU,gBAAgB2N,QAAQ,WAAzC,0BACE,uBAAOC,KAAK,OACV5N,UAAU,uBACV2K,GAAG,WACHkD,mBAAiB,gBACjBC,YAAY,iCACZhO,KAAK,WACLyE,MAAO7C,EACPqM,SAAU,SAAAC,GAAC,OAAIb,EAAkBa,EAAEC,OAAO1J,QAC1C4J,UAAQ,IACZ,uBAAOxD,GAAG,gBAAgB3K,UAAU,YAApC,4FAEF,sBAAKA,UAAU,aAAf,UACE,uBAAO2N,QAAQ,OAAO3N,UAAU,gBAAhC,wBACA,uBAAO4N,KAAK,OACV5N,UAAU,eACV2K,GAAG,OACHkD,mBAAiB,YACjBC,YAAY,2BACZhO,KAAK,OACLyE,MAAO6I,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAaW,EAAEC,OAAO1J,UAEvC,uBAAOoG,GAAG,YAAY3K,UAAU,YAAhC,oEAEF,wBAAQ4N,KAAK,SAASjD,GAAG,eAAe3K,UAAU,0BAAlD,8BAO6CwN,EAGvD,SAASE,EAAalM,GAIpB,GAFAI,QAAQC,IAAI,gCAAkCH,EAAiB,mBAAoB0L,GACnF5L,EAAM4M,iBACFhB,GAAa1L,EACjB,CACE,IAAK4L,EAIH,OAFA1L,QAAQC,IAAI,2DACZ0L,GAAoB,GACbW,EAETX,GAAoB,QAIpBA,GAAoB,GAQxB,OAAOW,EAIT,OACE,qBAAKlO,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,kDAGJ,cAACkN,EAAD,IACA,qBAAKlN,UAAU,MAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,uBACA,oBAAGA,UAAU,eAAb,UACE,mBAAGqL,KAAK,mCAAR,qBADF,SAEE,mBAAGA,KAAK,kCAAR,yBAFF,SAGE,mBAAGA,KAAK,qDAAR,yCAHF,SAIE,mBAAGA,KAAK,4BAAR,mDAEF,mBAAGrL,UAAU,mCAAb,iEAGA,mBAAGA,UAAU,2BAAb,6KCtJZqO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlK,SAASC,eAAe,U","file":"static/js/main.8f8681c3.chunk.js","sourcesContent":["import {Doughnut} from 'react-chartjs-2';\r\nconst TimePlayed = ({games}) =>{\r\n    let backgroundColors = [\r\n            'hsl(45, 100%, 50%)',\r\n            'hsl(37, 100%, 30%)',\r\n            'hsl(20, 100%, 20%)',\r\n            'hsl(60, 100%, 70%)',\r\n            'hsl(20, 100%, 10%)',\r\n            'hsl(30, 100%, 60%)',\r\n            'hsl(65, 100%, 40%)',\r\n    ];\r\n    let timePlayed = [\r\n        \"Not Played\",\r\n        \"0-12 hrs\",\r\n        \"12-24 hrs\",\r\n        \"24-36 hrs\",\r\n        \"36-48 hrs\",\r\n        \"48-60 hrs\",\r\n        \"60+ hrs\"\r\n    ];\r\n\r\n    let counts = [\r\n        0,0,0,0,0,0,0\r\n    ];\r\n    \r\n    for(let i=0; i < games.length; i++) {\r\n        if(games[i].playtime_forever === 0) {\r\n            counts[0] += 1;\r\n        }\r\n        if(games[i].playtime_forever < 720 && games[i].playtime_forever > 0) {//12 hrs or less\r\n            counts[1] = counts[1] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 720 && games[i].playtime_forever < 1440) {//12-24\r\n            counts[2] = counts[2] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 1440 && games[i].playtime_forever < 2160) {//24-36\r\n            counts[3] = counts[3] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2160 && games[i].playtime_forever < 2880) {//36-48\r\n            counts[4] = counts[4] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2880 && games[i].playtime_forever < 3600) {//48-60\r\n            counts[5] = counts[5] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 3600) {//60+\r\n            counts[6] = counts[6] + 1;\r\n        }\r\n    }\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            color: 'white',\r\n            position: 'top',\r\n            text: 'Game Count'\r\n        },\r\n        legend: {\r\n            display: true\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: timePlayed,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: counts,\r\n          backgroundColor: backgroundColors,\r\n          borderColor: 'Black',\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    );\r\n}\r\nexport default TimePlayed;","import {Doughnut} from 'react-chartjs-2';\r\n\r\nconst RatioPlayed = ({games}) => {\r\n    let colors = [\r\n        'hsl(214, 100%, 50%)',\r\n        'hsl(250, 75%, 20%)',\r\n        'hsl(214, 20%, 20%)',\r\n        'hsl(230, 20%, 75%)',\r\n        'hsl(214, 60%, 5%)',\r\n        'hsl(190, 60%, 75%)',\r\n        'hsl(214, 30%, 50%)',\r\n    ]\r\n\r\n    let totalTime = 0;\r\n    for(let i=0; i<games.length; i++){\r\n        totalTime += games[i].playtime_forever;\r\n    }\r\n\r\n    let avgTime = totalTime/games.length;\r\n    avgTime = avgTime/1.3; //determines what qualifies to be graphed\r\n    let gamesSort = games;\r\n    //https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values\r\n    gamesSort.sort((a, b) => (b.playtime_forever) - (a.playtime_forever));\r\n    let gameNames = [];\r\n    let playTime = [];\r\n    for(let i=0; i<gamesSort.length; i++){\r\n        if(gamesSort[i].playtime_forever >= avgTime && gameNames.length < 25){\r\n            gameNames.push(gamesSort[i].name);\r\n            playTime.push(gamesSort[i].playtime_forever);\r\n        }\r\n    }\r\n    if(avgTime === 0){\r\n        return(\r\n            <div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            text: 'Most Played Games',\r\n            color: 'white',\r\n            position: 'top'\r\n        },\r\n        legend: {\r\n            display: false\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: gameNames,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: playTime,\r\n          backgroundColor: colors,\r\n          borderColor: 'White',\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    )\r\n}\r\nexport default RatioPlayed;","import MostPlayed from './graphs/MostPlayed.js'\r\nimport TimePlayed from './graphs/TimePlayed.js'\r\nimport RatioPlayed from './graphs/RatioPlayed'\r\n\r\nconst GamesGraph = ({games}) => {\r\n    return(\r\n        <div>\r\n        {games && \r\n            <div className=\"table-responsive profile-info row d-flex justify-content-center\">\r\n                <div className=\"col-md-5 col-sm-10 m-2\">\r\n                    <TimePlayed games={games}/>\r\n                </div>\r\n                <div className=\"col-md-5 col-sm-10 m-2\">\r\n                    <RatioPlayed games={games}/>\r\n                </div>\r\n            </div>\r\n        }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GamesGraph","import ProgressBar from 'react-bootstrap/ProgressBar'\r\nconst Loading = ({loading, loadingMsg}) => {\r\n    return(\r\n        <div className=\"loading-window\">\r\n            <span className=\"player-summary-tiny-font\">LOADING</span>\r\n            <h1 className=\"text-light\">{loadingMsg}</h1>\r\n            <h2 className=\"text-light\">{loading}%</h2>\r\n            <ProgressBar now={loading} />\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Loading;","import { useEffect, useState } from \"react\";\r\n\r\nconst RandomGame = ({games}) => {\r\n    const [rngGame, setGame] = useState(null);\r\n    let unplayed = [];\r\n\r\n    for(let i = 0; i < games.length; i++){\r\n        unplayed.push(games[i]);\r\n    }\r\n\r\n    for(let i = unplayed.length-1; i >= 0; --i){\r\n        if(unplayed[i].playtime_forever > 10){\r\n            unplayed.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    const [click, setClick] = useState(0);\r\n    function handleClick(event){\r\n        setClick(click + 1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let rng = Math.floor(Math.random() * (unplayed.length-1 - 0) + 0);\r\n\r\n        setGame(unplayed[rng]);\r\n    }, [click])\r\n\r\n    if(unplayed.length === 0){\r\n        return(\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"profile-info mt-4 row text-center d-flex justify-content-center\">\r\n            <h3 className=\"text-light col-sm-10 m-2\">Revisit one of your unplayed games:</h3>\r\n            {rngGame &&\r\n                <div className=\"text-center row d-flex justify-content-center\">\r\n                     <img className=\"col-md-5 col-10\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + rngGame.appid + '/' + rngGame.img_logo_url + '.jpg'} \r\n                        alt={'Game icon: ' + rngGame.name} />\r\n                    <h5>{rngGame.name}</h5>\r\n                </div>\r\n            }\r\n            <button className=\"btn btn-outline-light m-2 col-3 btn-sm \" onClick={handleClick}>New Game</button>\r\n        </div>\r\n    );\r\n}\r\nexport default RandomGame;","import {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\nimport GamesGraph from './GamesGraph.js'\r\nimport Loading from './Loading.js'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport RandomGame from './RandomGame.js';\r\n\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n\r\n  console.log(\"key\" + process.env.REACT_APP_STEAM_API_KEY)\r\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n  //Perhaps there is a more elegent way to do this\r\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n  //Max's api steam key. Use it for this project\r\n  const key = process.env.REACT_APP_STEAM_API_KEY;\r\n  const headers =\r\n  {\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {'Content-Type': 'application/json'},\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n  };\r\n\r\n  const [loading, setLoad] = useState(null);\r\n  const [loadMsg, setLoadMsg] = useState(\"\");\r\n  const [broken, setBroken] = useState(null);\r\n\r\n  const [playerSummary, setPlayerSummary] = useState(null);\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [allGames, setGames] = useState(null);\r\n\r\n  //user content\r\n  const [steamid, setSteamid] = useState(0);\r\n  const [playedGames, setPlayedGames] = useState([]);\r\n  const [friendsList, setFriendsList] = useState([]);\r\n\r\n  //game content\r\n  const [appid, setAppid] = useState(0);\r\n  const [gameBannerURL, setGameBannerURL] = useState(\"\");\r\n  const [gameTitle, setGameTitle] = useState(\"\");\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [gameAchievements, setGameAchievements] = useState([]);\r\n  const [playerGameStats, setPlayerGameStats] = useState([]);\r\n  \r\n  //React things\r\n  useEffect( () => {\r\n    setLoad(1);\r\n    grabData();\r\n    setLoad(null);\r\n  }, [searchClick]);\r\n\r\n  async function grabData(event)\r\n  {\r\n    //reset values\r\n    setPlayerSummary(null);\r\n    setLevel(\"\");\r\n    setGames(null);\r\n\r\n    setSteamid(0);\r\n    setPlayedGames(null);\r\n    setFriendsList(null);\r\n    \r\n    setGameTitle(null);\r\n    setGameAchievements(null);\r\n    setPlayerGameStats(null);\r\n    setBroken(null);\r\n    \r\n    //get the form seach boxes\r\n    let searchedApp = document.getElementById(\"game\").value;\r\n    let searchedProfile = document.getElementById(\"username\").value;\r\n    let generatedSteamid;\r\n    let generatedAppid;\r\n    let generatedAppTitle;\r\n\r\n    //game/app name\r\n    //check if the user entered a username to search for\r\n    if (searchedProfile)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is \"scouteriv\" from https://steamcommunity.com/id/scouteriv/\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      let steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + searchedProfile + '&format=json', headers)\r\n      //console.log(steamidResponse.response)\r\n      generatedSteamid = steamidResponse.response.steamid;\r\n      \r\n      //backup to check if the entered profile name is a steamid\r\n      if (!generatedSteamid && /^\\d+$/.test(searchedProfile))\r\n      {\r\n        generatedSteamid = searchedProfile;\r\n      }\r\n      console.log(\"Found user \" + generatedSteamid + \" from \" + searchedProfile);\r\n      if(generatedSteamid === undefined){\r\n        console.error(\"Not a valid user\")\r\n      }\r\n\r\n      setLoadingMessage(1, \"Finding user \" + generatedSteamid)\r\n    }\r\n    \r\n    if (searchedApp)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      let appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n\r\n      setLoadingMessage(8, \"Searching for \" + searchedApp)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      let appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === searchedApp.toLowerCase());\r\n\r\n      //check if the game is an appid\r\n      if (!appObject && /^\\d+$/.test(searchedApp))\r\n      {\r\n        console.log(\"Checking if the entered game is a valid appid\")\r\n        appObject = appListResponse.applist.apps.find(app => app.appid.toString() === searchedApp);\r\n      }\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        generatedAppid = appObject.appid;\r\n        generatedAppTitle = appObject.name;\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + searchedApp)\r\n      }\r\n      else\r\n      {\r\n        console.log(\"No game found with query \" + searchedApp)\r\n      }\r\n    }\r\n\r\n    let friendsListResponse;\r\n    let playerSummeryResponse;\r\n\r\n    //stats for player summary\r\n    if (generatedSteamid)\r\n    {\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n      if(playerSummeryResponse.response.players[0] === undefined){\r\n        console.error(\"Invalid User\")\r\n        setBroken(1);\r\n      }\r\n\r\n      setLoadingMessage(15, \"fetching player summary\")\r\n\r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      let steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n      setLoadingMessage(27, \"\")\r\n      \r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + ',&format=json', headers)\r\n      //console.log(friendsListResponse.friendslist)\r\n      setLoadingMessage(32, \"\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      let ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n      setLoadingMessage(41, \"\")\r\n\r\n      setGames(ownedGamesResponse.response.games)\r\n      setPlayerSummary(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level);\r\n      if (friendsListResponse) setFriendsList(friendsListResponse.friendslist.friends);\r\n    }\r\n\r\n    if (generatedSteamid && generatedAppid) //if both a user and game is searched and valid\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      setLoadingMessage(42, \"Searching player achievements\")\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      let playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse);\r\n      setLoadingMessage(57, \"\")\r\n\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      let globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + generatedAppid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse);\r\n      setLoadingMessage(69, \"\")\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      let numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse);\r\n      setPlayerCount(numCurrentPlayersResponse.response.player_count);\r\n      setLoadingMessage(77, \"\")\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      let gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      setLoadingMessage(100, \"\")\r\n      \r\n      // the inputs to this one must come from the previous API call\r\n      // not a lot of games implement this\r\n      let gameStats;\r\n      let userStatsForGameResponse;\r\n      try {\r\n        gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n\r\n        console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n        userStatsForGameResponse = await fetchJSON(proxy +\r\n          'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n          key + '&appid=' + generatedAppid + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n        // userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n        console.log(userStatsForGameResponse.playerstats.stats);\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Game does not have stats\");\r\n      }\r\n       \r\n      try {\r\n        if (gameSchemaResponse.game.availableGameStats.achievements)\r\n        {\r\n          let mergedAchievementList = mergeAchievementObjects(\r\n            playerAchievementsResponse.playerstats.achievements,\r\n            globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n            gameSchemaResponse.game.availableGameStats.achievements);\r\n          console.log(mergedAchievementList);\r\n          setGameAchievements(mergedAchievementList);\r\n\r\n          let fullStatObject = makeStatObjects(gameSchemaResponse.game.availableGameStats.stats,\r\n            userStatsForGameResponse.playerstats.stats);\r\n          setPlayerGameStats(fullStatObject);\r\n\r\n          /* experimental concurrent API pull */\r\n          // let combinedGameStats = combineStats(gameSchemaResponse.game.availableGameStats.stats,\r\n          //   playerSummeryResponse.response.players[0],\r\n          //   userStatsForGameResponse.playerstats.stats,\r\n          //   friendsListResponse.friendslist.friends,\r\n          //   generatedAppid);\r\n        }\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Something in gameSchemaResponse.game.availableGameStats is undefined\");\r\n      }\r\n    }\r\n    else if (generatedSteamid && !generatedAppid) //if only the username is valid\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      let recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n      setPlayedGames(recentlyPlayedGamesResponse.response.games);\r\n      setLoadingMessage(72, \"Finding user stats\")\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      let communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n      setLoadingMessage(99, \"\")\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      let playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n    }\r\n    else if (!generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY valid appid searched\")\r\n    }\r\n    else\r\n    {\r\n      console.log(\"\\tNO valid item searched\");\r\n      setBroken(1)\r\n    }\r\n\r\n    setSteamid(generatedSteamid);\r\n    setAppid(generatedAppid);\r\n    setGameTitle(generatedAppTitle);\r\n    fetchGameBannerURL(generatedAppid);\r\n    \r\n    setLoad(null);\r\n  }\r\n\r\n  //take the arrays of the achievement schema, global stats\r\n  //and user stats and combine them into one array a unified object\r\n  function mergeAchievementObjects(userAchievements, globalAchievements, achievementSchemas)\r\n  {\r\n    let achievementObjectList = [];\r\n    for (let i = 0; i < achievementSchemas.length; i++)\r\n    {\r\n      let achievementObject = {\r\n        achieved: userAchievements[i].achieved,\r\n        apiname: userAchievements[i].apiname,\r\n        unlocktime: userAchievements[i].unlocktime,\r\n        name: globalAchievements[i].name,\r\n        percent: globalAchievements[i].percent,\r\n        defaultvalue: achievementSchemas[i].defaultvalue,\r\n        displayName: achievementSchemas[i].displayName,\r\n        hidden: achievementSchemas[i].hidden,\r\n        icon: achievementSchemas[i].icon,\r\n        icongray: achievementSchemas[i].icongray,\r\n        name: achievementSchemas[i].name,\r\n        description: achievementSchemas[i].description,\r\n      }\r\n      achievementObjectList.push(achievementObject);\r\n    }\r\n    return achievementObjectList;\r\n  }\r\n\r\n  //experimental concurrent function. Not working yet\r\n  async function combineStats(statSchema, player, playerStats, friends, gameid)\r\n  {\r\n    var t0 = performance.now()\r\n    console.log(statSchema);\r\n    console.log(player);\r\n    console.log(playerStats);\r\n    console.log(friends);\r\n\r\n    let friendsListString = \"\";\r\n    for (const friend of friends)\r\n    {\r\n      friendsListString = friendsListString.concat(friend.steamid + \",\");\r\n    }\r\n\r\n    //get the names of steam friends\r\n    let friendSummariesResponse = await fetchJSON(proxy + \r\n      'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n      key + '&steamids=' + friendsListString + '&format=json', headers)\r\n    let friendSummaries = friendSummariesResponse.response.players\r\n\r\n    //fetch all of their games concurrently\r\n    let friendsGameList = [];\r\n    try {\r\n      var list = await Promise.all(\r\n        friendSummaries.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n              key + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())));\r\n      friendsGameList = list;\r\n    }\r\n    catch (error)\r\n    {\r\n        console.log(error)\r\n        throw (error)\r\n    }\r\n\r\n    //add the steamid to the game list so they have an accompanying person\r\n    let friendsWithGame = []\r\n    friendsWithGame.unshift(player);\r\n    for (let i = 0; i < friendsGameList.length; i++)\r\n    {\r\n      if (!(friendsGameList[i].response['games'])) continue;\r\n      for (let j = 0; j < friendsGameList[i].response.games.length; j++)\r\n      {\r\n        if (friendsGameList[i].response.games[j].appid === gameid)\r\n        {\r\n          friendsWithGame.push(friendSummaries[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    console.log(friendsWithGame)\r\n\r\n    //fetch all stats concurrently\r\n    let friendsStats = []\r\n    try {\r\n      var list = await Promise.all(\r\n        friendsWithGame.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n              key + '&appid=' + gameid + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())))\r\n            .catch((error) => {\r\n              console.error('Error:', error);\r\n            })\r\n        friendsStats = list;\r\n    }\r\n    catch (error)\r\n    {\r\n      console.log(\"Data is set to private for a friend\")\r\n    }\r\n\r\n    console.log(friendsStats)\r\n    var t1 = performance.now();\r\n    console.log(\"Call to combineStats took \" + ((t1 - t0)/1000).toFixed(1) + \" seconds.\");\r\n  }\r\n\r\n  //set the loading message\r\n  function setLoadingMessage(percent, message)\r\n  {\r\n    setLoad(percent)\r\n    if (message) setLoadMsg(message)\r\n  }\r\n\r\n  //combine the stat schema and the stats of the player\r\n  function makeStatObjects(statSchema, playerStats)\r\n  {\r\n    for (let i = 0; i < statSchema.length; i++)\r\n    {\r\n      for (let j = 0; j < playerStats.length; j++)\r\n      {\r\n        if (statSchema[i].name === playerStats[j].name)\r\n        {\r\n          statSchema[i].value = playerStats[j].value;\r\n        }\r\n      }\r\n      if (!('value' in statSchema[i])) statSchema[i].value = 0;\r\n      if (!(statSchema[i].displayName)) statSchema[i].displayName = statSchema[i].name;\r\n    }\r\n    statSchema = statSchema.filter(stat => stat.value != 0);\r\n    return statSchema;\r\n  }\r\n\r\n  //fetch from an API URL and return the resulting JSON\r\n  async function fetchJSON(apiURL, headers)\r\n  {\r\n    let response = await fetch(apiURL, headers);\r\n    if ((response.status >= 400) && (response.status < 500))\r\n    {\r\n      console.error(\"client error. returning undefined to be caught later on\");\r\n      return undefined;\r\n    }\r\n    else if (!response.ok)\r\n    {\r\n      console.error(\"There was an error: \" + response.status);\r\n    }\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  //convert steam status if to a string\r\n  function getStatusString(statusCode)\r\n  {\r\n    let status = \"Unknown\";\r\n    switch(statusCode)\r\n    {\r\n      case 0:\r\n        status = \"Offline\"\r\n        break;\r\n      case 1:\r\n        status = \"Online\"\r\n        break;\r\n      case 2:\r\n        status = \"Busy\"\r\n        break;\r\n      case 3:\r\n        status = \"Away\"\r\n        break;\r\n      case 4:\r\n        status = \"Snooze\"\r\n        break;\r\n      case 5:\r\n        status = \"Looking to Trade\"\r\n        break;\r\n      case 6:\r\n        status = \"Looking to Play\"\r\n        break;\r\n      default:\r\n        status = \"Private\"\r\n        break;\r\n    }\r\n    return status;\r\n  }\r\n\r\n  //convert minutes to hours and minutes\r\n  function minutesToHours(minutes)\r\n  {\r\n    return Math.floor(minutes / 60) + \" hr \" + (minutes % 60) + \" min\";\r\n  }\r\n\r\n  //convert the time that is recieved from steam api into a date and time\r\n  function convertSteamTimeToUTC(seconds)\r\n  {\r\n    if (!seconds)\r\n      return \"Private\";\r\n\r\n    let time = new Date(seconds * 1000);\r\n      \r\n    let options = {\r\n      weekday: 'short',\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    return time.toLocaleDateString('en-US', options);\r\n  }\r\n\r\n  //return a pretty string saying the duration that the parameter is\r\n  function getTimeDifferenceString(timeInSeconds)\r\n  {\r\n    let then = new Date(timeInSeconds*1000)\r\n    let differenceInMinutes = Math.abs(Date.now() - then) / (1000 * 60);\r\n    let minutes = Math.floor(differenceInMinutes % 60);\r\n\r\n    let differenceInHours = (differenceInMinutes / 60);\r\n    let hours = Math.floor(differenceInHours % 24);\r\n\r\n    let differenceInDays = (differenceInMinutes / (60 * 24));\r\n    let days = Math.floor(differenceInDays % 365);\r\n    let differenceInYears = (differenceInMinutes / (60 * 24 * 365));\r\n    let years = Math.floor(differenceInYears);\r\n\r\n    let timeDifference = (years ? (years + \" years, \") : \"\")  + \r\n      (days ? (days + \" days, \") : \"\") + \r\n      (hours ? (hours + \" hours, \") : \"\") + \r\n      (minutes ? (minutes + \" minutes \") : \"\") + \"ago\";\r\n    return timeDifference;\r\n  }\r\n\r\n  //bundled function to return a string with time, and how long ago that time was\r\n  function fullTimeWithDifference(timeInMilliseconds)\r\n  {\r\n    if (!timeInMilliseconds) return \"Private\";\r\n\r\n    return convertSteamTimeToUTC(timeInMilliseconds) +\r\n      \" (\" + getTimeDifferenceString(timeInMilliseconds) + \")\";\r\n  }\r\n\r\n  //print the state and country, or just state, or just country, depending on what is defined\r\n  function getLocationString(state, country)\r\n  {\r\n    return (state ? state : \"\") + (state ? \", \" : \"\") + (country ? country : \"\")\r\n  }\r\n\r\n  //take in an appid and return a url of an image of that appid's game/app\r\n  async function fetchGameBannerURL(id)\r\n  {\r\n    let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/page_bg_generated.jpg\";\r\n    let response = await fetch(proxy + bannerURL)\r\n    .then(response => {\r\n      if (response.ok)\r\n        return response;\r\n      else\r\n        return Promise.reject(response.status);\r\n    })\r\n    .catch(error => {\r\n      console.log(\"Error getting high-quality game image, using default, low-res header img instead: \" + error);\r\n      bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/header.jpg\";\r\n      return bannerURL;\r\n    })\r\n    .finally(function() {\r\n      return bannerURL;\r\n    });\r\n    setGameBannerURL(bannerURL);\r\n  }\r\n\r\n  //take in an array of achievements and return what percent are 'achieved'\r\n  function getAchievementPercent(achievementList, targetGame, gameList)\r\n  {\r\n    let gameFound = false;\r\n    for (let i = 0; i < gameList.length; i++)\r\n    {\r\n      if (gameList[i].appid === targetGame) gameFound = true;\r\n    }\r\n\r\n    if (!gameFound)\r\n    {\r\n      return \"Player does not have this game.\"\r\n    }\r\n\r\n    if (achievementList)\r\n    {\r\n      //achievements obtained so far\r\n      let userAchievementCount = 0;\r\n      for (let i = 0; i < achievementList.length; i++)\r\n      {\r\n        if (achievementList[i].achieved) userAchievementCount++;\r\n      }\r\n      return (userAchievementCount + \" out of \" + achievementList.length + \" achievements obtained\");\r\n    }\r\n    else\r\n    {\r\n      return (\"This game does not have achievements\");\r\n    }\r\n  }\r\n\r\n  //get the time that an achievement was unlocked, or state if it is still locked\r\n  function getAchievementStatus(achievement)\r\n  {\r\n    return achievement.achieved ?\r\n      (\"Unlocked \" + convertSteamTimeToUTC(achievement.unlocktime)) : \"Locked\";\r\n  }\r\n\r\n  //get the status of an achievement\r\n  function getAchievementDescription(achievement)\r\n  {\r\n      return achievement.description ? achievement.description : \"\";\r\n  }\r\n\r\n  //return HTML/JSX statement\r\n  return (loading) ? (\r\n    <div>\r\n      {broken &&\r\n      <div> \r\n        <h3 className=\"alert alert-danger\">Not a valid search</h3>\r\n      </div>\r\n      }\r\n      {(!broken) &&\r\n        <div>\r\n         <Loading loading={loading} loadingMsg={loadMsg} />\r\n        </div>\r\n      }\r\n    </div>\r\n  ) :\r\n    (\r\n    <div>\r\n      {broken &&\r\n      <div> \r\n        <h3 className=\"alert alert-danger\">Not a valid search</h3>\r\n      </div>\r\n      }\r\n      {playerSummary &&\r\n      <div className=\"row d-flex justify-content-center\">\r\n        {/* PLAYER SUMMARY THAT IS ALWAYS PRESENT */}\r\n        <div className=\"container\"> \r\n          <div className=\"player-summary col-xs-12 col-md-12 col-lg-8 justify-content-between\">\r\n              <a className=\"player-summary-avatar\" href={playerSummary.profileurl}>\r\n                <img id=\"profile-image\" src={playerSummary.avatarfull} alt={playerSummary.personaname + \"'s avatar\"}></img>\r\n              </a>\r\n              <div className=\"player-summary-persona fs-2\">\r\n                <span className=\"player-summary-tiny-font\">Full Persona Name</span>{playerSummary.personaname}\r\n              </div>\r\n              <div className=\"player-summary-steamid fs-6\">\r\n                <span className=\"player-summary-tiny-font\">SteamID</span>{playerSummary.steamid}\r\n              </div>\r\n              <div className=\"player-summary-status fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Status</span>{getStatusString(playerSummary.personastate)}\r\n              </div>\r\n              {friendsList &&\r\n              <div className=\"player-summary-friends fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Friends</span>{friendsList.length}\r\n              </div>\r\n              }\r\n              {playerSummary.realname &&\r\n              <div className=\"player-summary-real-name fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Real Name</span>{playerSummary.realname}\r\n              </div>\r\n              }\r\n              {(playerSummary.locstatecode || playerSummary.loccountrycode) &&\r\n              <div className=\"player-summary-location fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Location</span>{getLocationString(playerSummary.locstatecode,playerSummary.loccountrycode)}\r\n                <img className=\"player-summary-flag\" src={\"https://www.countryflags.io/\" + playerSummary.loccountrycode + \"/shiny/64.png\"}></img>\r\n              </div>\r\n              }\r\n              <div className=\"player-summary-last-online fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Last Log off</span>{fullTimeWithDifference(playerSummary.lastlogoff)}\r\n              </div>\r\n              <div className=\"player-summary-created fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Account Created</span>{fullTimeWithDifference(playerSummary.timecreated)}\r\n              </div>\r\n              <div className=\"player-summary-level fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Steam Level</span>{steamLevel}\r\n              </div>\r\n              {allGames &&\r\n              <div className=\"player-summary-games fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Owned Games</span>{allGames.length}\r\n              </div>\r\n              }\r\n          </div>\r\n        </div>\r\n        <div id=\"user-app-content\" className=\"row justify-content-center\">\r\n        {/* USER-ONLY SEARCH CONTENT */}\r\n        {playedGames &&\r\n        <div className=\"container m-4\">\r\n          <div className=\"profile-info mx-auto flex-row flex-wrap d-flex\">\r\n            <h4 className=\"col-12 text-center mt-2\">Recently Played Games</h4>\r\n            {playedGames.map(game => (\r\n            <div key={game.appid} className=\"rounded the-game flex-fill m-2 p-2 col-xs-12 col-sm-6 col-md-3\">\r\n              <img id=\"game-icon\" className=\"mr-3\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + game.appid + '/' + game.img_icon_url + '.jpg'} \r\n                alt={'Game icon:' + game.name} height=\"50px\" width=\"50px\" />\r\n              <span className=\"ml-2\"> {game.name}</span>\r\n              <span className=\"game-facts rounded border border-light m-2 p-2\">Playtime: {minutesToHours(game.playtime_forever)}</span>\r\n            </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        }\r\n        {/* USER-GAME SEARCH CONTENT */}\r\n          {/* Game banner */}\r\n        {gameTitle &&\r\n          <div className=\"row game-banner\">\r\n            <div className=\"col-xs-12 col-md-8 game-banner-title m-0 p-0\" style={{backgroundImage: `url(${gameBannerURL})`}}>\r\n            <h2 className=\"text-light text-left align-middle\" style={{lineHeight: \"75px\"}}>{gameTitle}</h2>\r\n            </div>\r\n            <div className=\"col-xs-12 col-md-4 game-banner-info\">\r\n              <p className=\"text-light game-banner-info-playercount\">{playerCount + \" players online\"}</p>\r\n              <p className=\"text-light game-banner-info-achievement\">{getAchievementPercent(gameAchievements, appid, allGames)}</p>\r\n            </div>\r\n          </div>\r\n        }\r\n          {/* Game achievement grid */}\r\n        {gameAchievements &&\r\n          <div className=\"row col-xs-12\">\r\n            <div className=\"achievement-grid flex-row flex-wrap d-flex justify-content-between\">\r\n            {gameAchievements.map(achievement => (\r\n              <div key={achievement.name} className=\"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\">\r\n                <img className=\"achievement-icon mx-auto\" src={achievement.icon} alt={achievement.name} width=\"75px\" height=\"75px\"/>\r\n                <p className=\"achievement-global-percent text-light\">{achievement.percent.toFixed(2)}% of players have this achievement.</p>\r\n                <p className=\"achievement-unlock text-light\">{getAchievementStatus(achievement)}</p>\r\n                <h3 className=\"achievement-title text-light\">{achievement.displayName}</h3>\r\n                <p className=\"achievement-description text-light\">{getAchievementDescription(achievement)}</p>\r\n              </div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n        }\r\n          {/* Game stats table */}\r\n        {playerGameStats &&\r\n        <div className=\"container\">\r\n          <table className=\"table table-dark table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">Stat Name</th>\r\n                <th scope=\"col\">{playerSummary.personaname}'s Stat</th>\r\n              </tr>\r\n            </thead>\r\n            {playerGameStats.map(stat => (\r\n            <tbody key={stat.name} className=\"table-striped\">\r\n              <tr>\r\n                <th scope=\"row\">{stat.displayName}</th>\r\n                <td>{stat.value}</td>\r\n              </tr>\r\n            </tbody>\r\n            ))}\r\n          </table>\r\n        </div>\r\n        }\r\n        </div>      \r\n        {(!appid) && allGames &&\r\n\r\n          <div className=\"row d-flex justify-content-center col-12\">\r\n            <br></br>\r\n            <GamesGraph games={allGames}></GamesGraph>\r\n            <RandomGame games={allGames}></RandomGame>\r\n          </div>\r\n        }\r\n    </div>\r\n      }     \r\n    <div className=\"footer-space\"></div>\r\n      <Redirect to =\"/\" />\r\n      {/* A little extra padding... */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main\r\n","import './App.css'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"search-bar\" htmlFor=\"username\">User Profile</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control dark-bg\"\r\n                  id=\"username\"\r\n                  aria-describedby=\"username-help\"\r\n                  placeholder=\"Enter a Steam ID or vanity URL\"\r\n                  name=\"username\"\r\n                  value={usernameSearch}\r\n                  onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"search-bar\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"game\"\r\n                  aria-describedby=\"game-help\"\r\n                  placeholder=\"Enter a Steam game name or ID\"\r\n                  name=\"game\"\r\n                  value={appSearch}\r\n                  onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-xs-12 col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label className=\"search-bar h5\" htmlFor=\"username\">User Profile</label>\r\n                  <input type=\"text\"\r\n                    className=\"form-control dark-bg\"\r\n                    id=\"username\"\r\n                    aria-describedby=\"username-help\"\r\n                    placeholder=\"Enter a Steam ID or vanity URL\"\r\n                    name=\"username\"\r\n                    value={usernameSearch}\r\n                    onChange={e => setUsernameSearch(e.target.value)}\r\n                    required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL from a Steam profile, or enter the ID of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\" className=\"search-bar h5\">Steam Game</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"game\"\r\n                  aria-describedby=\"game-help\"\r\n                  placeholder=\"Enter a Steam game or ID\"\r\n                  name=\"game\"\r\n                  value={appSearch}\r\n                  onChange={e => setAppSearch(e.target.value)}\r\n                  />\r\n                <small id=\"game-help\" className=\"form-text\">Enter an app name or ID that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>SteamCompare</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam is a trademark of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}