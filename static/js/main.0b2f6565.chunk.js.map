{"version":3,"sources":["graphs/TimePlayed.js","graphs/RatioPlayed.js","GamesGraph.js","Loading.js","RandomGame.js","main.js","App.js","index.js"],"names":["TimePlayed","games","console","log","counts","i","length","playtime_forever","data","labels","datasets","label","backgroundColor","options","responsive","plugins","title","display","color","position","text","legend","RatioPlayed","totalTime","avgTime","gamesSort","sort","a","b","gameNames","playTime","push","name","GamesGraph","className","Loading","loading","loadingMsg","RandomGame","useState","rngGame","setGame","unplayed","splice","click","setClick","useEffect","rng","Math","floor","random","src","appid","img_logo_url","alt","onClick","event","Main","usernameSearch","state","country","searchClick","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","setLoad","loadMsg","setLoadMsg","playerSummary","setPlayerSummary","steamLevel","setLevel","allGames","setGames","setSteamid","playedGames","setPlayedGames","friendsList","setFriendsList","setAppid","gameBannerURL","setGameBannerURL","gameTitle","setGameTitle","playerCount","setPlayerCount","gameAchievements","setGameAchievements","playerGameStats","setPlayerGameStats","searchedApp","document","getElementById","value","searchedProfile","fetchJSON","steamidResponse","generatedSteamid","response","steamid","test","setLoadingMessage","appListResponse","appObject","applist","apps","find","app","toLowerCase","toString","generatedAppid","generatedAppTitle","playerSummeryResponse","players","steamLevelResponse","friendsListResponse","ownedGamesResponse","player_level","friendslist","friends","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","player_count","gameSchemaResponse","game","availableGameStats","stats","userStatsForGameResponse","playerstats","achievements","mergedAchievementList","mergeAchievementObjects","achievementpercentages","fullStatObject","makeStatObjects","unused","recentlyPlayedGamesResponse","communityBadgeProgressResponse","playerBansResponse","fetchGameBannerURL","userAchievements","globalAchievements","achievementSchemas","achievementObjectList","achievementObject","achieved","apiname","unlocktime","percent","defaultvalue","displayName","hidden","icon","icongray","description","message","statSchema","playerStats","j","filter","stat","apiURL","fetch","status","error","undefined","ok","json","convertSteamTimeToUTC","seconds","Date","toLocaleDateString","weekday","year","month","day","hour","minute","fullTimeWithDifference","timeInMilliseconds","timeInSeconds","then","differenceInMinutes","abs","now","minutes","differenceInHours","hours","differenceInDays","days","differenceInYears","years","getTimeDifferenceString","id","bannerURL","Promise","reject","catch","finally","getAchievementStatus","achievement","getAchievementDescription","grabData","href","profileurl","avatarfull","personaname","statusCode","getStatusString","personastate","realname","locstatecode","loccountrycode","lastlogoff","timecreated","map","img_icon_url","height","width","style","backgroundImage","lineHeight","achievementList","userAchievementCount","getAchievementPercent","toFixed","scope","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","bodyHTML","required","preventDefault","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0b2f6565.chunk.js","sourcesContent":["import {Doughnut} from 'react-chartjs-2';\r\nconst TimePlayed = ({games}) =>{\r\n    console.log(games)\r\n    let backgroundColors = [\r\n        'rgba(54, 162, 235, 0.8)',\r\n        'rgba(255, 206, 86, 0.8)',\r\n        'rgba(255, 99, 132, 0.8)',\r\n        'rgba(75, 192, 192, 0.8)',\r\n        'rgba(153, 102, 255, 0.8)',\r\n        'rgba(255, 159, 64, 0.8)',\r\n        'rgba(150, 50, 199, 0.8)',\r\n        'rgba(83, 102, 255, 0.8)',\r\n        'rgba(40, 159, 64, 0.8)',\r\n        'rgba(210, 199, 199, 0.8)',\r\n      ];\r\n    let timePlayed = [\r\n        \"Not Played\",\r\n        \"0-12 hrs\",\r\n        \"12-24 hrs\",\r\n        \"24-36 hrs\",\r\n        \"36-48 hrs\",\r\n        \"48-60 hrs\",\r\n        \"60+ hrs\"\r\n    ]\r\n\r\n    let counts = [\r\n        0,0,0,0,0,0,0\r\n    ]\r\n    for(let i=0; i < games.length; i++){\r\n        if(games[i].playtime_forever === 0){\r\n            counts[0] += 1;\r\n        }\r\n        if(games[i].playtime_forever < 720 && games[i].playtime_forever > 0){//12 hrs or less\r\n            counts[1] = counts[1] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 720 && games[i].playtime_forever < 1440){//12-24\r\n            counts[2] = counts[2] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 1440 && games[i].playtime_forever < 2160){//24-36\r\n            counts[3] = counts[3] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2160 && games[i].playtime_forever < 2880){//36-48\r\n            counts[4] = counts[4] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2880 && games[i].playtime_forever < 3600){//48-60\r\n            counts[5] = counts[5] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 3600){//60+\r\n            \r\n            counts[6] = counts[6] + 1;\r\n        }\r\n    }\r\n    console.log(counts);\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            color: 'white',\r\n            position: 'top',\r\n            text: 'Game Count'\r\n        },\r\n        legend: {\r\n            display: true\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: timePlayed,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: counts,\r\n          backgroundColor: backgroundColors,\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    );\r\n}\r\nexport default TimePlayed;","import {Doughnut} from 'react-chartjs-2';\r\n\r\nconst RatioPlayed = ({games}) => {\r\n    let colors = [\r\n        'hsl(214, 100%, 50%)',\r\n        'hsl(250, 75%, 20%)',\r\n        'hsl(214, 20%, 20%)',\r\n        'hsl(230, 20%, 75%)',\r\n        'hsl(214, 60%, 5%)',\r\n        'hsl(190, 60%, 75%)',\r\n        'hsl(214, 30%, 50%)',\r\n    ]\r\n\r\n    let totalTime = 0;\r\n    for(let i=0; i<games.length; i++){\r\n        totalTime += games[i].playtime_forever;\r\n    }\r\n    console.log(totalTime)\r\n    let avgTime = totalTime/games.length;\r\n    avgTime = avgTime/3; //determines what qualifies to be graphed\r\n    let gamesSort = games;\r\n    //https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values\r\n    gamesSort.sort((a, b) => (b.playtime_forever) - (a.playtime_forever));\r\n    let gameNames = [];\r\n    let playTime = [];\r\n    for(let i=0; i<gamesSort.length; i++){\r\n        if(gamesSort[i].playtime_forever >= avgTime){\r\n            gameNames.push(gamesSort[i].name);\r\n            playTime.push(gamesSort[i].playtime_forever);\r\n        }\r\n    }\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            text: 'Favorite Games(?)',\r\n            color: 'white',\r\n            position: 'top'\r\n        },\r\n        legend: {\r\n            display: false\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: gameNames,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: playTime,\r\n          backgroundColor: colors,\r\n        }]\r\n    };\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    )\r\n}\r\nexport default RatioPlayed;","import {Bar} from 'react-chartjs-2';\r\nimport{\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport MostPlayed from './graphs/MostPlayed.js'\r\nimport TimePlayed from './graphs/TimePlayed.js'\r\nimport RatioPlayed from './graphs/RatioPlayed'\r\n\r\n\r\nconst GamesGraph = ({games}) => {\r\n    return(\r\n        <div>\r\n        {games && \r\n        <div className=\"table-responsive profile-info row d-flex justify-content-center\">\r\n            \r\n            <div className=\"col-md-5 col-sm-10 m-2\">\r\n                        <TimePlayed games={games}/>\r\n            </div>\r\n            <div className=\"col-md-5 col-sm-10 m-2\">\r\n                <RatioPlayed games={games}/>\r\n            </div>\r\n        </div>\r\n            }\r\n            </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GamesGraph","\r\nconst Loading = ({loading, loadingMsg}) => {\r\n    console.log(loading);\r\n\r\n    return(\r\n        <div className=\"loading-window\">\r\n            <span className=\"player-summary-tiny-font\">LOADING</span>\r\n            <h1 className=\"text-light\">{loadingMsg}</h1>\r\n            <h2 className=\"text-light\">Loaded: {loading}%</h2>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Loading;","import { useEffect, useState } from \"react\";\r\n\r\nconst RandomGame = ({games}) => {\r\n    const [rngGame, setGame] = useState(null);\r\n    let unplayed = [];\r\n    console.log(games)\r\n    for(let i = 0; i < games.length; i++){\r\n        unplayed.push(games[i]);\r\n    }\r\n    console.log(typeof(unplayed))\r\n    for(let i = unplayed.length-1; i >= 0; --i){\r\n        if(unplayed[i].playtime_forever > 10){\r\n            unplayed.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    const [click, setClick] = useState(0);\r\n    function handleClick(event){\r\n        setClick(click+1)\r\n    }\r\n    useEffect(() => {\r\n        let rng = Math.floor(Math.random() * (unplayed.length-1 - 0) + 0);\r\n        console.log(rng , unplayed.length)\r\n        setGame(unplayed[rng]);\r\n    }, [click])\r\n\r\n    if(unplayed.length === 0){\r\n        return(\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"profile-info mt-4 row text-center d-flex justify-content-center\">\r\n            <h3 className=\"text-light col-sm-10 m-2\">Revisit one of your unplayed games:</h3>\r\n            {rngGame &&\r\n                <div className=\"text-center row d-flex justify-content-center\">\r\n                     <img className=\"col-md-5 col-10\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + rngGame.appid + '/' + rngGame.img_logo_url + '.jpg'} \r\n                        alt={'Game icon:' + rngGame.name} />\r\n                    <h5>{rngGame.name}</h5>\r\n                </div>\r\n            }\r\n            <button className=\"btn btn-outline-light m-2 col-3 btn-sm \" onClick={handleClick}>New Game</button>\r\n        </div>\r\n    );\r\n}\r\nexport default RandomGame;","import {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\nimport GamesGraph from './GamesGraph.js'\r\nimport Loading from './Loading.js'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport RandomGame from './RandomGame.js';\r\n\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n\r\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n  //Perhaps there is a more elegent way to do this\r\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n  //Max's api steam key. Use it for this project\r\n  const key = \"386540A52F687754D4E1767230822EDE\";\r\n  const headers =\r\n  {\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {'Content-Type': 'application/json'},\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n  };\r\n\r\n  const [loading, setLoad] = useState(null);\r\n  const [loadMsg, setLoadMsg] = useState(\"\");\r\n\r\n  const [playerSummary, setPlayerSummary] = useState(null);\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [allGames, setGames] = useState(null);\r\n\r\n  //user content\r\n  const [steamid, setSteamid] = useState(0);\r\n  const [playedGames, setPlayedGames] = useState([]);\r\n  const [friendsList, setFriendsList] = useState([]);\r\n\r\n  //game content\r\n  const [appid, setAppid] = useState(0);\r\n  const [gameBannerURL, setGameBannerURL] = useState(\"\");\r\n  const [gameTitle, setGameTitle] = useState(\"\");\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [gameAchievements, setGameAchievements] = useState([]);\r\n  const [playerGameStats, setPlayerGameStats] = useState([]);\r\n  \r\n\r\n  //React things\r\n  useEffect( () => {\r\n    grabData();\r\n    setLoad(null);\r\n  }, [searchClick]);\r\n\r\n  async function grabData(event)\r\n  {\r\n    //reset values\r\n    setPlayerSummary(null);\r\n    setLevel(\"\");\r\n    setGames(null);\r\n\r\n    setSteamid(0);\r\n    setPlayedGames(null);\r\n    setFriendsList(null);\r\n    \r\n    setGameTitle(null);\r\n    setGameAchievements(null);\r\n    setPlayerGameStats(null);\r\n    \r\n    //get the form seach boxes\r\n    let searchedApp = document.getElementById(\"game\").value;\r\n    let searchedProfile = document.getElementById(\"username\").value;\r\n    let generatedSteamid;\r\n    let generatedAppid;\r\n    let generatedAppTitle;\r\n\r\n    //game/app name\r\n    //check if the user entered a username to search for\r\n    if (searchedProfile)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is \"scouteriv\" from https://steamcommunity.com/id/scouteriv/\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      let steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + searchedProfile + '&format=json', headers)\r\n      //console.log(steamidResponse.response)\r\n      generatedSteamid = steamidResponse.response.steamid;\r\n      \r\n      //backup to check if the entered profile name is a steamid\r\n      if (!generatedSteamid && /^\\d+$/.test(searchedProfile))\r\n      {\r\n        generatedSteamid = searchedProfile;\r\n      }\r\n      console.log(\"Found user \" + generatedSteamid + \" from \" + searchedProfile);\r\n\r\n      setLoadingMessage(1, \"Finding user \" + generatedSteamid)\r\n    }\r\n    \r\n    if (searchedApp)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      let appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n\r\n      setLoadingMessage(8, \"Searching for \" + searchedApp)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      let appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === searchedApp.toLowerCase());\r\n\r\n      //check if the game is an appid\r\n      if (!appObject && /^\\d+$/.test(searchedApp))\r\n      {\r\n        console.log(\"Checking if the entered game is a valid appid\")\r\n        appObject = appListResponse.applist.apps.find(app => app.appid.toString() === searchedApp);\r\n      }\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        generatedAppid = appObject.appid;\r\n        generatedAppTitle = appObject.name;\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + searchedApp)\r\n      }\r\n      else\r\n      {\r\n        console.log(\"No game found with query \" + searchedApp)\r\n      }\r\n    }\r\n\r\n    let friendsListResponse;\r\n    let playerSummeryResponse;\r\n\r\n    //stats for player summary\r\n    if (generatedSteamid)\r\n    {\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n\r\n      setLoadingMessage(15, \"fetching player summary\")\r\n\r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      let steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n      setLoadingMessage(27, \"\")\r\n      \r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + ',&format=json', headers)\r\n      console.log(friendsListResponse)\r\n      setLoadingMessage(32, \"\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      let ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n      setLoadingMessage(41, \"\")\r\n\r\n      setGames(ownedGamesResponse.response.games)\r\n      setPlayerSummary(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level);\r\n      if (friendsListResponse) setFriendsList(friendsListResponse.friendslist.friends);\r\n    }\r\n\r\n    if (generatedSteamid && generatedAppid) //if both a user and game is searched and valid\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      setLoadingMessage(42, \"Searching player achievements\")\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      let playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse);\r\n      setLoadingMessage(57, \"\")\r\n\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      let globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + generatedAppid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse);\r\n      setLoadingMessage(69, \"\")\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      let numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse);\r\n      setPlayerCount(numCurrentPlayersResponse.response.player_count);\r\n      setLoadingMessage(77, \"\")\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      let gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      setLoadingMessage(100, \"\")\r\n      \r\n      // the inputs to this one must come from the previous API call\r\n      // not a lot of games implement this\r\n      let gameStats;\r\n      let userStatsForGameResponse;\r\n      try {\r\n        gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n\r\n        console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n        userStatsForGameResponse = await fetchJSON(proxy +\r\n          'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n          key + '&appid=' + generatedAppid + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n        // userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n        console.log(userStatsForGameResponse.playerstats.stats);\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Game does not have stats\");\r\n      }\r\n       \r\n      try {\r\n        if (gameSchemaResponse.game.availableGameStats.achievements)\r\n        {\r\n          let mergedAchievementList = mergeAchievementObjects(\r\n            playerAchievementsResponse.playerstats.achievements,\r\n            globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n            gameSchemaResponse.game.availableGameStats.achievements);\r\n          console.log(mergedAchievementList);\r\n          setGameAchievements(mergedAchievementList);\r\n\r\n          let fullStatObject = makeStatObjects(gameSchemaResponse.game.availableGameStats.stats,\r\n            userStatsForGameResponse.playerstats.stats);\r\n          setPlayerGameStats(fullStatObject);\r\n\r\n          /* experimental concurrent API pull */\r\n          // let combinedGameStats = combineStats(gameSchemaResponse.game.availableGameStats.stats,\r\n          //   playerSummeryResponse.response.players[0],\r\n          //   userStatsForGameResponse.playerstats.stats,\r\n          //   friendsListResponse.friendslist.friends,\r\n          //   generatedAppid);\r\n        }\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Something in gameSchemaResponse.game.availableGameStats is undefined\");\r\n      }\r\n    }\r\n    else if (generatedSteamid && !generatedAppid) //if only the username is valid\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      let recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n      setPlayedGames(recentlyPlayedGamesResponse.response.games);\r\n      setLoadingMessage(72, \"Finding user stats\")\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      let communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n      setLoadingMessage(99, \"\")\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      let playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n    }\r\n    else if (!generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY valid appid searched\")\r\n    }\r\n    else\r\n    {\r\n      console.log(\"\\tNO valid item searched\");\r\n    }\r\n\r\n    setSteamid(generatedSteamid);\r\n    setAppid(generatedAppid);\r\n    setGameTitle(generatedAppTitle);\r\n    fetchGameBannerURL(generatedAppid);\r\n    \r\n    setLoad(null);\r\n  }\r\n\r\n  //take the arrays of the achievement schema, global stats\r\n  //and user stats and combine them into one array a unified object\r\n  function mergeAchievementObjects(userAchievements, globalAchievements, achievementSchemas)\r\n  {\r\n    let achievementObjectList = [];\r\n    for (let i = 0; i < achievementSchemas.length; i++)\r\n    {\r\n      let achievementObject = {\r\n        achieved: userAchievements[i].achieved,\r\n        apiname: userAchievements[i].apiname,\r\n        unlocktime: userAchievements[i].unlocktime,\r\n        name: globalAchievements[i].name,\r\n        percent: globalAchievements[i].percent,\r\n        defaultvalue: achievementSchemas[i].defaultvalue,\r\n        displayName: achievementSchemas[i].displayName,\r\n        hidden: achievementSchemas[i].hidden,\r\n        icon: achievementSchemas[i].icon,\r\n        icongray: achievementSchemas[i].icongray,\r\n        name: achievementSchemas[i].name,\r\n        description: achievementSchemas[i].description,\r\n      }\r\n      achievementObjectList.push(achievementObject);\r\n    }\r\n    return achievementObjectList;\r\n  }\r\n\r\n  //experimental concurrent function. Not working yet\r\n  async function combineStats(statSchema, player, playerStats, friends, gameid)\r\n  {\r\n    var t0 = performance.now()\r\n    console.log(statSchema);\r\n    console.log(player);\r\n    console.log(playerStats);\r\n    console.log(friends);\r\n\r\n    let friendsListString = \"\";\r\n    for (const friend of friends)\r\n    {\r\n      friendsListString = friendsListString.concat(friend.steamid + \",\");\r\n    }\r\n\r\n    //get the names of steam friends\r\n    let friendSummariesResponse = await fetchJSON(proxy + \r\n      'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n      key + '&steamids=' + friendsListString + '&format=json', headers)\r\n    let friendSummaries = friendSummariesResponse.response.players\r\n\r\n    //fetch all of their games concurrently\r\n    let friendsGameList = [];\r\n    try {\r\n      var list = await Promise.all(\r\n        friendSummaries.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n              key + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())));\r\n      friendsGameList = list;\r\n    }\r\n    catch (error)\r\n    {\r\n        console.log(error)\r\n        throw (error)\r\n    }\r\n\r\n    //add the steamid to the game list so they have an accompanying person\r\n    let friendsWithGame = []\r\n    friendsWithGame.unshift(player);\r\n    for (let i = 0; i < friendsGameList.length; i++)\r\n    {\r\n      if (!(friendsGameList[i].response['games'])) continue;\r\n      for (let j = 0; j < friendsGameList[i].response.games.length; j++)\r\n      {\r\n        if (friendsGameList[i].response.games[j].appid === gameid)\r\n        {\r\n          friendsWithGame.push(friendSummaries[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    console.log(friendsWithGame)\r\n\r\n    //fetch all stats concurrently\r\n    let friendsStats = []\r\n    try {\r\n      var list = await Promise.all(\r\n        friendsWithGame.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n              key + '&appid=' + gameid + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())))\r\n            .catch((error) => {\r\n              console.error('Error:', error);\r\n            })\r\n        friendsStats = list;\r\n    }\r\n    catch (error)\r\n    {\r\n      console.log(\"Data is set to private for a friend\")\r\n    }\r\n\r\n    console.log(friendsStats)\r\n    var t1 = performance.now();\r\n    console.log(\"Call to combineStats took \" + ((t1 - t0)/1000).toFixed(1) + \" seconds.\");\r\n  }\r\n\r\n  //set the loading message\r\n  function setLoadingMessage(percent, message)\r\n  {\r\n    setLoad(percent)\r\n    if (message) setLoadMsg(message)\r\n  }\r\n\r\n  //combine the stat schema and the stats of the player\r\n  function makeStatObjects(statSchema, playerStats)\r\n  {\r\n    for (let i = 0; i < statSchema.length; i++)\r\n    {\r\n      for (let j = 0; j < playerStats.length; j++)\r\n      {\r\n        if (statSchema[i].name === playerStats[j].name)\r\n        {\r\n          statSchema[i].value = playerStats[j].value;\r\n        }\r\n      }\r\n      if (!('value' in statSchema[i])) statSchema[i].value = 0;\r\n      if (!(statSchema[i].displayName)) statSchema[i].displayName = statSchema[i].name;\r\n    }\r\n    statSchema = statSchema.filter(stat => stat.value != 0);\r\n    return statSchema;\r\n  }\r\n\r\n  //fetch from an API URL and return the resulting JSON\r\n  async function fetchJSON(apiURL, headers)\r\n  {\r\n    let response = await fetch(apiURL, headers);\r\n    if ((response.status >= 400) && (response.status < 500))\r\n    {\r\n      console.error(\"client error. returning undefined to be caught later on\");\r\n      return undefined;\r\n    }\r\n    else if (!response.ok)\r\n    {\r\n      console.error(\"There was an error: \" + response.status);\r\n    }\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  //convert steam status if to a string\r\n  function getStatusString(statusCode)\r\n  {\r\n    let status = \"Unknown\";\r\n    switch(statusCode)\r\n    {\r\n      case 0:\r\n        status = \"Offline\"\r\n        break;\r\n      case 1:\r\n        status = \"Online\"\r\n        break;\r\n      case 2:\r\n        status = \"Busy\"\r\n        break;\r\n      case 3:\r\n        status = \"Away\"\r\n        break;\r\n      case 4:\r\n        status = \"Snooze\"\r\n        break;\r\n      case 5:\r\n        status = \"Looking to Trade\"\r\n        break;\r\n      case 6:\r\n        status = \"Looking to Play\"\r\n        break;\r\n      default:\r\n        status = \"Private\"\r\n        break;\r\n    }\r\n    return status;\r\n  }\r\n\r\n  //convert minutes to hours and minutes\r\n  function minutesToHours(minutes)\r\n  {\r\n    return Math.floor(minutes / 60) + \" hr \" + (minutes % 60) + \" min\";\r\n  }\r\n\r\n  //convert the time that is recieved from steam api into a date and time\r\n  function convertSteamTimeToUTC(seconds)\r\n  {\r\n    if (!seconds)\r\n      return \"Private\";\r\n\r\n    let time = new Date(seconds * 1000);\r\n      \r\n    let options = {\r\n      weekday: 'short',\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    return time.toLocaleDateString('en-US', options);\r\n  }\r\n\r\n  //return a pretty string saying the duration that the parameter is\r\n  function getTimeDifferenceString(timeInSeconds)\r\n  {\r\n    let then = new Date(timeInSeconds*1000)\r\n    let differenceInMinutes = Math.abs(Date.now() - then) / (1000 * 60);\r\n    let minutes = Math.floor(differenceInMinutes % 60);\r\n\r\n    let differenceInHours = (differenceInMinutes / 60);\r\n    let hours = Math.floor(differenceInHours % 24);\r\n\r\n    let differenceInDays = (differenceInMinutes / (60 * 24));\r\n    let days = Math.floor(differenceInDays % 365);\r\n    let differenceInYears = (differenceInMinutes / (60 * 24 * 365));\r\n    let years = Math.floor(differenceInYears);\r\n\r\n    let timeDifference = (years ? (years + \" years, \") : \"\")  + \r\n      (days ? (days + \" days, \") : \"\") + \r\n      (hours ? (hours + \" hours, \") : \"\") + \r\n      (minutes ? (minutes + \" minutes \") : \"\") + \"ago\";\r\n    return timeDifference;\r\n  }\r\n\r\n  //bundled function to return a string with time, and how long ago that time was\r\n  function fullTimeWithDifference(timeInMilliseconds)\r\n  {\r\n    if (!timeInMilliseconds) return \"Private\";\r\n\r\n    return convertSteamTimeToUTC(timeInMilliseconds) +\r\n      \" (\" + getTimeDifferenceString(timeInMilliseconds) + \")\";\r\n  }\r\n\r\n  //print the state and country, or just state, or just country, depending on what is defined\r\n  function getLocationString(state, country)\r\n  {\r\n    return (state ? state : \"\") + (state ? \", \" : \"\") + (country ? country : \"\")\r\n  }\r\n\r\n  //take in an appid and return a url of an image of that appid's game/app\r\n  async function fetchGameBannerURL(id)\r\n  {\r\n    let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/page_bg_generated.jpg\";\r\n    let response = await fetch(proxy + bannerURL)\r\n    .then(response => {\r\n      if (response.ok)\r\n        return response;\r\n      else\r\n        return Promise.reject(response.status);\r\n    })\r\n    .catch(error => {\r\n      console.log(\"Error getting high-quality game image, using default, low-res header img instead: \" + error);\r\n      bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/header.jpg\";\r\n      return bannerURL;\r\n    })\r\n    .finally(function() {\r\n      return bannerURL;\r\n    });\r\n    setGameBannerURL(bannerURL);\r\n  }\r\n\r\n  //take in an array of achievements and return what percent are 'achieved'\r\n  function getAchievementPercent(achievementList)\r\n  {\r\n    if (achievementList)\r\n    {\r\n      //achievements obtained so far\r\n      let userAchievementCount = 0;\r\n      for (let i = 0; i < achievementList.length; i++)\r\n      {\r\n        if (achievementList[i].achieved) userAchievementCount++;\r\n      }\r\n      return (userAchievementCount + \" out of \" + achievementList.length + \" achievements obtained\");\r\n    }\r\n    else\r\n    {\r\n      return (\"This game does not have achievements\");\r\n    }\r\n  }\r\n\r\n  //get the time that an achievement was unlocked, or state if it is still locked\r\n  function getAchievementStatus(achievement)\r\n  {\r\n    return achievement.achieved ?\r\n      (\"Unlocked \" + convertSteamTimeToUTC(achievement.unlocktime)) : \"Locked\";\r\n  }\r\n\r\n  //get the status of an achievement\r\n  function getAchievementDescription(achievement)\r\n  {\r\n      return achievement.description ? achievement.description : \"\";\r\n  }\r\n\r\n  //return HTML/JSX statement\r\n  return (loading) ? (\r\n    <div>\r\n      <Router>\r\n        <Loading loading={loading} loadingMsg={loadMsg} />\r\n      </Router>\r\n    </div>\r\n  ) :\r\n    (\r\n    <div>\r\n      {playerSummary &&\r\n      <div className=\"row d-flex justify-content-center\">\r\n        {/* PLAYER SUMMARY THAT IS ALWAYS PRESENT */}\r\n        <div className=\"container\"> \r\n          <div className=\"player-summary col-xs-12 col-md-12 col-lg-8 justify-content-between\">\r\n              <a className=\"player-summary-avatar\" href={playerSummary.profileurl}>\r\n                <img id=\"profile-image\" src={playerSummary.avatarfull} alt={playerSummary.personaname + \"'s avatar\"}></img>\r\n              </a>\r\n              <div className=\"player-summary-persona fs-2\">\r\n                <span className=\"player-summary-tiny-font\">Full Persona Name</span>{playerSummary.personaname}\r\n              </div>\r\n              <div className=\"player-summary-steamid fs-6\">\r\n                <span className=\"player-summary-tiny-font\">SteamID</span>{playerSummary.steamid}\r\n              </div>\r\n              <div className=\"player-summary-status fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Status</span>{getStatusString(playerSummary.personastate)}\r\n              </div>\r\n              {friendsList &&\r\n              <div className=\"player-summary-friends fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Friends</span>{friendsList.length}\r\n              </div>\r\n              }\r\n              {playerSummary.realname &&\r\n              <div className=\"player-summary-real-name fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Real Name</span>{playerSummary.realname}\r\n              </div>\r\n              }\r\n              {(playerSummary.locstatecode || playerSummary.loccountrycode) &&\r\n              <div className=\"player-summary-location fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Location</span>{getLocationString(playerSummary.locstatecode,playerSummary.loccountrycode)}\r\n                <img className=\"player-summary-flag\" src={\"https://www.countryflags.io/\" + playerSummary.loccountrycode + \"/shiny/64.png\"}></img>\r\n              </div>\r\n              }\r\n              <div className=\"player-summary-last-online fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Last Log off</span>{fullTimeWithDifference(playerSummary.lastlogoff)}\r\n              </div>\r\n              <div className=\"player-summary-created fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Account Created</span>{fullTimeWithDifference(playerSummary.timecreated)}\r\n              </div>\r\n              <div className=\"player-summary-level fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Steam Level</span>{steamLevel}\r\n              </div>\r\n              {allGames &&\r\n              <div className=\"player-summary-games fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Owned Games</span>{allGames.length}\r\n              </div>\r\n              }\r\n          </div>\r\n        </div>\r\n        <div id=\"user-app-content\" className=\"row justify-content-center\">\r\n        {/* USER-ONLY SEARCH CONTENT */}\r\n        {playedGames &&\r\n        <div className=\"container m-4\">\r\n          <div className=\"profile-info mx-auto flex-row flex-wrap d-flex\">\r\n            <h4 className=\"col-12 text-center mt-2\">Recently Played Games</h4>\r\n            {playedGames.map(game => (\r\n            <div key={game.appid} className=\"rounded the-game flex-fill m-2 p-2 col-xs-12 col-sm-6 col-md-3\">\r\n              <img id=\"game-icon\" className=\"mr-3\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + game.appid + '/' + game.img_icon_url + '.jpg'} \r\n                alt={'Game icon:' + game.name} height=\"50px\" width=\"50px\" />\r\n              <span className=\"ml-2\"> {game.name}</span>\r\n              <span className=\"game-facts rounded border border-light m-2 p-2\">Playtime: {minutesToHours(game.playtime_forever)}</span>\r\n            </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        }\r\n        {/* USER-GAME SEARCH CONTENT */}\r\n          {/* Game banner */}\r\n        {gameTitle &&\r\n          <div className=\"row game-banner\">\r\n            <div className=\"col-xs-12 col-md-8 game-banner-title m-0 p-0\" style={{backgroundImage: `url(${gameBannerURL})`}}>\r\n            <h2 className=\"text-light text-left align-middle\" style={{lineHeight: \"75px\"}}>{gameTitle}</h2>\r\n            </div>\r\n            <div className=\"col-xs-12 col-md-4 game-banner-info\">\r\n              <p className=\"text-light game-banner-info-playercount\">{playerCount + \" players online\"}</p>\r\n              <p className=\"text-light game-banner-info-achievement\">{getAchievementPercent(gameAchievements)}</p>\r\n            </div>\r\n          </div>\r\n        }\r\n          {/* Game achievement grid */}\r\n        {gameAchievements &&\r\n          <div className=\"row col-xs-12\">\r\n            <div className=\"achievement-grid flex-row flex-wrap d-flex justify-content-between\">\r\n            {gameAchievements.map(achievement => (\r\n              <div key={achievement.name} className=\"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\">\r\n                <img className=\"achievement-icon mx-auto\" src={achievement.icon} alt={achievement.name} width=\"75px\" height=\"75px\"/>\r\n                <p className=\"achievement-global-percent text-light\">{achievement.percent.toFixed(2)}% of players have this achievement.</p>\r\n                <p className=\"achievement-unlock text-light\">{getAchievementStatus(achievement)}</p>\r\n                <h3 className=\"achievement-title text-light\">{achievement.displayName}</h3>\r\n                <p className=\"achievement-description text-light\">{getAchievementDescription(achievement)}</p>\r\n              </div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n        }\r\n          {/* Game stats table */}\r\n        {playerGameStats &&\r\n        <div className=\"container\">\r\n          <table className=\"table table-dark table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">Stat Name</th>\r\n                <th scope=\"col\">{playerSummary.personaname}'s Stat</th>\r\n              </tr>\r\n            </thead>\r\n            {playerGameStats.map(stat => (\r\n            <tbody key={stat.name} className=\"table-striped\">\r\n              <tr>\r\n                <th scope=\"row\">{stat.displayName}</th>\r\n                <td>{stat.value}</td>\r\n              </tr>\r\n            </tbody>\r\n            ))}\r\n          </table>\r\n        </div>\r\n        }\r\n        </div>      \r\n        {(!appid) && allGames &&\r\n\r\n          <div className=\"row d-flex justify-content-center col-12\">\r\n            <br></br>\r\n            <GamesGraph games={allGames}></GamesGraph>\r\n            <RandomGame games={allGames}></RandomGame>\r\n          </div>\r\n        }\r\n    </div>\r\n      }     \r\n    <div className=\"footer-space\"></div>\r\n      <Redirect to =\"/\" />\r\n      {/* A little extra padding... */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main\r\n","import './App.css'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n    const [loading, setLoad] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"blue-glow\" htmlFor=\"username\">User Profile</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control dark-bg\"\r\n                  id=\"username\"\r\n                  aria-describedby=\"username-help\"\r\n                  placeholder=\"Enter a Steam ID or vanity URL\"\r\n                  name=\"username\"\r\n                  value={usernameSearch}\r\n                  onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"green-glow\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"game\"\r\n                  aria-describedby=\"game-help\"\r\n                  placeholder=\"Enter a Steam game name or ID\"\r\n                  name=\"game\"\r\n                  value={appSearch}\r\n                  onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-xs-12 col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick} loading={loading}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label className=\"blue-glow\" htmlFor=\"username\">User Profile</label>\r\n                  <input type=\"text\"\r\n                    className=\"form-control dark-bg\"\r\n                    id=\"username\"\r\n                    aria-describedby=\"username-help\"\r\n                    placeholder=\"Enter a Steam ID or vanity URL\"\r\n                    name=\"username\"\r\n                    value={usernameSearch}\r\n                    onChange={e => setUsernameSearch(e.target.value)}\r\n                    required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL from a Steam profile, or enter the ID of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\" className=\"green-glow\">Steam Game</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"game\"\r\n                  aria-describedby=\"game-help\"\r\n                  placeholder=\"Enter a Steam game or ID\"\r\n                  name=\"game\"\r\n                  value={appSearch}\r\n                  onChange={e => setAppSearch(e.target.value)}\r\n                  />\r\n                <small id=\"game-help\" className=\"form-text\">Enter an app name or ID that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>SteamCompare</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12 bg-dark\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam and the Steam logo are trademarks of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}