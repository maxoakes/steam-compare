{"version":3,"sources":["graphs/TimePlayed.js","graphs/RatioPlayed.js","GamesGraph.js","Loading.js","RandomGame.js","main.js","App.js","index.js"],"names":["TimePlayed","games","counts","i","length","playtime_forever","data","labels","datasets","label","backgroundColor","borderColor","options","responsive","plugins","title","display","color","position","text","legend","RatioPlayed","totalTime","avgTime","gamesSort","sort","a","b","gameNames","playTime","push","name","GamesGraph","className","Loading","loading","loadingMsg","ProgressBar","now","RandomGame","useState","rngGame","setGame","unplayed","splice","click","setClick","useEffect","rng","Math","floor","random","src","appid","img_logo_url","alt","onClick","event","Main","usernameSearch","state","country","searchClick","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","setLoad","loadMsg","setLoadMsg","broken","setBroken","playerSummary","setPlayerSummary","steamLevel","setLevel","allGames","setGames","setSteamid","playedGames","setPlayedGames","friendsList","setFriendsList","setAppid","gameBannerURL","setGameBannerURL","gameTitle","setGameTitle","playerCount","setPlayerCount","gameAchievements","setGameAchievements","playerGameStats","setPlayerGameStats","searchedApp","document","getElementById","value","searchedProfile","console","log","fetchJSON","steamidResponse","generatedSteamid","response","steamid","test","undefined","error","setLoadingMessage","appListResponse","appObject","applist","apps","find","app","toLowerCase","toString","generatedAppid","generatedAppTitle","playerSummeryResponse","players","steamLevelResponse","friendsListResponse","ownedGamesResponse","player_level","friendslist","friends","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","player_count","gameSchemaResponse","game","availableGameStats","stats","userStatsForGameResponse","playerstats","achievements","mergedAchievementList","mergeAchievementObjects","achievementpercentages","fullStatObject","makeStatObjects","unused","recentlyPlayedGamesResponse","communityBadgeProgressResponse","playerBansResponse","fetchGameBannerURL","userAchievements","globalAchievements","achievementSchemas","achievementObjectList","achievementObject","achieved","apiname","unlocktime","percent","defaultvalue","displayName","hidden","icon","icongray","description","message","statSchema","playerStats","j","filter","stat","apiURL","fetch","status","ok","json","convertSteamTimeToUTC","seconds","Date","toLocaleDateString","weekday","year","month","day","hour","minute","fullTimeWithDifference","timeInMilliseconds","timeInSeconds","then","differenceInMinutes","abs","minutes","differenceInHours","hours","differenceInDays","days","differenceInYears","years","getTimeDifferenceString","id","bannerURL","Promise","reject","catch","finally","getAchievementStatus","achievement","getAchievementDescription","grabData","href","profileurl","avatarfull","personaname","statusCode","getStatusString","personastate","realname","locstatecode","loccountrycode","lastlogoff","timecreated","map","img_icon_url","height","width","style","backgroundImage","lineHeight","achievementList","targetGame","gameList","gameFound","userAchievementCount","getAchievementPercent","toFixed","scope","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","bodyHTML","required","preventDefault","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.29957883.chunk.js","sourcesContent":["import {Doughnut} from 'react-chartjs-2';\nconst TimePlayed = ({games}) =>{\n    let backgroundColors = [\n            'hsl(45, 100%, 50%)',\n            'hsl(37, 100%, 30%)',\n            'hsl(20, 100%, 20%)',\n            'hsl(60, 100%, 70%)',\n            'hsl(20, 100%, 10%)',\n            'hsl(30, 100%, 60%)',\n            'hsl(65, 100%, 40%)',\n    ];\n    let timePlayed = [\n        \"Not Played\",\n        \"0-12 hrs\",\n        \"12-24 hrs\",\n        \"24-36 hrs\",\n        \"36-48 hrs\",\n        \"48-60 hrs\",\n        \"60+ hrs\"\n    ];\n\n    let counts = [\n        0,0,0,0,0,0,0\n    ];\n    \n    for(let i=0; i < games.length; i++) {\n        if(games[i].playtime_forever === 0) {\n            counts[0] += 1;\n        }\n        if(games[i].playtime_forever < 720 && games[i].playtime_forever > 0) {//12 hrs or less\n            counts[1] = counts[1] + 1;\n        }\n        if(games[i].playtime_forever >= 720 && games[i].playtime_forever < 1440) {//12-24\n            counts[2] = counts[2] + 1;\n        }\n        if(games[i].playtime_forever >= 1440 && games[i].playtime_forever < 2160) {//24-36\n            counts[3] = counts[3] + 1;\n        }\n        if(games[i].playtime_forever >= 2160 && games[i].playtime_forever < 2880) {//36-48\n            counts[4] = counts[4] + 1;\n        }\n        if(games[i].playtime_forever >= 2880 && games[i].playtime_forever < 3600) {//48-60\n            counts[5] = counts[5] + 1;\n        }\n        if(games[i].playtime_forever >= 3600) {//60+\n            counts[6] = counts[6] + 1;\n        }\n    }\n\n    const options = {\n        responsive: true,\n        plugins: {\n        title: {\n            display: true,\n            color: 'white',\n            position: 'top',\n            text: 'Game Count'\n        },\n        legend: {\n            display: true\n        }\n    }\n    };\n    const data = {\n        labels: timePlayed,\n        datasets: [{\n          label: 'Playtime',\n          data: counts,\n          backgroundColor: backgroundColors,\n          borderColor: 'Black',\n        }]\n    };\n\n    return(\n        <div>\n            <Doughnut data={data} options={options} />\n        </div>\n    );\n}\nexport default TimePlayed;","import {Doughnut} from 'react-chartjs-2';\n\nconst RatioPlayed = ({games}) => {\n    let colors = [\n        'hsl(214, 100%, 50%)',\n        'hsl(250, 75%, 20%)',\n        'hsl(214, 20%, 20%)',\n        'hsl(230, 20%, 75%)',\n        'hsl(214, 60%, 5%)',\n        'hsl(190, 60%, 75%)',\n        'hsl(214, 30%, 50%)',\n    ]\n\n    let totalTime = 0;\n    for(let i=0; i<games.length; i++){\n        totalTime += games[i].playtime_forever;\n    }\n\n    let avgTime = totalTime/games.length;\n    avgTime = avgTime/1.3; //determines what qualifies to be graphed\n    let gamesSort = games;\n    //https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values\n    gamesSort.sort((a, b) => (b.playtime_forever) - (a.playtime_forever));\n    let gameNames = [];\n    let playTime = [];\n    for(let i=0; i<gamesSort.length; i++){\n        if(gamesSort[i].playtime_forever >= avgTime && gameNames.length < 25){\n            gameNames.push(gamesSort[i].name);\n            playTime.push(gamesSort[i].playtime_forever);\n        }\n    }\n    if(avgTime === 0){\n        return(\n            <div>\n            </div>\n        );\n    }\n\n    const options = {\n        responsive: true,\n        plugins: {\n        title: {\n            display: true,\n            text: 'Most Played Games',\n            color: 'white',\n            position: 'top'\n        },\n        legend: {\n            display: false\n        }\n    }\n    };\n    const data = {\n        labels: gameNames,\n        datasets: [{\n          label: 'Playtime',\n          data: playTime,\n          backgroundColor: colors,\n          borderColor: 'White',\n        }]\n    };\n\n    return(\n        <div>\n            <Doughnut data={data} options={options} />\n        </div>\n    )\n}\nexport default RatioPlayed;","import MostPlayed from './graphs/MostPlayed.js'\nimport TimePlayed from './graphs/TimePlayed.js'\nimport RatioPlayed from './graphs/RatioPlayed'\n\nconst GamesGraph = ({games}) => {\n    return(\n        <div>\n        {games && \n            <div className=\"table-responsive profile-info row d-flex justify-content-center\">\n                <div className=\"col-md-5 col-sm-10 m-2\">\n                    <TimePlayed games={games}/>\n                </div>\n                <div className=\"col-md-5 col-sm-10 m-2\">\n                    <RatioPlayed games={games}/>\n                </div>\n            </div>\n        }\n        </div>\n    );\n\n}\n\nexport default GamesGraph","import ProgressBar from 'react-bootstrap/ProgressBar'\nconst Loading = ({loading, loadingMsg}) => {\n    return(\n        <div className=\"loading-window\">\n            <span className=\"player-summary-tiny-font\">LOADING</span>\n            <h1 className=\"text-light\">{loadingMsg}</h1>\n            <h2 className=\"text-light\">{loading}%</h2>\n            <ProgressBar now={loading} />\n        </div>\n    );\n\n}\nexport default Loading;","import { useEffect, useState } from \"react\";\n\nconst RandomGame = ({games}) => {\n    const [rngGame, setGame] = useState(null);\n    let unplayed = [];\n\n    for(let i = 0; i < games.length; i++){\n        unplayed.push(games[i]);\n    }\n\n    for(let i = unplayed.length-1; i >= 0; --i){\n        if(unplayed[i].playtime_forever > 10){\n            unplayed.splice(i, 1);\n        }\n    }\n\n    const [click, setClick] = useState(0);\n    function handleClick(event){\n        setClick(click + 1)\n    }\n\n    useEffect(() => {\n        let rng = Math.floor(Math.random() * (unplayed.length-1 - 0) + 0);\n\n        setGame(unplayed[rng]);\n    }, [click])\n\n    if(unplayed.length === 0){\n        return(\n            <div></div>\n        )\n    }\n\n    return(\n        <div className=\"profile-info mt-4 row text-center d-flex justify-content-center\">\n            <h3 className=\"text-light col-sm-10 m-2\">Revisit one of your unplayed games:</h3>\n            {rngGame &&\n                <div className=\"text-center row d-flex justify-content-center\">\n                     <img className=\"col-md-5 col-10\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + rngGame.appid + '/' + rngGame.img_logo_url + '.jpg'} \n                        alt={'Game icon: ' + rngGame.name} />\n                    <h5>{rngGame.name}</h5>\n                </div>\n            }\n            <button className=\"btn btn-outline-light m-2 col-3 btn-sm \" onClick={handleClick}>New Game</button>\n        </div>\n    );\n}\nexport default RandomGame;","import {Redirect} from 'react-router-dom';\nimport {useEffect, useState} from \"react\";\nimport GamesGraph from './GamesGraph.js'\nimport Loading from './Loading.js'\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport RandomGame from './RandomGame.js';\n\nconst Main = ({usernameSearch, searchClick}) => {\n\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\n  //Perhaps there is a more elegent way to do this\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\n\n  //Max's api steam key. Use it for this project\n  const key = \"386540A52F687754D4E1767230822EDE\";\n  const headers =\n  {\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {'Content-Type': 'application/json'},\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n  };\n\n  const [loading, setLoad] = useState(null);\n  const [loadMsg, setLoadMsg] = useState(\"\");\n  const [broken, setBroken] = useState(null);\n\n  const [playerSummary, setPlayerSummary] = useState(null);\n  const [steamLevel, setLevel] = useState(\"\");\n  const [allGames, setGames] = useState(null);\n\n  //user content\n  const [steamid, setSteamid] = useState(0);\n  const [playedGames, setPlayedGames] = useState([]);\n  const [friendsList, setFriendsList] = useState([]);\n\n  //game content\n  const [appid, setAppid] = useState(0);\n  const [gameBannerURL, setGameBannerURL] = useState(\"\");\n  const [gameTitle, setGameTitle] = useState(\"\");\n  const [playerCount, setPlayerCount] = useState(0);\n  const [gameAchievements, setGameAchievements] = useState([]);\n  const [playerGameStats, setPlayerGameStats] = useState([]);\n  \n  //React things\n  useEffect( () => {\n    setLoad(1);\n    grabData();\n    setLoad(null);\n  }, [searchClick]);\n\n  async function grabData(event)\n  {\n    //reset values\n    setPlayerSummary(null);\n    setLevel(\"\");\n    setGames(null);\n\n    setSteamid(0);\n    setPlayedGames(null);\n    setFriendsList(null);\n    \n    setGameTitle(null);\n    setGameAchievements(null);\n    setPlayerGameStats(null);\n    setBroken(null);\n    \n    //get the form seach boxes\n    let searchedApp = document.getElementById(\"game\").value;\n    let searchedProfile = document.getElementById(\"username\").value;\n    let generatedSteamid;\n    let generatedAppid;\n    let generatedAppTitle;\n\n    //game/app name\n    //check if the user entered a username to search for\n    if (searchedProfile)\n    {\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\n      //Max's is \"scouteriv\" from https://steamcommunity.com/id/scouteriv/\n      console.log(\"ISteamUser/ResolveVanityURL\")\n      let steamidResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \n        key + '&vanityurl=' + searchedProfile + '&format=json', headers)\n      //console.log(steamidResponse.response)\n      generatedSteamid = steamidResponse.response.steamid;\n      \n      //backup to check if the entered profile name is a steamid\n      if (!generatedSteamid && /^\\d+$/.test(searchedProfile))\n      {\n        generatedSteamid = searchedProfile;\n      }\n      console.log(\"Found user \" + generatedSteamid + \" from \" + searchedProfile);\n      if(generatedSteamid === undefined){\n        console.error(\"Not a valid user\")\n      }\n\n      setLoadingMessage(1, \"Finding user \" + generatedSteamid)\n    }\n    \n    if (searchedApp)\n    {\n      //get the appid from the game name that the user enters\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\n      console.log(\"ISteamApps/GetAppList\")\n      let appListResponse = await fetchJSON(proxy + \n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\n\n      setLoadingMessage(8, \"Searching for \" + searchedApp)\n      //console.log(appListResponse.applist.apps)\n\n      //go through each game and see if the name of the game matches what the user entered\n      let appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === searchedApp.toLowerCase());\n\n      //check if the game is an appid\n      if (!appObject && /^\\d+$/.test(searchedApp))\n      {\n        console.log(\"Checking if the entered game is a valid appid\")\n        appObject = appListResponse.applist.apps.find(app => app.appid.toString() === searchedApp);\n      }\n      \n      //set the appid only if the game is found\n      if (appObject)\n      {\n        generatedAppid = appObject.appid;\n        generatedAppTitle = appObject.name;\n        console.log(\"Found game \" + appObject.appid + \" from \" + searchedApp)\n      }\n      else\n      {\n        console.log(\"No game found with query \" + searchedApp)\n      }\n    }\n\n    let friendsListResponse;\n    let playerSummeryResponse;\n\n    //stats for player summary\n    if (generatedSteamid)\n    {\n      console.log(\"ISteamUser/GetPlayerSummaries\")\n      playerSummeryResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\n      console.log(playerSummeryResponse.response.players[0])\n      if(playerSummeryResponse.response.players[0] === undefined){\n        console.error(\"Invalid User\")\n        setBroken(1);\n      }\n\n      setLoadingMessage(15, \"fetching player summary\")\n\n      console.log(\"IPlayerService/GetSteamLevel\")\n      let steamLevelResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\n      console.log(steamLevelResponse.response)\n      setLoadingMessage(27, \"\")\n      \n      console.log(\"ISteamUser/GetFriendList\")\n      friendsListResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \n        key + '&steamid=' + generatedSteamid + ',&format=json', headers)\n      //console.log(friendsListResponse.friendslist)\n      setLoadingMessage(32, \"\")\n\n      console.log(\"IPlayerService/GetOwnedGames\")\n      let ownedGamesResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \n        key + '&steamid=' + generatedSteamid + '&format=json&include_appinfo=1', headers)\n      console.log(ownedGamesResponse.response)\n      setLoadingMessage(41, \"\")\n\n      setGames(ownedGamesResponse.response.games)\n      setPlayerSummary(playerSummeryResponse.response.players[0]);\n      setLevel(steamLevelResponse.response.player_level);\n      if (friendsListResponse) setFriendsList(friendsListResponse.friendslist.friends);\n    }\n\n    if (generatedSteamid && generatedAppid) //if both a user and game is searched and valid\n    {\n      console.log(\"\\tappid AND steamid searched\")\n\n      setLoadingMessage(42, \"Searching player achievements\")\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\n      let playerAchievementsResponse = await fetchJSON(proxy +\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \n        key + '&steamid=' + generatedSteamid + '&appid=' + generatedAppid + '&format=json', headers)\n      console.log(playerAchievementsResponse);\n      setLoadingMessage(57, \"\")\n\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\n      let globalAchievementPercentagesResponse = await fetchJSON(proxy +\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \n        key + '&gameid=' + generatedAppid + '&format=json', headers)\n      console.log(globalAchievementPercentagesResponse);\n      setLoadingMessage(69, \"\")\n\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\n      let numCurrentPlayersResponse = await fetchJSON(proxy +\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \n        key + '&appid=' + generatedAppid + '&format=json', headers)\n      console.log(numCurrentPlayersResponse);\n      setPlayerCount(numCurrentPlayersResponse.response.player_count);\n      setLoadingMessage(77, \"\")\n      \n      console.log(\"ISteamUserStats/GetSchemaForGame\")\n      let gameSchemaResponse = await fetchJSON(proxy +\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \n        key + '&appid=' + generatedAppid + '&format=json', headers)\n      console.log(gameSchemaResponse.game);\n      setLoadingMessage(100, \"\")\n      \n      // the inputs to this one must come from the previous API call\n      // not a lot of games implement this\n      let gameStats;\n      let userStatsForGameResponse;\n      try {\n        gameStats = gameSchemaResponse.game.availableGameStats.stats;\n\n        console.log(\"ISteamUserStats/GetUserStatsForGame\")\n        userStatsForGameResponse = await fetchJSON(proxy +\n          'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \n          key + '&appid=' + generatedAppid + '&steamid=' + generatedSteamid + '&format=json', headers)\n        // userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\n        console.log(userStatsForGameResponse.playerstats.stats);\n      }\n      catch(unused) {\n        console.log(\"Game does not have stats\");\n      }\n       \n      try {\n        if (gameSchemaResponse.game.availableGameStats.achievements)\n        {\n          let mergedAchievementList = mergeAchievementObjects(\n            playerAchievementsResponse.playerstats.achievements,\n            globalAchievementPercentagesResponse.achievementpercentages.achievements,\n            gameSchemaResponse.game.availableGameStats.achievements);\n          console.log(mergedAchievementList);\n          setGameAchievements(mergedAchievementList);\n\n          let fullStatObject = makeStatObjects(gameSchemaResponse.game.availableGameStats.stats,\n            userStatsForGameResponse.playerstats.stats);\n          setPlayerGameStats(fullStatObject);\n\n          /* experimental concurrent API pull */\n          // let combinedGameStats = combineStats(gameSchemaResponse.game.availableGameStats.stats,\n          //   playerSummeryResponse.response.players[0],\n          //   userStatsForGameResponse.playerstats.stats,\n          //   friendsListResponse.friendslist.friends,\n          //   generatedAppid);\n        }\n      }\n      catch(unused) {\n        console.log(\"Something in gameSchemaResponse.game.availableGameStats is undefined\");\n      }\n    }\n    else if (generatedSteamid && !generatedAppid) //if only the username is valid\n    {\n      console.log(\"\\tONLY steamid searched\")\n\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\n      let recentlyPlayedGamesResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\n      console.log(recentlyPlayedGamesResponse.response)\n      setPlayedGames(recentlyPlayedGamesResponse.response.games);\n      setLoadingMessage(72, \"Finding user stats\")\n\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\n      let communityBadgeProgressResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\n      console.log(communityBadgeProgressResponse.response)\n      setLoadingMessage(99, \"\")\n\n      console.log(\"ISteamUser/GetPlayerBans\")\n      let playerBansResponse = await fetchJSON(proxy + \n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\n      console.log(playerBansResponse.players[0])\n    }\n    else if (!generatedSteamid && generatedAppid)\n    {\n      console.log(\"\\tONLY valid appid searched\")\n    }\n    else\n    {\n      console.log(\"\\tNO valid item searched\");\n      setBroken(1)\n    }\n\n    setSteamid(generatedSteamid);\n    setAppid(generatedAppid);\n    setGameTitle(generatedAppTitle);\n    fetchGameBannerURL(generatedAppid);\n    \n    setLoad(null);\n  }\n\n  //take the arrays of the achievement schema, global stats\n  //and user stats and combine them into one array a unified object\n  function mergeAchievementObjects(userAchievements, globalAchievements, achievementSchemas)\n  {\n    let achievementObjectList = [];\n    for (let i = 0; i < achievementSchemas.length; i++)\n    {\n      let achievementObject = {\n        achieved: userAchievements[i].achieved,\n        apiname: userAchievements[i].apiname,\n        unlocktime: userAchievements[i].unlocktime,\n        name: globalAchievements[i].name,\n        percent: globalAchievements[i].percent,\n        defaultvalue: achievementSchemas[i].defaultvalue,\n        displayName: achievementSchemas[i].displayName,\n        hidden: achievementSchemas[i].hidden,\n        icon: achievementSchemas[i].icon,\n        icongray: achievementSchemas[i].icongray,\n        name: achievementSchemas[i].name,\n        description: achievementSchemas[i].description,\n      }\n      achievementObjectList.push(achievementObject);\n    }\n    return achievementObjectList;\n  }\n\n  //experimental concurrent function. Not working yet\n  async function combineStats(statSchema, player, playerStats, friends, gameid)\n  {\n    var t0 = performance.now()\n    console.log(statSchema);\n    console.log(player);\n    console.log(playerStats);\n    console.log(friends);\n\n    let friendsListString = \"\";\n    for (const friend of friends)\n    {\n      friendsListString = friendsListString.concat(friend.steamid + \",\");\n    }\n\n    //get the names of steam friends\n    let friendSummariesResponse = await fetchJSON(proxy + \n      'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \n      key + '&steamids=' + friendsListString + '&format=json', headers)\n    let friendSummaries = friendSummariesResponse.response.players\n\n    //fetch all of their games concurrently\n    let friendsGameList = [];\n    try {\n      var list = await Promise.all(\n        friendSummaries.map(friend => \n          fetch(proxy +\n              'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \n              key + '&steamid=' + friend.steamid + '&format=json', headers)\n            .then(response =>\n              response = response.json())));\n      friendsGameList = list;\n    }\n    catch (error)\n    {\n        console.log(error)\n        throw (error)\n    }\n\n    //add the steamid to the game list so they have an accompanying person\n    let friendsWithGame = []\n    friendsWithGame.unshift(player);\n    for (let i = 0; i < friendsGameList.length; i++)\n    {\n      if (!(friendsGameList[i].response['games'])) continue;\n      for (let j = 0; j < friendsGameList[i].response.games.length; j++)\n      {\n        if (friendsGameList[i].response.games[j].appid === gameid)\n        {\n          friendsWithGame.push(friendSummaries[i]);\n          break;\n        }\n      }\n    }\n    console.log(friendsWithGame)\n\n    //fetch all stats concurrently\n    let friendsStats = []\n    try {\n      var list = await Promise.all(\n        friendsWithGame.map(friend => \n          fetch(proxy +\n              'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \n              key + '&appid=' + gameid + '&steamid=' + friend.steamid + '&format=json', headers)\n            .then(response =>\n              response = response.json())))\n            .catch((error) => {\n              console.error('Error:', error);\n            })\n        friendsStats = list;\n    }\n    catch (error)\n    {\n      console.log(\"Data is set to private for a friend\")\n    }\n\n    console.log(friendsStats)\n    var t1 = performance.now();\n    console.log(\"Call to combineStats took \" + ((t1 - t0)/1000).toFixed(1) + \" seconds.\");\n  }\n\n  //set the loading message\n  function setLoadingMessage(percent, message)\n  {\n    setLoad(percent)\n    if (message) setLoadMsg(message)\n  }\n\n  //combine the stat schema and the stats of the player\n  function makeStatObjects(statSchema, playerStats)\n  {\n    for (let i = 0; i < statSchema.length; i++)\n    {\n      for (let j = 0; j < playerStats.length; j++)\n      {\n        if (statSchema[i].name === playerStats[j].name)\n        {\n          statSchema[i].value = playerStats[j].value;\n        }\n      }\n      if (!('value' in statSchema[i])) statSchema[i].value = 0;\n      if (!(statSchema[i].displayName)) statSchema[i].displayName = statSchema[i].name;\n    }\n    statSchema = statSchema.filter(stat => stat.value != 0);\n    return statSchema;\n  }\n\n  //fetch from an API URL and return the resulting JSON\n  async function fetchJSON(apiURL, headers)\n  {\n    let response = await fetch(apiURL, headers);\n    if ((response.status >= 400) && (response.status < 500))\n    {\n      console.error(\"client error. returning undefined to be caught later on\");\n      return undefined;\n    }\n    else if (!response.ok)\n    {\n      console.error(\"There was an error: \" + response.status);\n    }\n    let data = await response.json();\n    return data;\n  }\n\n  //convert steam status if to a string\n  function getStatusString(statusCode)\n  {\n    let status = \"Unknown\";\n    switch(statusCode)\n    {\n      case 0:\n        status = \"Offline\"\n        break;\n      case 1:\n        status = \"Online\"\n        break;\n      case 2:\n        status = \"Busy\"\n        break;\n      case 3:\n        status = \"Away\"\n        break;\n      case 4:\n        status = \"Snooze\"\n        break;\n      case 5:\n        status = \"Looking to Trade\"\n        break;\n      case 6:\n        status = \"Looking to Play\"\n        break;\n      default:\n        status = \"Private\"\n        break;\n    }\n    return status;\n  }\n\n  //convert minutes to hours and minutes\n  function minutesToHours(minutes)\n  {\n    return Math.floor(minutes / 60) + \" hr \" + (minutes % 60) + \" min\";\n  }\n\n  //convert the time that is recieved from steam api into a date and time\n  function convertSteamTimeToUTC(seconds)\n  {\n    if (!seconds)\n      return \"Private\";\n\n    let time = new Date(seconds * 1000);\n      \n    let options = {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n    return time.toLocaleDateString('en-US', options);\n  }\n\n  //return a pretty string saying the duration that the parameter is\n  function getTimeDifferenceString(timeInSeconds)\n  {\n    let then = new Date(timeInSeconds*1000)\n    let differenceInMinutes = Math.abs(Date.now() - then) / (1000 * 60);\n    let minutes = Math.floor(differenceInMinutes % 60);\n\n    let differenceInHours = (differenceInMinutes / 60);\n    let hours = Math.floor(differenceInHours % 24);\n\n    let differenceInDays = (differenceInMinutes / (60 * 24));\n    let days = Math.floor(differenceInDays % 365);\n    let differenceInYears = (differenceInMinutes / (60 * 24 * 365));\n    let years = Math.floor(differenceInYears);\n\n    let timeDifference = (years ? (years + \" years, \") : \"\")  + \n      (days ? (days + \" days, \") : \"\") + \n      (hours ? (hours + \" hours, \") : \"\") + \n      (minutes ? (minutes + \" minutes \") : \"\") + \"ago\";\n    return timeDifference;\n  }\n\n  //bundled function to return a string with time, and how long ago that time was\n  function fullTimeWithDifference(timeInMilliseconds)\n  {\n    if (!timeInMilliseconds) return \"Private\";\n\n    return convertSteamTimeToUTC(timeInMilliseconds) +\n      \" (\" + getTimeDifferenceString(timeInMilliseconds) + \")\";\n  }\n\n  //print the state and country, or just state, or just country, depending on what is defined\n  function getLocationString(state, country)\n  {\n    return (state ? state : \"\") + (state ? \", \" : \"\") + (country ? country : \"\")\n  }\n\n  //take in an appid and return a url of an image of that appid's game/app\n  async function fetchGameBannerURL(id)\n  {\n    let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/page_bg_generated.jpg\";\n    let response = await fetch(proxy + bannerURL)\n    .then(response => {\n      if (response.ok)\n        return response;\n      else\n        return Promise.reject(response.status);\n    })\n    .catch(error => {\n      console.log(\"Error getting high-quality game image, using default, low-res header img instead: \" + error);\n      bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/header.jpg\";\n      return bannerURL;\n    })\n    .finally(function() {\n      return bannerURL;\n    });\n    setGameBannerURL(bannerURL);\n  }\n\n  //take in an array of achievements and return what percent are 'achieved'\n  function getAchievementPercent(achievementList, targetGame, gameList)\n  {\n    let gameFound = false;\n    for (let i = 0; i < gameList.length; i++)\n    {\n      if (gameList[i].appid === targetGame) gameFound = true;\n    }\n\n    if (!gameFound)\n    {\n      return \"Player does not have this game.\"\n    }\n\n    if (achievementList)\n    {\n      //achievements obtained so far\n      let userAchievementCount = 0;\n      for (let i = 0; i < achievementList.length; i++)\n      {\n        if (achievementList[i].achieved) userAchievementCount++;\n      }\n      return (userAchievementCount + \" out of \" + achievementList.length + \" achievements obtained\");\n    }\n    else\n    {\n      return (\"This game does not have achievements\");\n    }\n  }\n\n  //get the time that an achievement was unlocked, or state if it is still locked\n  function getAchievementStatus(achievement)\n  {\n    return achievement.achieved ?\n      (\"Unlocked \" + convertSteamTimeToUTC(achievement.unlocktime)) : \"Locked\";\n  }\n\n  //get the status of an achievement\n  function getAchievementDescription(achievement)\n  {\n      return achievement.description ? achievement.description : \"\";\n  }\n\n  //return HTML/JSX statement\n  return (loading) ? (\n    <div>\n      {broken &&\n      <div> \n        <h3 className=\"alert alert-danger\">Not a valid search</h3>\n      </div>\n      }\n      {(!broken) &&\n        <div>\n         <Loading loading={loading} loadingMsg={loadMsg} />\n        </div>\n      }\n    </div>\n  ) :\n    (\n    <div>\n      {broken &&\n      <div> \n        <h3 className=\"alert alert-danger\">Not a valid search</h3>\n      </div>\n      }\n      {playerSummary &&\n      <div className=\"row d-flex justify-content-center\">\n        {/* PLAYER SUMMARY THAT IS ALWAYS PRESENT */}\n        <div className=\"container\"> \n          <div className=\"player-summary col-xs-12 col-md-12 col-lg-8 justify-content-between\">\n              <a className=\"player-summary-avatar\" href={playerSummary.profileurl}>\n                <img id=\"profile-image\" src={playerSummary.avatarfull} alt={playerSummary.personaname + \"'s avatar\"}></img>\n              </a>\n              <div className=\"player-summary-persona fs-2\">\n                <span className=\"player-summary-tiny-font\">Full Persona Name</span>{playerSummary.personaname}\n              </div>\n              <div className=\"player-summary-steamid fs-6\">\n                <span className=\"player-summary-tiny-font\">SteamID</span>{playerSummary.steamid}\n              </div>\n              <div className=\"player-summary-status fs-6\">\n                <span className=\"player-summary-tiny-font\">Status</span>{getStatusString(playerSummary.personastate)}\n              </div>\n              {friendsList &&\n              <div className=\"player-summary-friends fs-6\">\n                <span className=\"player-summary-tiny-font\">Friends</span>{friendsList.length}\n              </div>\n              }\n              {playerSummary.realname &&\n              <div className=\"player-summary-real-name fs-6\">\n                <span className=\"player-summary-tiny-font\">Real Name</span>{playerSummary.realname}\n              </div>\n              }\n              {(playerSummary.locstatecode || playerSummary.loccountrycode) &&\n              <div className=\"player-summary-location fs-6\">\n                <span className=\"player-summary-tiny-font\">Location</span>{getLocationString(playerSummary.locstatecode,playerSummary.loccountrycode)}\n                <img className=\"player-summary-flag\" src={\"https://www.countryflags.io/\" + playerSummary.loccountrycode + \"/shiny/64.png\"}></img>\n              </div>\n              }\n              <div className=\"player-summary-last-online fs-6\">\n                <span className=\"player-summary-tiny-font\">Last Log off</span>{fullTimeWithDifference(playerSummary.lastlogoff)}\n              </div>\n              <div className=\"player-summary-created fs-6\">\n                <span className=\"player-summary-tiny-font\">Account Created</span>{fullTimeWithDifference(playerSummary.timecreated)}\n              </div>\n              <div className=\"player-summary-level fs-6\">\n                <span className=\"player-summary-tiny-font\">Steam Level</span>{steamLevel}\n              </div>\n              {allGames &&\n              <div className=\"player-summary-games fs-6\">\n                <span className=\"player-summary-tiny-font\">Owned Games</span>{allGames.length}\n              </div>\n              }\n          </div>\n        </div>\n        <div id=\"user-app-content\" className=\"row justify-content-center\">\n        {/* USER-ONLY SEARCH CONTENT */}\n        {playedGames &&\n        <div className=\"container m-4\">\n          <div className=\"profile-info mx-auto flex-row flex-wrap d-flex\">\n            <h4 className=\"col-12 text-center mt-2\">Recently Played Games</h4>\n            {playedGames.map(game => (\n            <div key={game.appid} className=\"rounded the-game flex-fill m-2 p-2 col-xs-12 col-sm-6 col-md-3\">\n              <img id=\"game-icon\" className=\"mr-3\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + game.appid + '/' + game.img_icon_url + '.jpg'} \n                alt={'Game icon:' + game.name} height=\"50px\" width=\"50px\" />\n              <span className=\"ml-2\"> {game.name}</span>\n              <span className=\"game-facts rounded border border-light m-2 p-2\">Playtime: {minutesToHours(game.playtime_forever)}</span>\n            </div>\n            ))}\n          </div>\n        </div>\n        }\n        {/* USER-GAME SEARCH CONTENT */}\n          {/* Game banner */}\n        {gameTitle &&\n          <div className=\"row game-banner\">\n            <div className=\"col-xs-12 col-md-8 game-banner-title m-0 p-0\" style={{backgroundImage: `url(${gameBannerURL})`}}>\n            <h2 className=\"text-light text-left align-middle\" style={{lineHeight: \"75px\"}}>{gameTitle}</h2>\n            </div>\n            <div className=\"col-xs-12 col-md-4 game-banner-info\">\n              <p className=\"text-light game-banner-info-playercount\">{playerCount + \" players online\"}</p>\n              <p className=\"text-light game-banner-info-achievement\">{getAchievementPercent(gameAchievements, appid, allGames)}</p>\n            </div>\n          </div>\n        }\n          {/* Game achievement grid */}\n        {gameAchievements &&\n          <div className=\"row col-xs-12\">\n            <div className=\"achievement-grid flex-row flex-wrap d-flex justify-content-between\">\n            {gameAchievements.map(achievement => (\n              <div key={achievement.name} className=\"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\">\n                <img className=\"achievement-icon mx-auto\" src={achievement.icon} alt={achievement.name} width=\"75px\" height=\"75px\"/>\n                <p className=\"achievement-global-percent text-light\">{achievement.percent.toFixed(2)}% of players have this achievement.</p>\n                <p className=\"achievement-unlock text-light\">{getAchievementStatus(achievement)}</p>\n                <h3 className=\"achievement-title text-light\">{achievement.displayName}</h3>\n                <p className=\"achievement-description text-light\">{getAchievementDescription(achievement)}</p>\n              </div>\n            ))}\n            </div>\n          </div>\n        }\n          {/* Game stats table */}\n        {playerGameStats &&\n        <div className=\"container\">\n          <table className=\"table table-dark table-hover\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Stat Name</th>\n                <th scope=\"col\">{playerSummary.personaname}'s Stat</th>\n              </tr>\n            </thead>\n            {playerGameStats.map(stat => (\n            <tbody key={stat.name} className=\"table-striped\">\n              <tr>\n                <th scope=\"row\">{stat.displayName}</th>\n                <td>{stat.value}</td>\n              </tr>\n            </tbody>\n            ))}\n          </table>\n        </div>\n        }\n        </div>      \n        {(!appid) && allGames &&\n\n          <div className=\"row d-flex justify-content-center col-12\">\n            <br></br>\n            <GamesGraph games={allGames}></GamesGraph>\n            <RandomGame games={allGames}></RandomGame>\n          </div>\n        }\n    </div>\n      }     \n    <div className=\"footer-space\"></div>\n      <Redirect to =\"/\" />\n      {/* A little extra padding... */}\n    </div>\n  );\n}\n\nexport default Main\n","import './App.css'\nimport React, { useEffect, useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Main from './main.js'\n\nfunction App()\n{\n  function BodyHTML()\n  {\n    //current states of the search bars\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\n    const [appSearch, setAppSearch] = useState(\"\");\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\n    const [searchClick, setClick] = useState(0);\n  \n    useEffect(() => {\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\n    });\n\n    //HTML of the searchbars when the window is showing user/game stats\n    let searchMenuWithStatsHTML = (\n      <div className=\"row\">\n        <div className=\"body col-12\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group row\">\n              <div className=\"col-sm-5\">\n                <label className=\"search-bar\" htmlFor=\"username\">User Profile</label>\n                <input type=\"text\"\n                  className=\"form-control dark-bg\"\n                  id=\"username\"\n                  aria-describedby=\"username-help\"\n                  placeholder=\"Enter a Steam ID or vanity URL\"\n                  name=\"username\"\n                  value={usernameSearch}\n                  onChange={e => setUsernameSearch(e.target.value)}\n                />\n              </div>\n              <div className=\"col-sm-5\">\n                <label className=\"search-bar\" htmlFor=\"game\">Steam Game</label>\n                <input type=\"text\"\n                  className=\"form-control\"\n                  id=\"game\"\n                  aria-describedby=\"game-help\"\n                  placeholder=\"Enter a Steam game name or ID\"\n                  name=\"game\"\n                  value={appSearch}\n                  onChange={e => setAppSearch(e.target.value)}\n                />\n              </div>\n              <div className=\"col-xs-12 col-sm-2 mt-4\">\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\n              </div>\n            </div>\n          </form>\n          <br></br>\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\n          <Router>\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\n          </Router>      \n        </div>\n      </div>\n    );\n\n    //HTML of the searchbar when it is the initial search menu\n    let centeredSearchHTML = (\n      <div className=\"row\">\n        <div className=\"body col-xs-12 col-md-12\">\n          <div className=\"form-body\">\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <label className=\"search-bar h5\" htmlFor=\"username\">User Profile</label>\n                  <input type=\"text\"\n                    className=\"form-control dark-bg\"\n                    id=\"username\"\n                    aria-describedby=\"username-help\"\n                    placeholder=\"Enter a Steam ID or vanity URL\"\n                    name=\"username\"\n                    value={usernameSearch}\n                    onChange={e => setUsernameSearch(e.target.value)}\n                    required/>\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL from a Steam profile, or enter the ID of a user.</small>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"game\" className=\"search-bar h5\">Steam Game</label>\n                <input type=\"text\"\n                  className=\"form-control\"\n                  id=\"game\"\n                  aria-describedby=\"game-help\"\n                  placeholder=\"Enter a Steam game or ID\"\n                  name=\"game\"\n                  value={appSearch}\n                  onChange={e => setAppSearch(e.target.value)}\n                  />\n                <small id=\"game-help\" className=\"form-text\">Enter an app name or ID that is available on Steam.</small>\n              </div>\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" >Search!</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\n\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\n    function handleSubmit(event)\n    {\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\n      event.preventDefault();\n      if (appSearch || usernameSearch)\n      {\n        if (!isMainMenuSearch)\n        {\n          console.log(\"stats window already open, calling grabData() manually.\");\n          setIsMainMenuSearch(false);\n          return bodyHTML;\n        }\n        setIsMainMenuSearch(false);\n      }\n      else\n      {\n        setIsMainMenuSearch(true);\n      };\n    };\n\n    function handleClick(event){\n      setClick(searchClick+1);\n    }\n    \n    return bodyHTML;\n  };\n\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\n  return (\n    <div className='App'>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"header col-xs-12 col-md-12\">\n            <h1>SteamCompare</h1>\n          </div>\n        </div>\n        <BodyHTML></BodyHTML>\n        <div className=\"row\">\n          <div className=\"footer col-xs-12 col-md-12\">\n            <hr />\n            <p className=\"footer-links\">\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\n            </p>\n            <p className=\"footer-authors font-weight-light\">\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\n            </p>\n            <p className=\"footer-legal text-muted \">Steam is a trademark of\n            Valve Corporation. All other trademarks are property of their respective owners.\n            This deployment was created under fair use.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './main.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}