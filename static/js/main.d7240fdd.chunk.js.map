{"version":3,"sources":["main.js","App.js","index.js"],"names":["Main","event","a","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","appName","document","getElementById","value","vanityURL","steamid","appid","console","log","fetchJSON","steamidResponse","response","appListResponse","appObject","applist","apps","find","app","name","toLowerCase","playerAchievementsResponse","playerstats","globalAchievementPercentagesResponse","achievementpercentages","numCurrentPlayersResponse","gameSchemaResponse","game","availableGameStats","stats","userStatsForGameResponse","ownedGamesResponse","recentlyPlayedGamesResponse","steamLevelResponse","communityBadgeProgressResponse","friendsListResponse","playerBansResponse","players","playerSummeryResponse","groupListResponse","apiURL","fetch","ok","Error","status","json","data","grabData","to","App","useState","search","setSearch","theSearch","user","HasSearched","check","id","onSubmit","className","htmlFor","type","aria-describedby","placeholder","useEffect","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d7240fdd.chunk.js","sourcesContent":["\r\nimport {Redirect} from 'react-router-dom';\r\nexport default function Main() {\r\nasync function grabData (event)\r\n{\r\n    //event.preventDefault();\r\n    // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n    //Perhaps there is a more elegent way to do this\r\n    const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n    //Max's api steam key. Use it for this project\r\n    const key = \"386540A52F687754D4E1767230822EDE\";\r\n    const headers =\r\n    {\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: {'Content-Type': 'application/json'},\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n    };\r\n\r\n    //get the form seach boxes\r\n    var appName = document.getElementById(\"game\").value;\r\n    var vanityURL = document.getElementById(\"username\").value;\r\n    var steamid = 0;\r\n    var appid = 0;\r\n\r\n    //check if the user entered a username to search for\r\n    if (vanityURL)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is https://steamcommunity.com/id/scouteriv/\r\n      //there might be additional ways to get a steamid\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      var steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + vanityURL + '&format=json', headers)\r\n      console.log(steamidResponse.response)\r\n      steamid = steamidResponse.response.steamid;\r\n      console.log(\"Found user \" + steamid + \" from \" + vanityURL)\r\n    }\r\n\r\n    if (appName)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      var appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      var appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === appName.toLowerCase());\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        console.log(appObject)\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + appName)\r\n        appid = appObject.appid;\r\n      }\r\n    }\r\n\r\n    //if both a user and game is searched and valid\r\n    if (steamid && appid)\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      var playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&appid=' + appid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse.playerstats);\r\n\r\n      //global stats\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      var globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + appid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse.achievementpercentages);\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      var numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + appid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse.response);\r\n\r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      var gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + appid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      var gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n\r\n      //the inputs to this one must come from the previous API call\r\n      //not a lot of games implement this. not sure if we want to call it\r\n      // console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      // var globalGameStatsResponse = await fetchJSON(proxy +\r\n      //   'https://api.steampowered.com/ISteamUserStats/GetGlobalStatsForGame/v1/?key=' + \r\n      //   key + '&appid=' + appid + '&count=' + gameStats.length + '&name[0]=' + gameStats[0].name + '&format=json', headers)\r\n      // console.log(globalGameStatsResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n      var userStatsForGameResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n        key + '&appid=' + appid + '&steamid=' + steamid + '&format=json', headers)\r\n      //userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n      console.log(userStatsForGameResponse.playerstats.stats);\r\n\r\n    }\r\n    //if only the username is valid\r\n    else if (steamid && !appid)\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      var ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(ownedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      var recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      var steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      var communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n\r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      var friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + steamid + ',&format=json', headers)\r\n      console.log(friendsListResponse)\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      var playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      var playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n\r\n      console.log(\"ISteamUser/GetUserGroupList\")\r\n      var groupListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetUserGroupList/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(groupListResponse.response)\r\n\r\n      //global stats\r\n\r\n    }\r\n    //if only a game was searched\r\n    else if (!steamid && appid)\r\n    {\r\n      console.log(\"\\tONLY appid searched\")\r\n    }\r\n    //if nothing was searched?\r\n    else\r\n    {\r\n      console.log(\"\\tNO item searched\");\r\n    }\r\n}\r\n\r\nasync function fetchJSON(apiURL, headers)\r\n{\r\n  var response = await fetch(apiURL, headers);\r\n  if (!response.ok)\r\n  {\r\n    throw new Error(\"Oops! Something went wrong when getting API. \\\r\n    Usually the case if a user input is not good. Error code \" + response.status);\r\n  }\r\n  var data = await response.json();\r\n  return data;\r\n}\r\n\r\ngrabData();\r\n\r\nreturn(\r\n  <div>\r\n    <h1 >content</h1>\r\n    <Redirect to =\"/\" />\r\n  </div>\r\n);\r\n\r\n\r\n}","import './App.css'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport{\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\n\r\nfunction App() {\r\n  const[search, setSearch] = useState(\"\");\r\n \r\n  function theSearch(event){\r\n    let user = document.getElementById(\"username\");\r\n    setSearch(user.value);\r\n    console.log({search});\r\n\r\n  }\r\n  \r\n  useEffect(()=>{\r\n    HasSearched();\r\n  }, [search])\r\n\r\n  function HasSearched(){\r\n    console.log({search});\r\n    let check = search;\r\n    console.log(check)\r\n\r\n    return (check !== \"\") ? (\r\n      <div>\r\n      <h2>theres a search {search}</h2>\r\n                <form id=\"entry-form\" onSubmit={theSearch}>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"username\">Steam ID</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"username\" aria-describedby=\"username-help\" placeholder=\"Enter a Steam ID\" name=\"username\" value=\"scouteriv\"/>\r\n                    <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL of a user.</small>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"game\">Steam Game</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"game\" aria-describedby=\"game-help\" placeholder=\"Enter a Steam Game\" name=\"game\" value=\"Stardew Valley\" />\r\n                    <small id=\"game-help\" className=\"form-text\">Enter a game or app that is available on Steam.</small>\r\n                  </div>\r\n    \r\n                      <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n     \r\n     <Router>\r\n       <Main></Main>\r\n     </Router>\r\n                </form> \r\n        </div>\r\n    ) : (\r\n      //this should activate when there isnt a search\r\n      //what im thinking with this is once the user makes a search the search bars go to the top.\r\n      //and when there isnt a search they are at the center.\r\n      //or once the user clicks search it goes to a new page but idk how to do that with react\r\n      <div className=\"row\">\r\n      <div className=\"body col-xs-12 col-md-12\">\r\n        <h1>No Search</h1>\r\n        <div className=\"form-body\">\r\n          <form id=\"entry-form\" onSubmit={theSearch}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Steam ID</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"username\" aria-describedby=\"username-help\" placeholder=\"Enter a Steam ID\" name=\"username\" value=\"scouteriv\"/>\r\n              <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL of a user.</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"game\">Steam Game</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"game\" aria-describedby=\"game-help\" placeholder=\"Enter a Steam Game\" name=\"game\" value=\"Stardew Valley\" />\r\n              <small id=\"game-help\" className=\"form-text\">Enter a game or app that is available on Steam.</small>\r\n            </div>\r\n        \r\n          \r\n                <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n        \r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>Title</h1>\r\n          </div>\r\n        </div>\r\n        <HasSearched />\r\n\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12\">\r\n            <hr />\r\n            <p className=\"footer-links\">Link | Link | Link | Link | Link</p>\r\n            <p className=\"footer-authors font-weight-light\">Created by</p>\r\n            <p className=\"footer-legal text-muted \">Steam and the Steam logo are trademarks of Valve Corporation. All other trademarks are property of their respective owners.\r\n              <a href=\"\\\">Fair use disclaimer</a> \r\n            </p>\r\n          </div>\r\n        </div>\r\n     </div>\r\n    </div>\r\n    );\r\n  }\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}