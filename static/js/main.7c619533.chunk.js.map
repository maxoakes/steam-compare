{"version":3,"sources":["main.js","App.js","index.js"],"names":["Main","usernameSearch","searchClick","console","log","useState","playerinfo","setPlayer","onlineTest","setOnline","steamLevel","setLevel","timeLogOff","setTime","event","a","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","appName","document","getElementById","value","vanityURL","steamid","appid","fetchJSON","steamidResponse","response","appListResponse","appObject","applist","apps","find","app","name","toLowerCase","contentHead","firstChild","removeChild","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","gameSchemaResponse","game","appTitle","gameName","userStatsForGameResponse","playerstats","stats","playerSummeryResponse","steamLevelResponse","players","player_level","toString","createAppTitleHTML","player_count","createAchievementTableHTML","achievements","achievementpercentages","availableGameStats","ownedGamesResponse","recentlyPlayedGamesResponse","communityBadgeProgressResponse","friendsListResponse","playerBansResponse","personastate","groupListResponse","title","playerCount","titleRow","createElement","className","titleDiv","titleText","playerCountText","innerText","appendChild","userAchievements","globalAchievements","achievementSchemas","achievementRow","achievementGrid","i","length","square","icon","src","alt","displayName","description","apiURL","fetch","status","error","ok","json","data","useEffect","grabData","time","Date","lastlogoff","year","getFullYear","month","getMonth","date","getDate","hours","getHours","min","getMinutes","substr","id","avatarfull","height","width","personaname","loccountrycode","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","setClick","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","onClick","bodyHTML","required","preventDefault","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c619533.chunk.js","sourcesContent":["\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n  console.log(\"SEARCH:\", usernameSearch)\r\n  //THIS COULD HELP US ^^^^\r\n  const [playerinfo, setPlayer] = useState(\"\");\r\n  const [onlineTest, setOnline] = useState(\"\");\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [timeLogOff, setTime] = useState(\"\");\r\nasync function grabData (event)\r\n{\r\n    //event.preventDefault();\r\n    // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n    //Perhaps there is a more elegent way to do this\r\n    const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n    //Max's api steam key. Use it for this project\r\n    const key = \"386540A52F687754D4E1767230822EDE\";\r\n    const headers =\r\n    {\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: {'Content-Type': 'application/json'},\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n    };\r\n\r\n    //get the form seach boxes\r\n    var appName = document.getElementById(\"game\").value;\r\n    var vanityURL = document.getElementById(\"username\").value;\r\n    var steamid = 0;\r\n    var appid = 0;\r\n\r\n    //check if the user entered a username to search for\r\n    if (vanityURL)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is https://steamcommunity.com/id/scouteriv/\r\n      //there might be additional ways to get a steamid\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      var steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + vanityURL + '&format=json', headers)\r\n      console.log(steamidResponse.response)\r\n      steamid = steamidResponse.response.steamid;\r\n      console.log(\"Found user \" + steamid + \" from \" + vanityURL)\r\n    }\r\n\r\n    if (appName)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      var appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      var appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === appName.toLowerCase());\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        console.log(appObject)\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + appName)\r\n        appid = appObject.appid;\r\n      }\r\n    }\r\n\r\n    let contentHead = document.getElementById(\"user-app-content\")\r\n    if (contentHead)\r\n    {\r\n      while (contentHead.firstChild)\r\n      {\r\n        contentHead.removeChild(contentHead.firstChild);\r\n      }\r\n    }\r\n\r\n    //if both a user and game is searched and valid\r\n    if (steamid && appid)\r\n    {\r\n      let appTitle;\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      var playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&appid=' + appid + '&format=json', headers)\r\n      //console.log(playerAchievementsResponse.playerstats);\r\n\r\n      //global stats\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      var globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + appid + '&format=json', headers)\r\n      //console.log(globalAchievementPercentagesResponse.achievementpercentages);\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      var numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + appid + '&format=json', headers)\r\n      //console.log(numCurrentPlayersResponse.response);\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      var gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + appid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      appTitle = gameSchemaResponse.game.gameName;\r\n      \r\n      //var gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n      //the inputs to this one must come from the previous API call\r\n      //not a lot of games implement this. not sure if we want to call it\r\n      // console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      // var globalGameStatsResponse = await fetchJSON(proxy +\r\n      //   'https://api.steampowered.com/ISteamUserStats/GetGlobalStatsForGame/v1/?key=' + \r\n      //   key + '&appid=' + appid + '&count=' + gameStats.length + '&name[0]=' + gameStats[0].name + '&format=json', headers)\r\n      // console.log(globalGameStatsResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n      var userStatsForGameResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n        key + '&appid=' + appid + '&steamid=' + steamid + '&format=json', headers)\r\n      //userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n      console.log(userStatsForGameResponse.playerstats.stats);\r\n\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      var playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      //console.log(playerSummeryResponse.response.players[0])\r\n      \r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      var steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      //console.log(steamLevelResponse.response)\r\n      \r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level.toString());\r\n\r\n      createAppTitleHTML(appTitle, numCurrentPlayersResponse.response.player_count);\r\n      createAchievementTableHTML(playerAchievementsResponse.playerstats.achievements,\r\n        globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n        gameSchemaResponse.game.availableGameStats.achievements);\r\n    }\r\n    //if only the username is valid\r\n    else if (steamid && !appid)\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      var ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      var recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      var steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n      setLevel(steamLevelResponse.response.player_level.toString());\r\n      console.log(steamLevel);\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      var communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n\r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      var friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + steamid + ',&format=json', headers)\r\n      console.log(friendsListResponse)\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      var playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      var playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n      //console.log(playerinfo.loccountrycode);\r\n      //console.log(profPic);\r\n     \r\n      console.log(playerinfo.personastate)\r\n \r\n\r\n      console.log(\"ISteamUser/GetUserGroupList\")\r\n      var groupListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetUserGroupList/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(groupListResponse.response)\r\n\r\n      //global stats\r\n\r\n    }\r\n    //if only a game was searched\r\n    else if (!steamid && appid)\r\n    {\r\n      console.log(\"\\tONLY appid searched\")\r\n    }\r\n    //if nothing was searched?\r\n    else\r\n    {\r\n      console.log(\"\\tNO item searched\");\r\n    }\r\n}\r\n\r\nfunction createAppTitleHTML(title, playerCount)\r\n{\r\n  let titleRow = document.createElement(\"div\");\r\n  titleRow.className = \"row\";\r\n\r\n  let titleDiv = document.createElement(\"div\");\r\n  var titleText = document.createElement(\"h2\");\r\n  var playerCountText = document.createElement(\"p\");\r\n\r\n  titleDiv.className = \"p-2 app-title border border-warning\";\r\n  titleText.innerText = title;\r\n  titleText.className = \"text-light text-center\";\r\n  playerCountText.innerText = playerCount + \" current active players\";\r\n  playerCountText.className = \"text-light text-center\";\r\n\r\n  titleDiv.appendChild(titleText);\r\n  titleDiv.appendChild(playerCountText);\r\n  titleRow.appendChild(titleDiv);\r\n  document.getElementById(\"user-app-content\").appendChild(titleRow);\r\n}\r\n\r\nfunction createAchievementTableHTML(userAchievements, globalAchievements, achievementSchemas)\r\n{\r\n  let achievementRow = document.createElement(\"div\");\r\n  achievementRow.className = \"row\";\r\n  let achievementGrid = document.createElement(\"div\");\r\n  achievementGrid.className = \"d-flex flex-wrap\";\r\n\r\n  console.log(userAchievements);\r\n  console.log(globalAchievements);\r\n  console.log(achievementSchemas);\r\n\r\n  for (let i = 0; i < achievementSchemas.length; i++)\r\n  {\r\n    let square = document.createElement(\"div\");\r\n    square.className = \"border border-warning\";\r\n    \r\n    let icon = document.createElement(\"img\");\r\n    icon.className = \"mx-auto\";\r\n    icon.src = achievementSchemas[i].icon;\r\n    icon.alt = achievementSchemas[i].name;\r\n\r\n    let name = document.createElement(\"h3\");\r\n    name.className = \"text-light text-center\";\r\n    name.innerText = achievementSchemas[i].displayName;\r\n    \r\n    let description = document.createElement(\"p\");\r\n    description.className = \"text-light text-center\";\r\n    description.innerText = achievementSchemas[i].description ? achievementSchemas[i].description : \"No description provided\";\r\n    \r\n    square.appendChild(icon);\r\n    square.appendChild(name);\r\n    square.appendChild(description);\r\n    achievementGrid.appendChild(square);\r\n  }\r\n\r\n  achievementRow.appendChild(achievementGrid);\r\n  document.getElementById(\"user-app-content\").appendChild(achievementRow);\r\n}\r\n\r\nasync function fetchJSON(apiURL, headers)\r\n{\r\n  var response = await fetch(apiURL, headers);\r\n  if (response.status === 403)\r\n  {\r\n    console.error(\"User profile is likely set to private.\");\r\n  }\r\n  else if (!response.ok)\r\n  {\r\n    console.error(\"Oops! Something went wrong when getting API. Usually the case if a user input is not good. Error code \" + response.status);\r\n  }\r\n  var data = await response.json();\r\n  return data;\r\n}\r\n\r\nuseEffect( () =>{\r\ngrabData();\r\n}\r\n, [searchClick]);\r\n\r\nuseEffect( () => {\r\n  switch(playerinfo.personastate){\r\n    case 0:\r\n      setOnline(\"Offline\")\r\n      break;\r\n    case 1:\r\n      setOnline(\"Online\")\r\n      break;\r\n    case 2:\r\n      setOnline(\"Busy\")\r\n      break;\r\n    case 3:\r\n      setOnline(\"Away\")\r\n      break;\r\n    case 4:\r\n      setOnline(\"Snooze\")\r\n      break;\r\n    case 5:\r\n      setOnline(\"Looking to Trade\")\r\n      break;\r\n    case 6:\r\n      setOnline(\"Looking to Play\")\r\n      break;\r\n    default:\r\n      setOnline(\"Private\")\r\n      break;\r\n  }\r\n  console.log(onlineTest)\r\n\r\n  //https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\r\n  let time = new Date(playerinfo.lastlogoff * 1000);\r\n  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n  var year = time.getFullYear();\r\n  var month = months[time.getMonth()];\r\n  let date = time.getDate();\r\n  let hours = time.getHours();\r\n  let min = \"0\" + time.getMinutes();\r\n  setTime(month + \"/\" + date + \"/\" + year+ \"~\" + hours + ':' + min.substr(-2))\r\n  console.log(playerinfo.lastlogoff)\r\n}, [playerinfo])\r\n\r\nreturn(\r\n  <div>\r\n    {playerinfo &&\r\n    <div className=\"row\">\r\n \r\n      <div className=\"col-xs-12 col-md-12\">\r\n        \r\n        <div className=\"row \"> \r\n          <div className=\"user-info col-xs-8 col-md-8 d-flex justify-content-center\">\r\n            <div className=\"profile-info yellow-neon-border\">\r\n              <div className=\"d-flex justify-content-center\">\r\n                <img id=\"profile-image\" src={playerinfo.avatarfull} height=\"100px\" width=\"100px\" alt=\"Avatar\"></img>\r\n              </div>\r\n              <p className=\"profile-text\">\r\n                <span id=\"profile-display-name\">{playerinfo.personaname} | </span>\r\n                  <span id=\"profile-country\">{playerinfo.loccountrycode} | </span>\r\n                  <span id=\"profile-status\">{onlineTest}</span> \r\n                  <br />\r\n                  <span id=\"profile-level\">Level {steamLevel}</span> | \r\n                  <span id=\"profile-steamid\">Steam ID {playerinfo.steamid}</span> | \r\n                  <span id=\"profile-steamid\">Last Time Online {timeLogOff}</span> \r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n        <div id=\"user-app-content\" className=\"user-info col-xs-8 col-md-8 d-flex justify-content-center\">\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    }\r\n    <Redirect to =\"/\" />\r\n  </div>\r\n);\r\n\r\n\r\n}\r\nexport default Main","import './App.css'\r\nimport React, {useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                <input type=\"text\"\r\n                className=\"form-control dark-bg\"\r\n                id=\"username\"\r\n                aria-describedby=\"username-help\"\r\n                placeholder=\"Enter a Steam ID\"\r\n                name=\"username\"\r\n                value={usernameSearch}\r\n                onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"green-glow\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"game\"\r\n                aria-describedby=\"game-help\"\r\n                placeholder=\"Enter a Steam Game\"\r\n                name=\"game\"\r\n                value={appSearch}\r\n                onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Steam ID</label>\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                      <input type=\"text\"\r\n                      className=\"form-control dark-bg\"\r\n                      id=\"username\"\r\n                      aria-describedby=\"username-help\"\r\n                      placeholder=\"Enter a Steam ID\"\r\n                      name=\"username\"\r\n                      value={usernameSearch}\r\n                      onChange={e => setUsernameSearch(e.target.value)}\r\n                      required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"game\"\r\n                      aria-describedby=\"game-help\"\r\n                      placeholder=\"Enter a Steam Game\"\r\n                      name=\"game\"\r\n                      value={appSearch}\r\n                      onChange={e => setAppSearch(e.target.value)}\r\n                      />\r\n                <small id=\"game-help\" className=\"form-text\">Enter a game or app that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        console.log(\"there is a search present\");\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        console.log(\"there is not a search present\")\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>Title</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12 bg-dark\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam and the Steam logo are trademarks of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}