{"version":3,"sources":["main.js","App.js","index.js"],"names":["Main","usernameSearch","searchClick","console","log","useState","playerinfo","setPlayer","onlineTest","setOnline","steamLevel","setLevel","timeLogOff","setTime","proxy","event","a","key","headers","mode","cache","credentials","redirect","referrerPolicy","appName","document","getElementById","value","vanityURL","steamid","appid","fetchJSON","steamidResponse","response","appListResponse","appObject","applist","apps","find","app","name","toLowerCase","appFullName","contentHead","firstChild","removeChild","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","gameSchemaResponse","game","playerSummeryResponse","steamLevelResponse","players","player_level","toString","createAppTitleHTML","player_count","playerstats","achievements","availableGameStats","createAchievementTableHTML","achievementpercentages","error","ownedGamesResponse","recentlyPlayedGamesResponse","communityBadgeProgressResponse","friendsListResponse","playerBansResponse","personastate","groupListResponse","title","playerCount","titleRow","createElement","className","titleBox","bannerURL","fetch","then","ok","status","Promise","reject","catch","finally","style","backgroundImage","appendChild","titleText","innerText","lineHeight","gameStatBox","playerCountText","achievementCountText","userAchievementCount","i","length","achieved","userAchievements","globalAchievements","achievementSchemas","achievementRow","achievementGrid","square","icon","width","height","src","alt","globalRate","percent","toFixed","unlockTime","Date","unlocktime","unlocked","toDateString","getUTCHours","padStart","getUTCMinutes","convertSteamTimeToUTC","displayName","description","seconds","apiURL","json","data","useEffect","grabData","lastlogoff","id","avatarfull","personaname","loccountrycode","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","setClick","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","onClick","bodyHTML","required","preventDefault","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.52eb0c4c.chunk.js","sourcesContent":["\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n  console.log(\"SEARCH:\", usernameSearch)\r\n  //THIS COULD HELP US ^^^^\r\n  const [playerinfo, setPlayer] = useState(\"\");\r\n  const [onlineTest, setOnline] = useState(\"\");\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [timeLogOff, setTime] = useState(\"\");\r\n\r\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n  //Perhaps there is a more elegent way to do this\r\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\nasync function grabData (event)\r\n{\r\n    //Max's api steam key. Use it for this project\r\n    const key = \"386540A52F687754D4E1767230822EDE\";\r\n    const headers =\r\n    {\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: {'Content-Type': 'application/json'},\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n    };\r\n\r\n    //get the form seach boxes\r\n    var appName = document.getElementById(\"game\").value;\r\n    var vanityURL = document.getElementById(\"username\").value;\r\n    var steamid = 0;\r\n    var appid = 0;\r\n\r\n    //check if the user entered a username to search for\r\n    if (vanityURL)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is https://steamcommunity.com/id/scouteriv/\r\n      //there might be additional ways to get a steamid\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      var steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + vanityURL + '&format=json', headers)\r\n      console.log(steamidResponse.response)\r\n      steamid = steamidResponse.response.steamid;\r\n      console.log(\"Found user \" + steamid + \" from \" + vanityURL)\r\n    }\r\n\r\n    let appFullName;\r\n    if (appName)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      var appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      var appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === appName.toLowerCase());\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        console.log(appObject)\r\n        appFullName = appObject.name;\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + appName)\r\n        appid = appObject.appid;\r\n      }\r\n      else\r\n      {\r\n        console.log(\"No game found with: \" + appName)\r\n      }\r\n    }\r\n\r\n    let contentHead = document.getElementById(\"user-app-content\")\r\n    if (contentHead)\r\n    {\r\n      while (contentHead.firstChild)\r\n      {\r\n        contentHead.removeChild(contentHead.firstChild);\r\n      }\r\n    }\r\n\r\n    //if both a user and game is searched and valid\r\n    if (steamid && appid)\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      var playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&appid=' + appid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse);\r\n\r\n      //global stats\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      var globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + appid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      var numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + appid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse);\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      var gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + appid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      \r\n      //var gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n      //the inputs to this one must come from the previous API call\r\n      //not a lot of games implement this. not sure if we want to call it\r\n      // console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      // var globalGameStatsResponse = await fetchJSON(proxy +\r\n      //   'https://api.steampowered.com/ISteamUserStats/GetGlobalStatsForGame/v1/?key=' + \r\n      //   key + '&appid=' + appid + '&count=' + gameStats.length + '&name[0]=' + gameStats[0].name + '&format=json', headers)\r\n      // console.log(globalGameStatsResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n      var userStatsForGameResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n        key + '&appid=' + appid + '&steamid=' + steamid + '&format=json', headers)\r\n      //userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n      //console.log(userStatsForGameResponse.playerstats.stats);\r\n\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      var playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      //console.log(playerSummeryResponse.response.players[0])\r\n      \r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      var steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      //console.log(steamLevelResponse.response)\r\n      \r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level.toString());\r\n\r\n      createAppTitleHTML(appFullName, numCurrentPlayersResponse.response.player_count,\r\n        playerAchievementsResponse.playerstats.achievements, appid);\r\n\r\n      try\r\n      {\r\n        if (gameSchemaResponse.game.availableGameStats.achievements)\r\n        {\r\n          createAchievementTableHTML(playerAchievementsResponse.playerstats.achievements,\r\n          globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n          gameSchemaResponse.game.availableGameStats.achievements);\r\n        }\r\n      }\r\n      catch(error)\r\n      {\r\n        console.error(\"Something in gameSchemaResponse.game.availableGameStats is undefined\")\r\n      }\r\n    }\r\n    //if only the username is valid\r\n    else if (steamid && !appid)\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      var ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      var recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      var steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n      setLevel(steamLevelResponse.response.player_level.toString());\r\n      console.log(steamLevel);\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      var communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n\r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      var friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + steamid + ',&format=json', headers)\r\n      console.log(friendsListResponse)\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      var playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      var playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + steamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n      //console.log(playerinfo.loccountrycode);\r\n      //console.log(profPic);\r\n     \r\n      console.log(playerinfo.personastate)\r\n \r\n\r\n      console.log(\"ISteamUser/GetUserGroupList\")\r\n      var groupListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetUserGroupList/v1/?key=' + \r\n        key + '&steamid=' + steamid + '&format=json', headers)\r\n      console.log(groupListResponse.response)\r\n\r\n      //global stats\r\n\r\n    }\r\n    //if only a game was searched\r\n    else if (!steamid && appid)\r\n    {\r\n      console.log(\"\\tONLY appid searched\")\r\n    }\r\n    //if nothing was searched?\r\n    else\r\n    {\r\n      console.log(\"\\tNO item searched\");\r\n    }\r\n}\r\n\r\nfunction createAppTitleHTML(title, playerCount, achievements, appid)\r\n{\r\n  let height = \"75px\";\r\n  //entire banner\r\n  let titleRow = document.createElement(\"div\");\r\n  titleRow.className = \"row game-banner\";\r\n\r\n  //div containing the title text and background(?)\r\n  let titleBox = document.createElement(\"div\");\r\n  titleBox.className = \"col-xs-12 col-md-8 game-banner-title m-0 p-0\";\r\n\r\n  //attempt to fetch and use a high-quality background image for the game title\r\n  let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + appid + \"/page_bg_generated.jpg\"\r\n  fetch(proxy + bannerURL)\r\n  .then(response => {\r\n    if (response.ok)\r\n    {\r\n      console.log(\"Found good image for title background\");\r\n      return response;\r\n    }\r\n    else if(response.status === 404)\r\n    {\r\n      return Promise.reject('error 404')\r\n    }\r\n    else\r\n    {\r\n      return Promise.reject('some other error: ' + response.status)\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.log(\"Error getting high-quality game image, using default, low-res header img instead\");\r\n    bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + appid + \"/header.jpg\";\r\n  })\r\n  .finally(function() {\r\n    titleBox.style.backgroundImage = \"url(\" + bannerURL + \")\";\r\n  });\r\n  titleRow.appendChild(titleBox);\r\n\r\n  //game title text\r\n  let titleText = document.createElement(\"h2\");\r\n  titleText.innerText = title;\r\n  titleText.className = \"text-light text-left align-middle\";\r\n  titleText.style.lineHeight = height;\r\n  titleBox.appendChild(titleText);\r\n  \r\n  //right side div containing game stats\r\n  let gameStatBox = document.createElement(\"div\");\r\n  gameStatBox.className = \"col-xs-12 col-md-4 game-banner-info\";\r\n  titleRow.appendChild(gameStatBox);\r\n\r\n  //current player count\r\n  let playerCountText = document.createElement(\"p\");\r\n  playerCountText.innerText = playerCount + \" players online\";\r\n  playerCountText.className = \"text-light game-banner-info-playercount\";\r\n  gameStatBox.appendChild(playerCountText);\r\n\r\n\r\n  let achievementCountText = document.createElement(\"p\");\r\n\r\n  if (achievements)\r\n  {\r\n    //achivements obtained so far\r\n    let userAchievementCount = 0;\r\n    for (let i = 0; i < achievements.length; i++)\r\n    {\r\n      if (achievements[i].achieved) userAchievementCount++;\r\n    }\r\n    achievementCountText.innerText = userAchievementCount + \" out of \" + achievements.length + \" achievements obtained\";\r\n  }\r\n  else\r\n  {\r\n    achievementCountText.innerText = title + \" does not have achievements\";\r\n  }\r\n  \r\n  achievementCountText.className = \"text-light text-center game-banner-info-achievement\";\r\n  gameStatBox.appendChild(achievementCountText);\r\n\r\n  //put all this stuff into the HTML tree\r\n  document.getElementById(\"user-app-content\").appendChild(titleRow);\r\n}\r\n\r\nfunction createAchievementTableHTML(userAchievements, globalAchievements, achievementSchemas)\r\n{\r\n  let achievementRow = document.createElement(\"div\");\r\n  achievementRow.className = \"row col-xs-12\";\r\n  let achievementGrid = document.createElement(\"div\");\r\n  achievementGrid.className = \"achievement-grid d-flex flex-row flex-wrap d-flex justify-content-between\";\r\n\r\n  console.log(userAchievements);\r\n  console.log(globalAchievements);\r\n  console.log(achievementSchemas);\r\n\r\n  for (let i = 0; i < achievementSchemas.length; i++)\r\n  {\r\n    let iconSize = 75;\r\n    let square = document.createElement(\"div\");\r\n    square.className = \"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\";\r\n\r\n    \r\n    let icon = document.createElement(\"img\");\r\n    icon.className = \"achievement-icon mx-auto\";\r\n    icon.width = iconSize;\r\n    icon.height = iconSize;\r\n    icon.src = achievementSchemas[i].icon;\r\n    icon.alt = achievementSchemas[i].name;\r\n    square.appendChild(icon);\r\n\r\n    let globalRate = document.createElement(\"p\");\r\n    globalRate.className = \"achievement-global-percent text-light\";\r\n    globalRate.innerText = globalAchievements[i].percent.toFixed(2) + \"% of players have this achievement.\";\r\n    square.appendChild(globalRate);\r\n\r\n    //get a time string\r\n    let unlockTime = new Date(userAchievements[i].unlocktime*1000);\r\n    let timeString = unlockTime.toDateString() + \" at \" + \r\n      unlockTime.getUTCHours().toString().padStart(2, '0') + \":\" + \r\n      unlockTime.getUTCMinutes().toString().padStart(2, '0') + \" UTC\";\r\n\r\n    let unlocked = document.createElement(\"p\");\r\n    unlocked.className = \"achievement-unlock text-light\";\r\n    unlocked.innerText = userAchievements[i].achieved ?\r\n      (\"Unlocked \" + convertSteamTimeToUTC(userAchievements[i].unlocktime)) : \"Locked\";\r\n    square.appendChild(unlocked);\r\n\r\n    let name = document.createElement(\"h3\");\r\n    name.className = \"achievement-title text-light\";\r\n    name.innerText = achievementSchemas[i].displayName;\r\n    square.appendChild(name);\r\n    \r\n    let description = document.createElement(\"p\");\r\n    description.className = \"achievement-description text-light\";\r\n    description.innerText = achievementSchemas[i].description ? achievementSchemas[i].description : \"\";\r\n    square.appendChild(description);\r\n    \r\n    achievementGrid.appendChild(square);\r\n  }\r\n\r\n  achievementRow.appendChild(achievementGrid);\r\n  document.getElementById(\"user-app-content\").appendChild(achievementRow);\r\n}\r\n\r\nfunction convertSteamTimeToUTC(seconds)\r\n{\r\n  //https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\r\n  let unlockTime = new Date(seconds*1000);\r\n  let timeString = unlockTime.toDateString() + \" at \" + \r\n    unlockTime.getUTCHours().toString().padStart(2, '0') + \":\" + \r\n    unlockTime.getUTCMinutes().toString().padStart(2, '0') + \" UTC\";\r\n    \r\n  return timeString;\r\n}\r\n\r\nasync function fetchJSON(apiURL, headers)\r\n{\r\n  var response = await fetch(apiURL, headers);\r\n  if (!response.ok)\r\n  {\r\n    console.error(\"There was an error: \" + response.status);\r\n  }\r\n  var data = await response.json();\r\n  return data;\r\n}\r\n\r\nuseEffect( () =>{\r\ngrabData();\r\n}\r\n, [searchClick]);\r\n\r\nuseEffect( () => {\r\n  switch(playerinfo.personastate){\r\n    case 0:\r\n      setOnline(\"Offline\")\r\n      break;\r\n    case 1:\r\n      setOnline(\"Online\")\r\n      break;\r\n    case 2:\r\n      setOnline(\"Busy\")\r\n      break;\r\n    case 3:\r\n      setOnline(\"Away\")\r\n      break;\r\n    case 4:\r\n      setOnline(\"Snooze\")\r\n      break;\r\n    case 5:\r\n      setOnline(\"Looking to Trade\")\r\n      break;\r\n    case 6:\r\n      setOnline(\"Looking to Play\")\r\n      break;\r\n    default:\r\n      setOnline(\"Private\")\r\n      break;\r\n  }\r\n  console.log(onlineTest)\r\n\r\n  setTime(convertSteamTimeToUTC(playerinfo.lastlogoff))\r\n}, [playerinfo])\r\n\r\nreturn(\r\n  <div>\r\n    {playerinfo &&\r\n    <div className=\"row\">\r\n \r\n      <div className=\"col-xs-12 col-md-12\">\r\n        \r\n        <div className=\"row \"> \r\n          <div className=\"user-info col-xs-8 col-md-8 d-flex justify-content-center\">\r\n            <div className=\"profile-info yellow-neon-border\">\r\n              <div className=\"d-flex justify-content-center\">\r\n                <img id=\"profile-image\" src={playerinfo.avatarfull} height=\"100px\" width=\"100px\" alt=\"Avatar\"></img>\r\n              </div>\r\n              <p className=\"profile-text\">\r\n                <span id=\"profile-display-name\">{playerinfo.personaname} | </span>\r\n                  <span id=\"profile-country\">{playerinfo.loccountrycode} | </span>\r\n                  <span id=\"profile-status\">{onlineTest}</span> \r\n                  <br />\r\n                  <span id=\"profile-level\">Level {steamLevel}</span> | \r\n                  <span id=\"profile-steamid\">Steam ID {playerinfo.steamid}</span> | \r\n                  <span id=\"profile-steamid\">Last Time Online {timeLogOff}</span> \r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"user-app-content\" className=\"row justify-content-center\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n    }\r\n    <Redirect to =\"/\" />\r\n    {/* A little extra padding... */}\r\n    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n  </div>\r\n);\r\n\r\n\r\n}\r\nexport default Main","import './App.css'\r\nimport React, {useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                <input type=\"text\"\r\n                className=\"form-control dark-bg\"\r\n                id=\"username\"\r\n                aria-describedby=\"username-help\"\r\n                placeholder=\"Enter a Steam ID\"\r\n                name=\"username\"\r\n                value={usernameSearch}\r\n                onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"green-glow\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"game\"\r\n                aria-describedby=\"game-help\"\r\n                placeholder=\"Enter a Steam Game\"\r\n                name=\"game\"\r\n                value={appSearch}\r\n                onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Steam ID</label>\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                      <input type=\"text\"\r\n                      className=\"form-control dark-bg\"\r\n                      id=\"username\"\r\n                      aria-describedby=\"username-help\"\r\n                      placeholder=\"Enter a Steam ID\"\r\n                      name=\"username\"\r\n                      value={usernameSearch}\r\n                      onChange={e => setUsernameSearch(e.target.value)}\r\n                      required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"game\"\r\n                      aria-describedby=\"game-help\"\r\n                      placeholder=\"Enter a Steam Game\"\r\n                      name=\"game\"\r\n                      value={appSearch}\r\n                      onChange={e => setAppSearch(e.target.value)}\r\n                      />\r\n                <small id=\"game-help\" className=\"form-text\">Enter a game or app that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        console.log(\"there is a search present\");\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        console.log(\"there is not a search present\")\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>Title</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12 bg-dark\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam and the Steam logo are trademarks of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}