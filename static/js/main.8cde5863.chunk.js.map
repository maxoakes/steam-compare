{"version":3,"sources":["graphs/MostPlayed.js","graphs/TimePlayed.js","graphs/RatioPlayed.js","GamesGraph.js","main.js","App.js","index.js"],"names":["MostPlayed","games","console","log","gamesSort","sort","a","b","playtime_forever","gameNames","playTime","i","length","push","name","Math","floor","data","labels","datasets","label","backgroundColor","options","responsive","plugins","title","display","text","color","position","legend","scales","x","ticks","autoSkip","maxRotation","minRotation","y","scaleLabel","labelString","TimePlayed","counts","RatioPlayed","totalTime","avgTime","GamesGraph","className","Main","usernameSearch","searchClick","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","useState","playerinfo","setPlayer","onlineTest","setOnline","steamLevel","setLevel","allGames","setGames","timeLogOff","setLastLogin","setSteamid","playedGames","setPlayedGames","setFriendsList","setAppid","gameBannerURL","setGameBannerURL","gameTitle","setGameTitle","playerCount","setPlayerCount","gameAchievements","setGameAchievements","playerGameStats","setPlayerGameStats","event","appName","document","getElementById","value","vanityURL","fetchJSON","steamidResponse","response","generatedSteamid","steamid","appListResponse","appObject","applist","apps","find","app","toLowerCase","generatedAppid","appid","generatedAppTitle","playerSummeryResponse","players","steamLevelResponse","friendsListResponse","groupListResponse","player_level","friendslist","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","player_count","gameSchemaResponse","game","availableGameStats","stats","userStatsForGameResponse","playerstats","achievements","mergedAchievementList","mergeAchievementObjects","achievementpercentages","fullStatObject","makeStatObjects","error","ownedGamesResponse","recentlyPlayedGamesResponse","communityBadgeProgressResponse","playerBansResponse","fetchGameBannerURL","userAchievements","globalAchievements","achievementSchemas","achievementObjectList","achievementObject","achieved","apiname","unlocktime","percent","defaultvalue","displayName","hidden","icon","icongray","description","statSchema","playerStats","j","filter","stat","convertSteamTimeToUTC","seconds","unlockTime","Date","toDateString","getUTCHours","toString","padStart","getUTCMinutes","apiURL","fetch","status","undefined","ok","json","id","bannerURL","then","Promise","reject","catch","finally","getAchievementStatus","achievement","getAchievementDescription","useEffect","grabData","personastate","lastlogoff","src","avatarfull","height","width","alt","personaname","loccountrycode","map","img_icon_url","minutes","style","backgroundImage","lineHeight","achievementList","userAchievementCount","getAchievementPercent","toFixed","scope","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","setClick","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","onClick","bodyHTML","required","preventDefault","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8cde5863.chunk.js","sourcesContent":["\r\nimport {Bar} from 'react-chartjs-2';\r\nconst MostPlayed = ({games}) =>{\r\n\r\n    console.log(games[0]);\r\n    let gamesSort = games;\r\n    //https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values\r\n    gamesSort.sort((a, b) => (b.playtime_forever) - (a.playtime_forever));\r\n\r\n    let gameNames = [];\r\n    let playTime = []\r\n    let min2Hours = \"\";\r\n    for(let i = 0; i<gamesSort.length && i < 10; i++){\r\n        if(gamesSort[i].playtime_forever > 100){\r\n        gameNames.push(gamesSort[i].name)\r\n        min2Hours = Math.floor(gamesSort[i].playtime_forever/60) + \" hr \" + (gamesSort[i].playtime_forever % 60) + \" min\";\r\n        playTime.push(gamesSort[i].playtime_forever)\r\n        }\r\n    }\r\n    console.log(gameNames)\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            text: 'Top 10 Most Played Games',\r\n            color: 'white',\r\n            position: 'top'\r\n        },\r\n        legend: {\r\n            display: false\r\n        }\r\n    },\r\n        scales: {\r\n            x: {\r\n                ticks: {\r\n                    //display: false,\r\n                    autoSkip: false,\r\n                    maxRotation: 90,\r\n                    minRotation: 90,\r\n                    color: 'white'\r\n                }\r\n            },\r\n            y:{\r\n                ticks: {\r\n                    color: 'white',\r\n                },\r\n                scaleLabel: {\r\n                    display: false,\r\n                    labelString: 'Minutes'\r\n                    //This doesnt work\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const data = {\r\n        labels: gameNames,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: playTime,\r\n          backgroundColor: '#6c757d',\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Bar data={data} options = {options}/>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default MostPlayed;","import {Doughnut} from 'react-chartjs-2';\r\nconst TimePlayed = ({games}) =>{\r\n    console.log(games)\r\n    let backgroundColors = [\r\n        'rgba(54, 162, 235, 0.8)',\r\n        'rgba(255, 206, 86, 0.8)',\r\n        'rgba(255, 99, 132, 0.8)',\r\n        'rgba(75, 192, 192, 0.8)',\r\n        'rgba(153, 102, 255, 0.8)',\r\n        'rgba(255, 159, 64, 0.8)',\r\n        'rgba(150, 50, 199, 0.8)',\r\n        'rgba(83, 102, 255, 0.8)',\r\n        'rgba(40, 159, 64, 0.8)',\r\n        'rgba(210, 199, 199, 0.8)',\r\n      ];\r\n    let timePlayed = [\r\n        \"Not Played\",\r\n        \"0-12 hrs\",\r\n        \"12-24 hrs\",\r\n        \"24-36 hrs\",\r\n        \"36-48 hrs\",\r\n        \"48-60 hrs\",\r\n        \"60+ hrs\"\r\n    ]\r\n\r\n    let counts = [\r\n        0,0,0,0,0,0,0\r\n    ]\r\n    for(let i=0; i < games.length; i++){\r\n        if(games[i].playtime_forever === 0){\r\n            counts[0] += 1;\r\n        }\r\n        if(games[i].playtime_forever < 720 && games[i].playtime_forever > 0){//12 hrs or less\r\n            counts[1] = counts[1] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 720 && games[i].playtime_forever < 1440){//12-24\r\n            counts[2] = counts[2] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 1440 && games[i].playtime_forever < 2160){//24-36\r\n            counts[3] = counts[3] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2160 && games[i].playtime_forever < 2880){//36-48\r\n            counts[4] = counts[4] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2880 && games[i].playtime_forever < 3600){//48-60\r\n            counts[5] = counts[5] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 3600){//60+\r\n            \r\n            counts[6] = counts[6] + 1;\r\n        }\r\n    }\r\n    console.log(counts);\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            color: 'white',\r\n            position: 'top',\r\n            text: 'Game Count'\r\n        },\r\n        legend: {\r\n            display: true\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: timePlayed,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: counts,\r\n          backgroundColor: backgroundColors,\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    );\r\n}\r\nexport default TimePlayed;","import {Doughnut} from 'react-chartjs-2';\r\n\r\nconst RatioPlayed = ({games}) => {\r\n    let colors = [\r\n        'hsl(214, 100%, 50%)',\r\n        'hsl(250, 75%, 20%)',\r\n        'hsl(214, 20%, 20%)',\r\n        'hsl(230, 20%, 75%)',\r\n        'hsl(214, 60%, 5%)',\r\n        'hsl(190, 60%, 75%)',\r\n        'hsl(214, 30%, 50%)',\r\n    ]\r\n\r\n    let totalTime = 0;\r\n    for(let i=0; i<games.length; i++){\r\n        totalTime += games[i].playtime_forever;\r\n    }\r\n    console.log(totalTime)\r\n    let avgTime = totalTime/games.length;\r\n    avgTime = avgTime/3; //determines what qualifies to be graphed\r\n    let gamesSort = games;\r\n    //https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values\r\n    gamesSort.sort((a, b) => (b.playtime_forever) - (a.playtime_forever));\r\n    let gameNames = [];\r\n    let playTime = [];\r\n    for(let i=0; i<gamesSort.length; i++){\r\n        if(gamesSort[i].playtime_forever >= avgTime){\r\n            gameNames.push(gamesSort[i].name);\r\n            playTime.push(gamesSort[i].playtime_forever);\r\n        }\r\n    }\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            text: 'Favorite Games(?)',\r\n            color: 'white',\r\n            position: 'top'\r\n        },\r\n        legend: {\r\n            display: false\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: gameNames,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: playTime,\r\n          backgroundColor: colors,\r\n        }]\r\n    };\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    )\r\n}\r\nexport default RatioPlayed;","import {Bar} from 'react-chartjs-2';\r\nimport{\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport MostPlayed from './graphs/MostPlayed.js'\r\nimport TimePlayed from './graphs/TimePlayed.js'\r\nimport RatioPlayed from './graphs/RatioPlayed'\r\n\r\n\r\nconst GamesGraph = ({games}) => {\r\n\r\n\r\n    return(\r\n        <div className=\"table-responsive profile-info col-md-12 col-sm-10 row d-flex justify-content-center\">\r\n            <div className=\"col-md-5 col-sm-10 m-2\">\r\n                        <MostPlayed games={games}/>\r\n            </div>\r\n            <div className=\"col-md-5 col-sm-10 m-2\">\r\n                        <TimePlayed games={games}/>\r\n            </div>\r\n            <div className=\"col-md-5 col-sm-10 m-2\">\r\n                <RatioPlayed games={games}/>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default GamesGraph","import {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\nimport GamesGraph from './GamesGraph.js'\r\n\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n\r\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n  //Perhaps there is a more elegent way to do this\r\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n  //Max's api steam key. Use it for this project\r\n  const key = \"386540A52F687754D4E1767230822EDE\";\r\n  const headers =\r\n  {\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {'Content-Type': 'application/json'},\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n  };\r\n\r\n  console.log(\"SEARCH:\", usernameSearch)\r\n\r\n  const [playerinfo, setPlayer] = useState(\"\");\r\n  const [onlineTest, setOnline] = useState(\"\");\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [allGames, setGames] = useState(null);\r\n\r\n  const [timeLogOff, setLastLogin] = useState(\"\");\r\n  const [isPrivate, setPrivate] = useState(false);\r\n\r\n  //user content\r\n  const [steamid, setSteamid] = useState(0);\r\n  const [playedGames, setPlayedGames] = useState([]);\r\n  const [friendsList, setFriendsList] = useState([]);\r\n\r\n  //game content\r\n  const [appid, setAppid] = useState(0);\r\n  const [gameBannerURL, setGameBannerURL] = useState(\"\");\r\n  const [gameTitle, setGameTitle] = useState(\"\");\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [gameAchievements, setGameAchievements] = useState([]);\r\n  const [playerGameStats, setPlayerGameStats] = useState([]);\r\n  \r\n\r\n  //React things\r\n  useEffect( () => {\r\n    grabData();\r\n  }, [searchClick]);\r\n  \r\n  useEffect( () => {\r\n    switch(playerinfo.personastate)\r\n    {\r\n      case 0:\r\n        setOnline(\"Offline\")\r\n        break;\r\n      case 1:\r\n        setOnline(\"Online\")\r\n        break;\r\n      case 2:\r\n        setOnline(\"Busy\")\r\n        break;\r\n      case 3:\r\n        setOnline(\"Away\")\r\n        break;\r\n      case 4:\r\n        setOnline(\"Snooze\")\r\n        break;\r\n      case 5:\r\n        setOnline(\"Looking to Trade\")\r\n        break;\r\n      case 6:\r\n        setOnline(\"Looking to Play\")\r\n        break;\r\n      default:\r\n        setOnline(\"Private\")\r\n        break;\r\n    }\r\n    setLastLogin(convertSteamTimeToUTC(playerinfo.lastlogoff));\r\n  }, [playerinfo])\r\n\r\n  async function grabData(event)\r\n  {\r\n    setPlayedGames(null);\r\n    setGameTitle(null);\r\n    setGameAchievements(null);\r\n    setPlayerGameStats(null);\r\n    setGames(null);\r\n\r\n    //get the form seach boxes\r\n    let appName = document.getElementById(\"game\").value;\r\n    let vanityURL = document.getElementById(\"username\").value;\r\n    let generatedSteamid;\r\n    let generatedAppid;\r\n    let generatedAppTitle;\r\n\r\n    //game/app name\r\n    //check if the user entered a username to search for\r\n    if (vanityURL)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is \"scouteriv\" from https://steamcommunity.com/id/scouteriv/\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      let steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + vanityURL + '&format=json', headers)\r\n      console.log(steamidResponse.response)\r\n      generatedSteamid = steamidResponse.response.steamid;\r\n      console.log(\"Found user \" + generatedSteamid + \" from \" + vanityURL)\r\n    }\r\n    \r\n    if (appName)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      let appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      let appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === appName.toLowerCase());\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        generatedAppid = appObject.appid;\r\n        generatedAppTitle = appObject.name;\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + appName)\r\n      }\r\n      else\r\n      {\r\n        console.log(\"No game found with: \" + appName)\r\n      }\r\n    }\r\n\r\n    let friendsListResponse;\r\n    let playerSummeryResponse;\r\n    //stats for player summary\r\n    if (generatedSteamid)\r\n    {\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n      \r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      let steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n      \r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + ',&format=json', headers)\r\n      console.log(friendsListResponse)\r\n\r\n      console.log(\"ISteamUser/GetUserGroupList\")\r\n      let groupListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetUserGroupList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(groupListResponse.response)\r\n\r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level);\r\n      setFriendsList(friendsListResponse.friendslist);\r\n    }\r\n\r\n    //if both a user and game is searched and valid\r\n    if (generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      let playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      let globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + generatedAppid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      let numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse);\r\n      setPlayerCount(numCurrentPlayersResponse.response.player_count);\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      let gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      \r\n      // the inputs to this one must come from the previous API call\r\n      // not a lot of games implement this. not sure if we want to call it\r\n      let gameStats;\r\n      let userStatsForGameResponse;\r\n      try {\r\n        gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n\r\n        console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n        userStatsForGameResponse = await fetchJSON(proxy +\r\n          'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n          key + '&appid=' + generatedAppid + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n        // userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n        console.log(userStatsForGameResponse.playerstats.stats);\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Game does not have stats\");\r\n      }\r\n       \r\n      try {\r\n        if (gameSchemaResponse.game.availableGameStats.achievements)\r\n        {\r\n          let mergedAchievementList = mergeAchievementObjects(\r\n            playerAchievementsResponse.playerstats.achievements,\r\n            globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n            gameSchemaResponse.game.availableGameStats.achievements);\r\n          console.log(mergedAchievementList);\r\n          setGameAchievements(mergedAchievementList);\r\n\r\n          let fullStatObject = makeStatObjects(gameSchemaResponse.game.availableGameStats.stats,\r\n            userStatsForGameResponse.playerstats.stats);\r\n          setPlayerGameStats(fullStatObject);\r\n\r\n          // let combinedGameStats = combineStats(gameSchemaResponse.game.availableGameStats.stats,\r\n          //   playerSummeryResponse.response.players[0],\r\n          //   userStatsForGameResponse.playerstats.stats,\r\n          //   friendsListResponse.friendslist.friends,\r\n          //   generatedAppid);\r\n        }\r\n      }\r\n      catch(error) {\r\n        console.error(\"Something in gameSchemaResponse.game.availableGameStats is undefined\");\r\n      }\r\n    }\r\n    //if only the username is valid\r\n    else if (generatedSteamid && !generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      let ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n      setGames(ownedGamesResponse.response.games)\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      let recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      let communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      let playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n\r\n      setPlayedGames(recentlyPlayedGamesResponse.response.games);\r\n    }\r\n    else if (!generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY valid appid searched\")\r\n    }\r\n    else\r\n    {\r\n      console.log(\"\\tNO valid item searched\");\r\n    }\r\n\r\n    setSteamid(generatedSteamid);\r\n    setAppid(generatedAppid);\r\n    setGameTitle(generatedAppTitle);\r\n    fetchGameBannerURL(generatedAppid);\r\n    \r\n  }\r\n\r\n  //take the arrays of the achievement schema, global stats\r\n  //and user stats and combine them into one array a unified object\r\n  function mergeAchievementObjects(userAchievements, globalAchievements, achievementSchemas)\r\n  {\r\n    let achievementObjectList = [];\r\n    for (let i = 0; i < achievementSchemas.length; i++)\r\n    {\r\n      let achievementObject = {\r\n        achieved: userAchievements[i].achieved,\r\n        apiname: userAchievements[i].apiname,\r\n        unlocktime: userAchievements[i].unlocktime,\r\n        name: globalAchievements[i].name,\r\n        percent: globalAchievements[i].percent,\r\n        defaultvalue: achievementSchemas[i].defaultvalue,\r\n        displayName: achievementSchemas[i].displayName,\r\n        hidden: achievementSchemas[i].hidden,\r\n        icon: achievementSchemas[i].icon,\r\n        icongray: achievementSchemas[i].icongray,\r\n        name: achievementSchemas[i].name,\r\n        description: achievementSchemas[i].description,\r\n      }\r\n      achievementObjectList.push(achievementObject);\r\n    }\r\n    return achievementObjectList;\r\n  }\r\n\r\n  async function combineStats(statSchema, player, playerStats, friends, gameid)\r\n  {\r\n    var t0 = performance.now()\r\n    console.log(statSchema);\r\n    console.log(player);\r\n    console.log(playerStats);\r\n    console.log(friends);\r\n\r\n    let friendsListString = \"\";\r\n    for (const friend of friends)\r\n    {\r\n      friendsListString = friendsListString.concat(friend.steamid + \",\");\r\n    }\r\n\r\n    //get the names of steam friends\r\n    let friendSummariesResponse = await fetchJSON(proxy + \r\n      'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n      key + '&steamids=' + friendsListString + '&format=json', headers)\r\n    let friendSummaries = friendSummariesResponse.response.players\r\n\r\n    //fetch all of their games concurrently\r\n    let friendsGameList = [];\r\n    try {\r\n      var list = await Promise.all(\r\n        friendSummaries.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n              key + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())));\r\n      friendsGameList = list;\r\n    }\r\n    catch (error)\r\n    {\r\n        console.log(error)\r\n        throw (error)\r\n    }\r\n\r\n    //add the steamid to the game list so they have an accompanying person\r\n    let friendsWithGame = []\r\n    friendsWithGame.unshift(player);\r\n    for (let i = 0; i < friendsGameList.length; i++)\r\n    {\r\n      if (!(friendsGameList[i].response['games'])) continue;\r\n      for (let j = 0; j < friendsGameList[i].response.games.length; j++)\r\n      {\r\n        if (friendsGameList[i].response.games[j].appid === gameid)\r\n        {\r\n          friendsWithGame.push(friendSummaries[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    console.log(friendsWithGame)\r\n\r\n    //fetch all stats concurrently\r\n    let friendsStats = []\r\n    try {\r\n      var list = await Promise.all(\r\n        friendsWithGame.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n              key + '&appid=' + gameid + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())))\r\n            .catch((error) => {\r\n              console.error('Error:', error);\r\n            })\r\n        friendsStats = list;\r\n    }\r\n    catch (error)\r\n    {\r\n      console.log(\"Data is set to private for a friend\")\r\n    }\r\n\r\n    console.log(friendsStats)\r\n    var t1 = performance.now();\r\n    console.log(\"Call to combineStats took \" + ((t1 - t0)/1000).toFixed(1) + \" seconds.\");\r\n  }\r\n\r\n  //combine the stat schema and the stats of the player\r\n  function makeStatObjects(statSchema, playerStats)\r\n  {\r\n    for (let i = 0; i < statSchema.length; i++)\r\n    {\r\n      for (let j = 0; j < playerStats.length; j++)\r\n      {\r\n        if (statSchema[i].name === playerStats[j].name)\r\n        {\r\n          statSchema[i].value = playerStats[j].value;\r\n        }\r\n      }\r\n      if (!('value' in statSchema[i])) statSchema[i].value = 0;\r\n      if (!(statSchema[i].displayName)) statSchema[i].displayName = statSchema[i].name;\r\n    }\r\n    statSchema = statSchema.filter(stat => stat.value != 0);\r\n    return statSchema;\r\n  }\r\n    \r\n  //convert the time that is recieved from steam api into a date and time\r\n  function convertSteamTimeToUTC(seconds)\r\n  {\r\n    if (!seconds)\r\n      return \"Private\";\r\n\r\n    let unlockTime = new Date(seconds*1000);\r\n    let timeString = unlockTime.toDateString() + \" at \" + \r\n      unlockTime.getUTCHours().toString().padStart(2, '0') + \":\" + \r\n      unlockTime.getUTCMinutes().toString().padStart(2, '0') + \" UTC\";\r\n      \r\n    return timeString;\r\n  }\r\n\r\n  //fetch from an API URL and return the resulting JSON\r\n  async function fetchJSON(apiURL, headers)\r\n  {\r\n    let response = await fetch(apiURL, headers);\r\n    if ((response.status >= 400) && (response.status < 500))\r\n    {\r\n      console.error(\"client error. returning undefined to be caught later on\");\r\n      return undefined;\r\n    }\r\n    else if (!response.ok)\r\n    {\r\n      console.error(\"There was an error: \" + response.status);\r\n    }\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  //convert minutes to hours and minutes\r\n  function minutesToHours(minutes)\r\n  {\r\n    return Math.floor(minutes/60) + \" hr \" + (minutes % 60) + \" min\";\r\n  }\r\n\r\n  //take in an appid and return a url of an image of that appid's game/app\r\n  async function fetchGameBannerURL(id)\r\n  {\r\n    let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/page_bg_generated.jpg\";\r\n    let response = await fetch(proxy + bannerURL)\r\n    .then(response => {\r\n      if (response.ok)\r\n        return response;\r\n      else\r\n        return Promise.reject(response.status);\r\n    })\r\n    .catch(error => {\r\n      console.log(\"Error getting high-quality game image, using default, low-res header img instead: \" + error);\r\n      bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/header.jpg\";\r\n      return bannerURL;\r\n    })\r\n    .finally(function() {\r\n      return bannerURL;\r\n    });\r\n    setGameBannerURL(bannerURL);\r\n  }\r\n\r\n  //take in an array of achievements and return what percent are 'achieved'\r\n  function getAchievementPercent(achievementList)\r\n  {\r\n    if (achievementList)\r\n    {\r\n      //achievements obtained so far\r\n      let userAchievementCount = 0;\r\n      for (let i = 0; i < achievementList.length; i++)\r\n      {\r\n        if (achievementList[i].achieved) userAchievementCount++;\r\n      }\r\n      return (userAchievementCount + \" out of \" + achievementList.length + \" achievements obtained\");\r\n    }\r\n    else\r\n    {\r\n      return (\"This game does not have achievements\");\r\n    }\r\n  }\r\n\r\n  //get the time that an achievement was unlocked, or state if it is still locked\r\n  function getAchievementStatus(achievement)\r\n  {\r\n    return achievement.achieved ?\r\n      (\"Unlocked \" + convertSteamTimeToUTC(achievement.unlocktime)) : \"Locked\";\r\n  }\r\n\r\n  //get the status of an achievement\r\n  function getAchievementDescription(achievement)\r\n  {\r\n      return achievement.description ? achievement.description : \"\";\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"row d-flex justify-content-center\">\r\n        <div className=\"col-xs-12 col-md-12\">\r\n          <div className=\"row\"> \r\n            <div className=\"user-info col-xs-8 col-md-8 d-flex justify-content-center\">\r\n              <div className=\"profile-info yellow-neon-border m-2\">\r\n                <div className=\"d-flex justify-content-center mt-2\">\r\n                  <img id=\"profile-image\" src={playerinfo.avatarfull} height=\"100px\" width=\"100px\" alt=\"Avatar\"></img>\r\n                </div>\r\n                <p className=\"profile-text\">\r\n                  <span id=\"profile-display-name\">{playerinfo.personaname} | </span>\r\n                  {playerinfo.loccountrycode &&\r\n                    <span id=\"profile-country\">{playerinfo.loccountrycode} | </span>\r\n                  }\r\n                    <span id=\"profile-status\">{onlineTest}</span> \r\n                    <br />\r\n                    <span id=\"profile-level\">Level {steamLevel}</span> | \r\n                    <span id=\"profile-steamid\"> Steam ID: {playerinfo.steamid}</span> | \r\n                    {}\r\n                    <span id=\"profile-steamid\"> Last Time Online: {timeLogOff}</span> \r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div id=\"user-app-content\" className=\"row justify-content-center\">\r\n          {/* USER-ONLY SEARCH CONTENT */}\r\n          {playedGames &&\r\n          <div className=\"container m-4\">\r\n            <div className=\"profile-info mx-auto flex-row flex-wrap d-flex\">\r\n              <h4 className=\"col-12 text-center mt-2\">Recently Played Games</h4>\r\n              {playedGames.map(game => (\r\n              <div key={game.appid} className=\"rounded the-game flex-fill m-2 p-2 col-xs-12 col-sm-6 col-md-3\">\r\n                <img id=\"game-icon\" className=\"mr-3\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + game.appid + '/' + game.img_icon_url + '.jpg'} \r\n                  alt={'Game icon:' + game.name} height=\"50px\" width=\"50px\" />\r\n                <span className=\"ml-2\">{game.name}</span>\r\n                <span className=\"game-facts rounded border border-light m-2 p-2\">Playtime: {minutesToHours(game.playtime_forever)}</span>\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          }\r\n          {/* USER-GAME SEARCH CONTENT */}\r\n            {/* Game banner */}\r\n          {gameTitle &&\r\n            <div className=\"row game-banner\">\r\n              <div className=\"col-xs-12 col-md-8 game-banner-title m-0 p-0\" style={{backgroundImage: `url(${gameBannerURL})`}}>\r\n              <h2 className=\"text-light text-left align-middle\" style={{lineHeight: \"75px\"}}>{gameTitle}</h2>\r\n              </div>\r\n              <div className=\"col-xs-12 col-md-4 game-banner-info\">\r\n                <p className=\"text-light game-banner-info-playercount\">{playerCount + \" players online\"}</p>\r\n                <p className=\"text-light game-banner-info-achievement\">{getAchievementPercent(gameAchievements)}</p>\r\n              </div>\r\n            </div>\r\n          }\r\n            {/* Game achievement grid */}\r\n          {gameAchievements &&\r\n            <div className=\"row col-xs-12\">\r\n              <div className=\"achievement-grid flex-row flex-wrap d-flex justify-content-between\">\r\n              {gameAchievements.map(achievement => (\r\n                <div key={achievement.name} className=\"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\">\r\n                  <img className=\"achievement-icon mx-auto\" src={achievement.icon} alt={achievement.name} width=\"75px\" height=\"75px\"/>\r\n                  <p className=\"achievement-global-percent text-light\">{achievement.percent.toFixed(2)}% of players have this achievement.</p>\r\n                  <p className=\"achievement-unlock text-light\">{getAchievementStatus(achievement)}</p>\r\n                  <h3 className=\"achievement-title text-light\">{achievement.displayName}</h3>\r\n                  <p className=\"achievement-description text-light\">{getAchievementDescription(achievement)}</p>\r\n                </div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n          }\r\n            {/* Game stats table */}\r\n          {playerGameStats &&\r\n          <div className=\"container\">\r\n            <table className=\"table table-dark table-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Stat Name</th>\r\n                  <th scope=\"col\">{playerinfo.personaname}'s Stat</th>\r\n                </tr>\r\n              </thead>\r\n              {playerGameStats.map(stat => (\r\n              <tbody key={stat.name} className=\"table-striped\">\r\n                <tr>\r\n                  <th scope=\"row\">{stat.displayName}</th>\r\n                  <td>{stat.value}</td>\r\n                </tr>\r\n              </tbody>\r\n              ))}\r\n            </table>\r\n          </div>\r\n          }\r\n          </div>\r\n        </div>\r\n      \r\n      {allGames &&\r\n\r\n        <div className=\"row d-flex justify-content-center m-4\">\r\n          <br></br>\r\n          <GamesGraph games={allGames}></GamesGraph>\r\n        </div>\r\n      }\r\n</div>\r\n    <div className=\"footer-space\"></div>\r\n      <Redirect to =\"/\" />\r\n      {/* A little extra padding... */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main\r\n","import './App.css'\r\nimport React, {useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                <input type=\"text\"\r\n                className=\"form-control dark-bg\"\r\n                id=\"username\"\r\n                aria-describedby=\"username-help\"\r\n                placeholder=\"Enter a Steam ID\"\r\n                name=\"username\"\r\n                value={usernameSearch}\r\n                onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"green-glow\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"game\"\r\n                aria-describedby=\"game-help\"\r\n                placeholder=\"Enter a Steam Game\"\r\n                name=\"game\"\r\n                value={appSearch}\r\n                onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Steam ID</label>\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                      <input type=\"text\"\r\n                      className=\"form-control dark-bg\"\r\n                      id=\"username\"\r\n                      aria-describedby=\"username-help\"\r\n                      placeholder=\"Enter a Steam ID\"\r\n                      name=\"username\"\r\n                      value={usernameSearch}\r\n                      onChange={e => setUsernameSearch(e.target.value)}\r\n                      required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"game\"\r\n                      aria-describedby=\"game-help\"\r\n                      placeholder=\"Enter a Steam Game\"\r\n                      name=\"game\"\r\n                      value={appSearch}\r\n                      onChange={e => setAppSearch(e.target.value)}\r\n                      />\r\n                <small id=\"game-help\" className=\"form-text\">Enter a game or app that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        console.log(\"there is a search present\");\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        console.log(\"there is not a search present\")\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>Title</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12 bg-dark\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam and the Steam logo are trademarks of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}