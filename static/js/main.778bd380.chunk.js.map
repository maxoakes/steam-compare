{"version":3,"sources":["graphs/TimePlayed.js","graphs/RatioPlayed.js","GamesGraph.js","Loading.js","RandomGame.js","main.js","App.js","index.js"],"names":["TimePlayed","games","counts","i","length","playtime_forever","data","labels","datasets","label","backgroundColor","options","responsive","plugins","title","display","color","position","text","legend","RatioPlayed","totalTime","avgTime","gamesSort","sort","a","b","gameNames","playTime","push","name","GamesGraph","className","Loading","loading","loadingMsg","RandomGame","useState","rngGame","setGame","unplayed","splice","click","setClick","useEffect","rng","Math","floor","random","src","appid","img_logo_url","alt","onClick","event","Main","usernameSearch","state","country","searchClick","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","setLoad","loadMsg","setLoadMsg","playerSummary","setPlayerSummary","steamLevel","setLevel","allGames","setGames","setSteamid","playedGames","setPlayedGames","friendsList","setFriendsList","setAppid","gameBannerURL","setGameBannerURL","gameTitle","setGameTitle","playerCount","setPlayerCount","gameAchievements","setGameAchievements","playerGameStats","setPlayerGameStats","searchedApp","document","getElementById","value","searchedProfile","console","log","fetchJSON","steamidResponse","generatedSteamid","response","steamid","test","setLoadingMessage","appListResponse","appObject","applist","apps","find","app","toLowerCase","toString","generatedAppid","generatedAppTitle","playerSummeryResponse","players","steamLevelResponse","friendsListResponse","friendslist","ownedGamesResponse","player_level","friends","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","player_count","gameSchemaResponse","game","availableGameStats","stats","userStatsForGameResponse","playerstats","achievements","mergedAchievementList","mergeAchievementObjects","achievementpercentages","fullStatObject","makeStatObjects","unused","recentlyPlayedGamesResponse","communityBadgeProgressResponse","playerBansResponse","fetchGameBannerURL","userAchievements","globalAchievements","achievementSchemas","achievementObjectList","achievementObject","achieved","apiname","unlocktime","percent","defaultvalue","displayName","hidden","icon","icongray","description","message","statSchema","playerStats","j","filter","stat","apiURL","fetch","status","error","undefined","ok","json","convertSteamTimeToUTC","seconds","Date","toLocaleDateString","weekday","year","month","day","hour","minute","fullTimeWithDifference","timeInMilliseconds","timeInSeconds","then","differenceInMinutes","abs","now","minutes","differenceInHours","hours","differenceInDays","days","differenceInYears","years","getTimeDifferenceString","id","bannerURL","Promise","reject","catch","finally","getAchievementStatus","achievement","getAchievementDescription","grabData","href","profileurl","avatarfull","personaname","statusCode","getStatusString","personastate","realname","locstatecode","loccountrycode","lastlogoff","timecreated","map","img_icon_url","height","width","style","backgroundImage","lineHeight","achievementList","targetGame","gameList","gameFound","userAchievementCount","getAchievementPercent","toFixed","scope","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","bodyHTML","required","preventDefault","ReactDOM","render","StrictMode"],"mappings":"oPAiFeA,EAhFI,SAAC,GA2BhB,IA3B4B,IAAXC,EAAU,EAAVA,MAuBbC,EAAS,CACT,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAGRC,EAAE,EAAGA,EAAIF,EAAMG,OAAQD,IACM,IAA9BF,EAAME,GAAGE,mBACRH,EAAO,IAAM,GAEdD,EAAME,GAAGE,iBAAmB,KAAOJ,EAAME,GAAGE,iBAAmB,IAC9DH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,KAAOJ,EAAME,GAAGE,iBAAmB,OAC/DH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,MAAQJ,EAAME,GAAGE,iBAAmB,OAChEH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,MAAQJ,EAAME,GAAGE,iBAAmB,OAChEH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,MAAQJ,EAAME,GAAGE,iBAAmB,OAChEH,EAAO,GAAKA,EAAO,GAAK,GAEzBD,EAAME,GAAGE,kBAAoB,OAC5BH,EAAO,GAAKA,EAAO,GAAK,GAIhC,IAcMI,EAAO,CACTC,OArDa,CACb,aACA,WACA,YACA,YACA,YACA,YACA,WA+CAC,SAAU,CAAC,CACTC,MAAO,WACPH,KAAMJ,EACNQ,gBArEiB,CACnB,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,0BACA,0BACA,yBACA,+BA+DJ,OACI,8BACI,cAAC,IAAD,CAAUJ,KAAMA,EAAMK,QAzBd,CACZC,YAAY,EACZC,QAAS,CACTC,MAAO,CACHC,SAAS,EACTC,MAAO,QACPC,SAAU,MACVC,KAAM,cAEVC,OAAQ,CACJJ,SAAS,UCFNK,EA1DK,SAAC,GAYjB,IAZ8B,IAAZnB,EAAW,EAAXA,MAWdoB,EAAY,EACRlB,EAAE,EAAGA,EAAEF,EAAMG,OAAQD,IACzBkB,GAAapB,EAAME,GAAGE,iBAG1B,IAAIiB,EAAUD,EAAUpB,EAAMG,OAC9BkB,GAAkB,IAClB,IAAIC,EAAYtB,EAEhBsB,EAAUC,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAErB,iBAAqBoB,EAAEpB,oBAGnD,IAFA,IAAIsB,EAAY,GACZC,EAAW,GACPzB,EAAE,EAAGA,EAAEoB,EAAUnB,OAAQD,IAC1BoB,EAAUpB,GAAGE,kBAAoBiB,GAAWK,EAAUvB,OAAS,KAC9DuB,EAAUE,KAAKN,EAAUpB,GAAG2B,MAC5BF,EAASC,KAAKN,EAAUpB,GAAGE,mBAGnC,IAcMC,EAAO,CACTC,OAAQoB,EACRnB,SAAU,CAAC,CACTC,MAAO,WACPH,KAAMsB,EACNlB,gBA/CO,CACT,sBACA,qBACA,qBACA,qBACA,oBACA,qBACA,yBA4CJ,OACI,8BACI,cAAC,IAAD,CAAUJ,KAAMA,EAAMK,QAzBd,CACZC,YAAY,EACZC,QAAS,CACTC,MAAO,CACHC,SAAS,EACTG,KAAM,oBACNF,MAAO,QACPC,SAAU,OAEdE,OAAQ,CACJJ,SAAS,UCZNgB,EAlBI,SAAC,GAAa,IAAZ9B,EAAW,EAAXA,MACjB,OACI,8BACCA,GACG,sBAAK+B,UAAU,kEAAf,UACI,qBAAKA,UAAU,yBAAf,SACI,cAAC,EAAD,CAAY/B,MAAOA,MAEvB,qBAAK+B,UAAU,yBAAf,SACI,cAAC,EAAD,CAAa/B,MAAOA,YCVzBgC,EAVC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACvB,OACI,sBAAKH,UAAU,iBAAf,UACI,sBAAMA,UAAU,2BAAhB,qBACA,oBAAIA,UAAU,aAAd,SAA4BG,IAC5B,qBAAIH,UAAU,aAAd,qBAAoCE,EAApC,WC0CGE,EA7CI,SAAC,GAIhB,IAJ6B,IAAZnC,EAAW,EAAXA,MACjB,EAA2BoC,mBAAS,MAApC,mBAAOC,EAAP,KAAgBC,EAAhB,KACIC,EAAW,GAEPrC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC7BqC,EAASX,KAAK5B,EAAME,IAGxB,IAAI,IAAIA,EAAIqC,EAASpC,OAAO,EAAGD,GAAK,IAAKA,EAClCqC,EAASrC,GAAGE,iBAAmB,IAC9BmC,EAASC,OAAOtC,EAAG,GAI3B,MAA0BkC,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACN,IAAIC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYR,EAASpC,OAAO,EAAI,GAAK,GAE/DmC,EAAQC,EAASK,MAClB,CAACH,IAEmB,IAApBF,EAASpC,OAEJ,wBAKJ,sBAAK4B,UAAU,kEAAf,UACI,oBAAIA,UAAU,2BAAd,iDACCM,GACG,sBAAKN,UAAU,gDAAf,UACK,qBAAKA,UAAU,kBAAkBiB,IAAK,mEAAqEX,EAAQY,MAAQ,IAAMZ,EAAQa,aAAe,OACrJC,IAAK,aAAed,EAAQR,OAChC,6BAAKQ,EAAQR,UAGrB,wBAAQE,UAAU,0CAA0CqB,QA1BpE,SAAqBC,GACjBX,EAASD,EAAQ,IAyBb,0BCisBGa,EAruBF,SAAC,GAAkC,EAAjCC,eAAkC,IA+gBpBC,EAAOC,EA/gBLC,EAAiB,EAAjBA,YAIvBC,EAAQ,yCAGRC,EAAM,mCACNC,EACN,CACIC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbH,QAAS,CAAC,eAAgB,oBAC1BI,SAAU,SACVC,eAAgB,eAGpB,EAA2B9B,mBAAS,MAApC,mBAAOH,EAAP,KAAgBkC,EAAhB,KACA,EAA8B/B,mBAAS,IAAvC,mBAAOgC,EAAP,KAAgBC,EAAhB,KAEA,EAA0CjC,mBAAS,MAAnD,mBAAOkC,EAAP,KAAsBC,EAAtB,KACA,EAA+BnC,mBAAS,IAAxC,mBAAOoC,EAAP,KAAmBC,EAAnB,KACA,EAA6BrC,mBAAS,MAAtC,mBAAOsC,EAAP,KAAiBC,EAAjB,KAGA,EAA8BvC,mBAAS,GAAvC,mBAAgBwC,GAAhB,WACA,EAAsCxC,mBAAS,IAA/C,mBAAOyC,EAAP,KAAoBC,EAApB,KACA,EAAsC1C,mBAAS,IAA/C,mBAAO2C,EAAP,KAAoBC,EAApB,KAGA,EAA0B5C,mBAAS,GAAnC,mBAAOa,EAAP,KAAcgC,EAAd,KACA,EAA0C7C,mBAAS,IAAnD,oBAAO8C,GAAP,MAAsBC,GAAtB,MACA,GAAkC/C,mBAAS,IAA3C,qBAAOgD,GAAP,MAAkBC,GAAlB,MACA,GAAsCjD,mBAAS,GAA/C,qBAAOkD,GAAP,MAAoBC,GAApB,MACA,GAAgDnD,mBAAS,IAAzD,qBAAOoD,GAAP,MAAyBC,GAAzB,MACA,GAA8CrD,mBAAS,IAAvD,qBAAOsD,GAAP,MAAwBC,GAAxB,MApC8C,8CA8C9C,WAAwBtC,GAAxB,yDAAA7B,EAAA,yDAGE+C,EAAiB,MACjBE,EAAS,IACTE,EAAS,MAETC,EAAW,GACXE,EAAe,MACfE,EAAe,MAEfK,GAAa,MACbI,GAAoB,MACpBE,GAAmB,MAGfC,EAAcC,SAASC,eAAe,QAAQC,QAC9CC,EAAkBH,SAASC,eAAe,YAAYC,OAjB5D,wBA4BIE,QAAQC,IAAI,+BA5BhB,UA6BgCC,GAAUxC,EACpC,oEACAC,EAAM,cAAgBoC,EAAkB,eAAgBnC,GA/B9D,QA6BQuC,EA7BR,SAiCIC,EAAmBD,EAAgBE,SAASC,UAGnB,QAAQC,KAAKR,KAEpCK,EAAmBL,GAErBC,QAAQC,IAAI,cAAgBG,EAAmB,SAAWL,GAE1DS,GAAkB,EAAG,gBAAkBJ,GA1C3C,YA6CMT,EA7CN,wBAiDIK,QAAQC,IAAI,yBAjDhB,UAkDgCC,GAAUxC,EACpC,2DAA4DE,GAnDlE,QAkDQ6C,EAlDR,OAqDID,GAAkB,EAAG,iBAAmBb,KAIpCe,EAAYD,EAAgBE,QAAQC,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAIlF,KAAKmF,gBAAkBpB,EAAYoB,mBAG9E,QAAQR,KAAKZ,KAE7BK,QAAQC,IAAI,iDACZS,EAAYD,EAAgBE,QAAQC,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAI9D,MAAMgE,aAAerB,MAI5Ee,GAEFO,EAAiBP,EAAU1D,MAC3BkE,EAAoBR,EAAU9E,KAC9BoE,QAAQC,IAAI,cAAgBS,EAAU1D,MAAQ,SAAW2C,IAIzDK,QAAQC,IAAI,4BAA8BN,GA3EhD,YAmFMS,EAnFN,wBAqFIJ,QAAQC,IAAI,iCArFhB,UAsFkCC,GAAUxC,EACtC,sEACAC,EAAM,aAAeyC,EAAmB,eAAgBxC,GAxF9D,eAsFIuD,EAtFJ,OAyFInB,QAAQC,IAAIkB,EAAsBd,SAASe,QAAQ,IAEnDZ,GAAkB,GAAI,2BAEtBR,QAAQC,IAAI,gCA7FhB,UA8FmCC,GAAUxC,EACvC,qEACAC,EAAM,YAAcyC,EAAmB,eAAgBxC,GAhG7D,eA8FQyD,EA9FR,OAiGIrB,QAAQC,IAAIoB,EAAmBhB,UAC/BG,GAAkB,GAAI,IAEtBR,QAAQC,IAAI,4BApGhB,UAqGgCC,GAAUxC,EACpC,iEACAC,EAAM,YAAcyC,EAAmB,gBAAiBxC,GAvG9D,eAqGI0D,EArGJ,OAwGItB,QAAQC,IAAIqB,EAAoBC,aAChCf,GAAkB,GAAI,IAEtBR,QAAQC,IAAI,gCA3GhB,UA4GmCC,GAAUxC,EACvC,qEACAC,EAAM,YAAcyC,EAAmB,iCAAkCxC,GA9G/E,QA4GQ4D,EA5GR,OA+GIxB,QAAQC,IAAIuB,EAAmBnB,UAC/BG,GAAkB,GAAI,IAEtB9B,EAAS8C,EAAmBnB,SAAStG,OACrCuE,EAAiB6C,EAAsBd,SAASe,QAAQ,IACxD5C,EAAS6C,EAAmBhB,SAASoB,cACjCH,GAAqBvC,EAAeuC,EAAoBC,YAAYG,SArH5E,YAwHMtB,IAAoBa,EAxH1B,yBA0HIjB,QAAQC,IAAI,gCAEZO,GAAkB,GAAI,iCACtBR,QAAQC,IAAI,yCA7HhB,UA8H2CC,GAAUxC,EAC/C,8EACAC,EAAM,YAAcyC,EAAmB,UAAYa,EAAiB,eAAgBrD,GAhI1F,eA8HQ+D,EA9HR,OAiII3B,QAAQC,IAAI0B,GACZnB,GAAkB,GAAI,IAEtBR,QAAQC,IAAI,yDApIhB,UAqIqDC,GAAUxC,EACzD,8FACAC,EAAM,WAAasD,EAAiB,eAAgBrD,GAvI1D,eAqIQgE,EArIR,OAwII5B,QAAQC,IAAI2B,GACZpB,GAAkB,GAAI,IAEtBR,QAAQC,IAAI,6CA3IhB,UA4I0CC,GAAUxC,EAC9C,kFACAC,EAAM,UAAYsD,EAAiB,eAAgBrD,GA9IzD,eA4IQiE,EA5IR,OA+II7B,QAAQC,IAAI4B,GACZvC,GAAeuC,EAA0BxB,SAASyB,cAClDtB,GAAkB,GAAI,IAEtBR,QAAQC,IAAI,oCAnJhB,UAoJmCC,GAAUxC,EACvC,yEACAC,EAAM,UAAYsD,EAAiB,eAAgBrD,GAtJzD,eAoJQmE,EApJR,OAuJI/B,QAAQC,IAAI8B,EAAmBC,MAC/BxB,GAAkB,IAAK,IAxJ3B,UA+JkBuB,EAAmBC,KAAKC,mBAAmBC,MAEvDlC,QAAQC,IAAI,uCAjKlB,UAkKuCC,GAAUxC,EACzC,4EACAC,EAAM,UAAYsD,EAAiB,YAAcb,EAAmB,eAAgBxC,GApK5F,QAkKMuE,EAlKN,OAsKMnC,QAAQC,IAAIkC,EAAyBC,YAAYF,OAtKvD,mDAyKMlC,QAAQC,IAAI,4BAzKlB,QA4KI,IACM8B,EAAmBC,KAAKC,mBAAmBI,eAEzCC,EAAwBC,GAC1BZ,EAA2BS,YAAYC,aACvCT,EAAqCY,uBAAuBH,aAC5DN,EAAmBC,KAAKC,mBAAmBI,cAC7CrC,QAAQC,IAAIqC,GACZ9C,GAAoB8C,GAEhBG,EAAiBC,GAAgBX,EAAmBC,KAAKC,mBAAmBC,MAC9EC,EAAyBC,YAAYF,OACvCxC,GAAmB+C,IAUvB,MAAME,GACJ3C,QAAQC,IAAI,wEAnMlB,8BAsMWG,GAAqBa,EAtMhC,yBAwMIjB,QAAQC,IAAI,2BAEZD,QAAQC,IAAI,yCA1MhB,WA2M4CC,GAAUxC,EAChD,8EACAC,EAAM,YAAcyC,EAAmB,eAAgBxC,GA7M7D,gBA2MQgF,EA3MR,OA8MI5C,QAAQC,IAAI2C,EAA4BvC,UACxCxB,EAAe+D,EAA4BvC,SAAStG,OACpDyG,GAAkB,GAAI,sBAEtBR,QAAQC,IAAI,4CAlNhB,WAmN+CC,GAAUxC,EACnD,iFACAC,EAAM,YAAcyC,EAAmB,eAAgBxC,GArN7D,gBAmNQiF,EAnNR,OAsNI7C,QAAQC,IAAI4C,EAA+BxC,UAC3CG,GAAkB,GAAI,IAEtBR,QAAQC,IAAI,4BAzNhB,WA0NmCC,GAAUxC,EACvC,iEACAC,EAAM,aAAeyC,EAAmB,eAAgBxC,GA5N9D,SA0NQkF,EA1NR,OA6NI9C,QAAQC,IAAI6C,EAAmB1B,QAAQ,IA7N3C,2BA+NYhB,GAAoBa,EAE5BjB,QAAQC,IAAI,+BAIZD,QAAQC,IAAI,4BArOhB,SAwOEtB,EAAWyB,GACXpB,EAASiC,GACT7B,GAAa8B,GACb6B,GAAmB9B,GAEnB/C,EAAQ,MA7OV,6DA9C8C,sBAgS9C,SAASqE,GAAwBS,EAAkBC,EAAoBC,GAGrE,IADA,IAAIC,EAAwB,GACnBlJ,EAAI,EAAGA,EAAIiJ,EAAmBhJ,OAAQD,IAC/C,CAAC,IAAD,EACMmJ,GAAiB,GACnBC,SAAUL,EAAiB/I,GAAGoJ,SAC9BC,QAASN,EAAiB/I,GAAGqJ,QAC7BC,WAAYP,EAAiB/I,GAAGsJ,WAChC3H,KAAMqH,EAAmBhJ,GAAG2B,KAC5B4H,QAASP,EAAmBhJ,GAAGuJ,QAC/BC,aAAcP,EAAmBjJ,GAAGwJ,aACpCC,YAAaR,EAAmBjJ,GAAGyJ,YACnCC,OAAQT,EAAmBjJ,GAAG0J,OAC9BC,KAAMV,EAAmBjJ,GAAG2J,KAC5BC,SAAUX,EAAmBjJ,GAAG4J,UAVb,qBAWbX,EAAmBjJ,GAAG2B,MAXT,4BAYNsH,EAAmBjJ,GAAG6J,aAZhB,GAcrBX,EAAsBxH,KAAKyH,GAE7B,OAAOD,EAqFT,SAAS3C,GAAkBgD,EAASO,GAElC7F,EAAQsF,GACJO,GAAS3F,EAAW2F,GAI1B,SAASrB,GAAgBsB,EAAYC,GAEnC,IAAK,IAAIhK,EAAI,EAAGA,EAAI+J,EAAW9J,OAAQD,IACvC,CACE,IAAK,IAAIiK,EAAI,EAAGA,EAAID,EAAY/J,OAAQgK,IAElCF,EAAW/J,GAAG2B,OAASqI,EAAYC,GAAGtI,OAExCoI,EAAW/J,GAAG6F,MAAQmE,EAAYC,GAAGpE,OAGnC,UAAWkE,EAAW/J,KAAK+J,EAAW/J,GAAG6F,MAAQ,GACjDkE,EAAW/J,GAAGyJ,cAAcM,EAAW/J,GAAGyJ,YAAcM,EAAW/J,GAAG2B,MAG9E,OADAoI,EAAaA,EAAWG,QAAO,SAAAC,GAAI,OAAkB,GAAdA,EAAKtE,SA/ZA,SAoa/BI,GApa+B,mFAoa9C,WAAyBmE,EAAQzG,GAAjC,iBAAArC,EAAA,sEAEuB+I,MAAMD,EAAQzG,GAFrC,aAEMyC,EAFN,QAGgBkE,QAAU,KAASlE,EAASkE,OAAS,KAHrD,uBAKIvE,QAAQwE,MAAM,2DALlB,uBAMWC,GANX,OAQYpE,EAASqE,IAEjB1E,QAAQwE,MAAM,uBAAyBnE,EAASkE,QAVpD,wBAYmBlE,EAASsE,OAZ5B,eAYMvK,EAZN,yBAaSA,GAbT,6CApa8C,sBA6d9C,SAASwK,GAAsBC,GAE7B,IAAKA,EACH,MAAO,UAYT,OAVW,IAAIC,KAAe,IAAVD,GAURE,mBAAmB,QARjB,CACZC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YA4BZ,SAASC,GAAuBC,GAE9B,OAAKA,EAEEX,GAAsBW,GAC3B,KA3BJ,SAAiCC,GAE/B,IAAIC,EAAO,IAAIX,KAAmB,IAAdU,GAChBE,EAAsB9I,KAAK+I,IAAIb,KAAKc,MAAQH,GAAtB,IACtBI,EAAUjJ,KAAKC,MAAM6I,EAAsB,IAE3CI,EAAqBJ,EAAsB,GAC3CK,EAAQnJ,KAAKC,MAAMiJ,EAAoB,IAEvCE,EAAoBN,EAAmB,KACvCO,EAAOrJ,KAAKC,MAAMmJ,EAAmB,KACrCE,EAAqBR,EAAmB,OACxCS,EAAQvJ,KAAKC,MAAMqJ,GAMvB,OAJsBC,EAASA,EAAQ,WAAc,KAClDF,EAAQA,EAAO,UAAa,KAC5BF,EAASA,EAAQ,WAAc,KAC/BF,EAAWA,EAAU,YAAe,IAAM,MAUpCO,CAAwBb,GAAsB,IAHvB,UAxgBY,SAqhB/BxC,GArhB+B,iFAqhB9C,WAAkCsD,GAAlC,eAAA9K,EAAA,6DAEM+K,EAAY,8CAAgDD,EAAK,yBAFvE,SAGuB/B,MAAM5G,EAAQ4I,GAClCb,MAAK,SAAApF,GACJ,OAAIA,EAASqE,GACJrE,EAEAkG,QAAQC,OAAOnG,EAASkE,WAElCkC,OAAM,SAAAjC,GAGL,OAFAxE,QAAQC,IAAI,qFAAuFuE,GACnG8B,EAAY,8CAAgDD,EAAK,iBAGlEK,SAAQ,WACP,OAAOJ,KAhBX,cAkBEpH,GAAiBoH,GAlBnB,4CArhB8C,sBAykB9C,SAASK,GAAqBC,GAE5B,OAAOA,EAAYvD,SAChB,YAAcuB,GAAsBgC,EAAYrD,YAAe,SAIpE,SAASsD,GAA0BD,GAE/B,OAAOA,EAAY9C,YAAc8C,EAAY9C,YAAc,GAI/D,OA9iBApH,qBAAW,WACTwB,EAAQ,GAzCoC,qCA0C5C4I,GACA5I,EAAQ,QACP,CAACT,IA0iBIzB,EACN,8BACE,cAAC,IAAD,UACE,cAAC,EAAD,CAASA,QAASA,EAASC,WAAYkC,QAK3C,gCACGE,GACD,sBAAKvC,UAAU,oCAAf,UAEE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,sEAAf,UACI,mBAAGA,UAAU,wBAAwBiL,KAAM1I,EAAc2I,WAAzD,SACE,qBAAKX,GAAG,gBAAgBtJ,IAAKsB,EAAc4I,WAAY/J,IAAKmB,EAAc6I,YAAc,gBAE1F,sBAAKpL,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,+BAAoEuC,EAAc6I,eAEpF,sBAAKpL,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,qBAA0DuC,EAAciC,WAE1E,sBAAKxE,UAAU,6BAAf,UACE,sBAAMA,UAAU,2BAAhB,oBAzLd,SAAyBqL,GAEvB,IAAI5C,EAAS,UACb,OAAO4C,GAEL,KAAK,EACH5C,EAAS,UACT,MACF,KAAK,EACHA,EAAS,SACT,MACF,KAAK,EACHA,EAAS,OACT,MACF,KAAK,EACHA,EAAS,OACT,MACF,KAAK,EACHA,EAAS,SACT,MACF,KAAK,EACHA,EAAS,mBACT,MACF,KAAK,EACHA,EAAS,kBACT,MACF,QACEA,EAAS,UAGb,OAAOA,EA2J8D6C,CAAgB/I,EAAcgJ,iBAExFvI,GACD,sBAAKhD,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,qBAA0DgD,EAAY5E,UAGvEmE,EAAciJ,UACf,sBAAKxL,UAAU,gCAAf,UACE,sBAAMA,UAAU,2BAAhB,uBAA4DuC,EAAciJ,aAG1EjJ,EAAckJ,cAAgBlJ,EAAcmJ,iBAC9C,sBAAK1L,UAAU,+BAAf,UACE,sBAAMA,UAAU,2BAAhB,uBA7GayB,EA6GgEc,EAAckJ,aA7GvE/J,EA6GoFa,EAAcmJ,gBA3G1HjK,GAAgB,KAAOA,EAAQ,KAAO,KAAOC,GAAoB,KA4G7D,qBAAK1B,UAAU,sBAAsBiB,IAAK,+BAAiCsB,EAAcmJ,eAAiB,qBAG5G,sBAAK1L,UAAU,kCAAf,UACE,sBAAMA,UAAU,2BAAhB,0BAA+DwJ,GAAuBjH,EAAcoJ,eAEtG,sBAAK3L,UAAU,8BAAf,UACE,sBAAMA,UAAU,2BAAhB,6BAAkEwJ,GAAuBjH,EAAcqJ,gBAEzG,sBAAK5L,UAAU,4BAAf,UACE,sBAAMA,UAAU,2BAAhB,yBAA8DyC,KAE/DE,GACD,sBAAK3C,UAAU,4BAAf,UACE,sBAAMA,UAAU,2BAAhB,yBAA8D2C,EAASvE,eAK/E,sBAAKmM,GAAG,mBAAmBvK,UAAU,6BAArC,UAEC8C,GACD,qBAAK9C,UAAU,gBAAf,SACE,sBAAKA,UAAU,iDAAf,UACE,oBAAIA,UAAU,0BAAd,mCACC8C,EAAY+I,KAAI,SAAA3F,GAAI,OACrB,sBAAsBlG,UAAU,iEAAhC,UACE,qBAAKuK,GAAG,YAAYvK,UAAU,OAAOiB,IAAK,mEAAqEiF,EAAKhF,MAAQ,IAAMgF,EAAK4F,aAAe,OACpJ1K,IAAK,aAAe8E,EAAKpG,KAAMiM,OAAO,OAAOC,MAAM,SACrD,uBAAMhM,UAAU,OAAhB,cAAyBkG,EAAKpG,QAC9B,uBAAME,UAAU,iDAAhB,wBApMY+J,EAoM+E7D,EAAK7H,iBAlMnGyC,KAAKC,MAAMgJ,EAAU,IAAM,OAAUA,EAAU,GAAM,aA8L1C7D,EAAKhF,OAhMzB,IAAwB6I,UA4MjB1G,IACC,sBAAKrD,UAAU,kBAAf,UACE,qBAAKA,UAAU,+CAA+CiM,MAAO,CAACC,gBAAgB,OAAD,OAAS/I,GAAT,MAArF,SACA,oBAAInD,UAAU,oCAAoCiM,MAAO,CAACE,WAAY,QAAtE,SAAgF9I,OAEhF,sBAAKrD,UAAU,sCAAf,UACE,mBAAGA,UAAU,0CAAb,SAAwDuD,GAAc,oBACtE,mBAAGvD,UAAU,0CAAb,SA/HZ,SAA+BoM,EAAiBC,EAAYC,GAG1D,IADA,IAAIC,GAAY,EACPpO,EAAI,EAAGA,EAAImO,EAASlO,OAAQD,IAE/BmO,EAASnO,GAAG+C,QAAUmL,IAAYE,GAAY,GAGpD,IAAKA,EAEH,MAAO,kCAGT,GAAIH,EACJ,CAGE,IADA,IAAII,EAAuB,EAClBrO,EAAI,EAAGA,EAAIiO,EAAgBhO,OAAQD,IAEtCiO,EAAgBjO,GAAGoJ,UAAUiF,IAEnC,OAAQA,EAAuB,WAAaJ,EAAgBhO,OAAS,yBAIrE,MAAQ,uCAsGwDqO,CAAsBhJ,GAAkBvC,EAAOyB,WAK5Gc,IACC,qBAAKzD,UAAU,gBAAf,SACE,qBAAKA,UAAU,qEAAf,SACCyD,GAAiBoI,KAAI,SAAAf,GAAW,OAC/B,sBAA4B9K,UAAU,oEAAtC,UACE,qBAAKA,UAAU,2BAA2BiB,IAAK6J,EAAYhD,KAAM1G,IAAK0J,EAAYhL,KAAMkM,MAAM,OAAOD,OAAO,SAC5G,oBAAG/L,UAAU,wCAAb,UAAsD8K,EAAYpD,QAAQgF,QAAQ,GAAlF,yCACA,mBAAG1M,UAAU,gCAAb,SAA8C6K,GAAqBC,KACnE,oBAAI9K,UAAU,+BAAd,SAA8C8K,EAAYlD,cAC1D,mBAAG5H,UAAU,qCAAb,SAAmD+K,GAA0BD,OALrEA,EAAYhL,aAY3B6D,IACD,qBAAK3D,UAAU,YAAf,SACE,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,oBAAI2M,MAAM,MAAV,uBACA,qBAAIA,MAAM,MAAV,UAAiBpK,EAAc6I,YAA/B,kBAGHzH,GAAgBkI,KAAI,SAAAvD,GAAI,OACzB,uBAAuBtI,UAAU,gBAAjC,SACE,+BACE,oBAAI2M,MAAM,MAAV,SAAiBrE,EAAKV,cACtB,6BAAKU,EAAKtE,YAHFsE,EAAKxI,kBAWlBoB,GAAUyB,GAEX,sBAAK3C,UAAU,2CAAf,UACE,uBACA,cAAC,EAAD,CAAY/B,MAAO0E,IACnB,cAAC,EAAD,CAAY1E,MAAO0E,UAK3B,qBAAK3C,UAAU,iBACb,cAAC,IAAD,CAAU4M,GAAI,UChkBLC,MAhKf,WAEE,SAASC,IAGP,MAA4CzM,mBAAS,IAArD,mBAAOmB,EAAP,KAAuBuL,EAAvB,KACA,EAAkC1M,mBAAS,IAA3C,mBAAO2M,EAAP,KAAkBC,EAAlB,KACA,EAAgD5M,oBAAS,GAAzD,mBAAO6M,EAAP,KAAyBC,EAAzB,KACA,EAAgC9M,mBAAS,GAAzC,mBAAOsB,EAAP,KAAoBhB,EAApB,KAEAC,qBAAU,WACRsD,QAAQC,IAAI,kBAAoB3C,EAAiB,mBAAoBwL,MAIvE,IAAII,EACF,qBAAKpN,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAMqN,SAAUC,EAAhB,SACE,sBAAKtN,UAAU,iBAAf,UACE,sBAAKA,UAAU,WAAf,UACE,uBAAOA,UAAU,aAAauN,QAAQ,WAAtC,0BACA,uBAAOC,KAAK,OACVxN,UAAU,uBACVuK,GAAG,WACHkD,mBAAiB,gBACjBC,YAAY,iCACZ5N,KAAK,WACLkE,MAAOxC,EACPmM,SAAU,SAAAC,GAAC,OAAIb,EAAkBa,EAAEC,OAAO7J,aAG9C,sBAAKhE,UAAU,WAAf,UACE,uBAAOA,UAAU,aAAauN,QAAQ,OAAtC,wBACA,uBAAOC,KAAK,OACVxN,UAAU,eACVuK,GAAG,OACHkD,mBAAiB,YACjBC,YAAY,gCACZ5N,KAAK,OACLkE,MAAOgJ,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAaW,EAAEC,OAAO7J,aAGzC,qBAAKhE,UAAU,0BAAf,SACI,wBAAQwN,KAAK,SAASjD,GAAG,eAAevK,UAAU,0BAA0BqB,QA2E1F,SAAqBC,GACnBX,EAASgB,EAAY,IA5ET,4BAIR,uBAEA,cAAC,IAAD,UACE,cAAC,EAAD,CAAMH,eAAgBA,EAAgBG,YAAaA,WA6CvDmM,EAAWZ,EArCb,qBAAKlN,UAAU,MAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMuK,GAAG,aAAa8C,SAAUC,EAAhC,UACE,sBAAKtN,UAAU,aAAf,UACE,uBAAOA,UAAU,gBAAgBuN,QAAQ,WAAzC,0BACE,uBAAOC,KAAK,OACVxN,UAAU,uBACVuK,GAAG,WACHkD,mBAAiB,gBACjBC,YAAY,iCACZ5N,KAAK,WACLkE,MAAOxC,EACPmM,SAAU,SAAAC,GAAC,OAAIb,EAAkBa,EAAEC,OAAO7J,QAC1C+J,UAAQ,IACZ,uBAAOxD,GAAG,gBAAgBvK,UAAU,YAApC,4FAEF,sBAAKA,UAAU,aAAf,UACE,uBAAOuN,QAAQ,OAAOvN,UAAU,gBAAhC,wBACA,uBAAOwN,KAAK,OACVxN,UAAU,eACVuK,GAAG,OACHkD,mBAAiB,YACjBC,YAAY,2BACZ5N,KAAK,OACLkE,MAAOgJ,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAaW,EAAEC,OAAO7J,UAEvC,uBAAOuG,GAAG,YAAYvK,UAAU,YAAhC,oEAEF,wBAAQwN,KAAK,SAASjD,GAAG,eAAevK,UAAU,0BAAlD,8BAO6CoN,EAGvD,SAASE,EAAahM,GAIpB,GAFA4C,QAAQC,IAAI,gCAAkC3C,EAAiB,mBAAoBwL,GACnF1L,EAAM0M,iBACFhB,GAAaxL,EACjB,CACE,IAAK0L,EAIH,OAFAhJ,QAAQC,IAAI,2DACZgJ,GAAoB,GACbW,EAETX,GAAoB,QAIpBA,GAAoB,GAQxB,OAAOW,EAIT,OACE,qBAAK9N,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,kDAGJ,cAAC8M,EAAD,IACA,qBAAK9M,UAAU,MAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,uBACA,oBAAGA,UAAU,eAAb,UACE,mBAAGiL,KAAK,mCAAR,qBADF,SAEE,mBAAGA,KAAK,kCAAR,yBAFF,SAGE,mBAAGA,KAAK,qDAAR,yCAHF,SAIE,mBAAGA,KAAK,4BAAR,mDAEF,mBAAGjL,UAAU,mCAAb,iEAGA,mBAAGA,UAAU,2BAAb,6KCtJZiO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrK,SAASC,eAAe,U","file":"static/js/main.778bd380.chunk.js","sourcesContent":["import {Doughnut} from 'react-chartjs-2';\r\nconst TimePlayed = ({games}) =>{\r\n    let backgroundColors = [\r\n        'rgba(54, 162, 235, 0.8)',\r\n        'rgba(255, 206, 86, 0.8)',\r\n        'rgba(255, 99, 132, 0.8)',\r\n        'rgba(75, 192, 192, 0.8)',\r\n        'rgba(153, 102, 255, 0.8)',\r\n        'rgba(255, 159, 64, 0.8)',\r\n        'rgba(150, 50, 199, 0.8)',\r\n        'rgba(83, 102, 255, 0.8)',\r\n        'rgba(40, 159, 64, 0.8)',\r\n        'rgba(210, 199, 199, 0.8)',\r\n    ];\r\n    let timePlayed = [\r\n        \"Not Played\",\r\n        \"0-12 hrs\",\r\n        \"12-24 hrs\",\r\n        \"24-36 hrs\",\r\n        \"36-48 hrs\",\r\n        \"48-60 hrs\",\r\n        \"60+ hrs\"\r\n    ];\r\n\r\n    let counts = [\r\n        0,0,0,0,0,0,0\r\n    ];\r\n    \r\n    for(let i=0; i < games.length; i++) {\r\n        if(games[i].playtime_forever === 0) {\r\n            counts[0] += 1;\r\n        }\r\n        if(games[i].playtime_forever < 720 && games[i].playtime_forever > 0) {//12 hrs or less\r\n            counts[1] = counts[1] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 720 && games[i].playtime_forever < 1440) {//12-24\r\n            counts[2] = counts[2] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 1440 && games[i].playtime_forever < 2160) {//24-36\r\n            counts[3] = counts[3] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2160 && games[i].playtime_forever < 2880) {//36-48\r\n            counts[4] = counts[4] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 2880 && games[i].playtime_forever < 3600) {//48-60\r\n            counts[5] = counts[5] + 1;\r\n        }\r\n        if(games[i].playtime_forever >= 3600) {//60+\r\n            counts[6] = counts[6] + 1;\r\n        }\r\n    }\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            color: 'white',\r\n            position: 'top',\r\n            text: 'Game Count'\r\n        },\r\n        legend: {\r\n            display: true\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: timePlayed,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: counts,\r\n          backgroundColor: backgroundColors,\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    );\r\n}\r\nexport default TimePlayed;","import {Doughnut} from 'react-chartjs-2';\r\n\r\nconst RatioPlayed = ({games}) => {\r\n    let colors = [\r\n        'hsl(214, 100%, 50%)',\r\n        'hsl(250, 75%, 20%)',\r\n        'hsl(214, 20%, 20%)',\r\n        'hsl(230, 20%, 75%)',\r\n        'hsl(214, 60%, 5%)',\r\n        'hsl(190, 60%, 75%)',\r\n        'hsl(214, 30%, 50%)',\r\n    ]\r\n\r\n    let totalTime = 0;\r\n    for(let i=0; i<games.length; i++){\r\n        totalTime += games[i].playtime_forever;\r\n    }\r\n\r\n    let avgTime = totalTime/games.length;\r\n    avgTime = avgTime/1.3; //determines what qualifies to be graphed\r\n    let gamesSort = games;\r\n    //https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values\r\n    gamesSort.sort((a, b) => (b.playtime_forever) - (a.playtime_forever));\r\n    let gameNames = [];\r\n    let playTime = [];\r\n    for(let i=0; i<gamesSort.length; i++){\r\n        if(gamesSort[i].playtime_forever >= avgTime && gameNames.length < 25){\r\n            gameNames.push(gamesSort[i].name);\r\n            playTime.push(gamesSort[i].playtime_forever);\r\n        }\r\n    }\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n        title: {\r\n            display: true,\r\n            text: 'Most Played Games',\r\n            color: 'white',\r\n            position: 'top'\r\n        },\r\n        legend: {\r\n            display: false\r\n        }\r\n    }\r\n    };\r\n    const data = {\r\n        labels: gameNames,\r\n        datasets: [{\r\n          label: 'Playtime',\r\n          data: playTime,\r\n          backgroundColor: colors,\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Doughnut data={data} options={options} />\r\n        </div>\r\n    )\r\n}\r\nexport default RatioPlayed;","import {Bar} from 'react-chartjs-2';\r\nimport{\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport MostPlayed from './graphs/MostPlayed.js'\r\nimport TimePlayed from './graphs/TimePlayed.js'\r\nimport RatioPlayed from './graphs/RatioPlayed'\r\n\r\nconst GamesGraph = ({games}) => {\r\n    return(\r\n        <div>\r\n        {games && \r\n            <div className=\"table-responsive profile-info row d-flex justify-content-center\">\r\n                <div className=\"col-md-5 col-sm-10 m-2\">\r\n                    <TimePlayed games={games}/>\r\n                </div>\r\n                <div className=\"col-md-5 col-sm-10 m-2\">\r\n                    <RatioPlayed games={games}/>\r\n                </div>\r\n            </div>\r\n        }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GamesGraph","const Loading = ({loading, loadingMsg}) => {\r\n    return(\r\n        <div className=\"loading-window\">\r\n            <span className=\"player-summary-tiny-font\">LOADING</span>\r\n            <h1 className=\"text-light\">{loadingMsg}</h1>\r\n            <h2 className=\"text-light\">Loaded: {loading}%</h2>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Loading;","import { useEffect, useState } from \"react\";\r\n\r\nconst RandomGame = ({games}) => {\r\n    const [rngGame, setGame] = useState(null);\r\n    let unplayed = [];\r\n\r\n    for(let i = 0; i < games.length; i++){\r\n        unplayed.push(games[i]);\r\n    }\r\n\r\n    for(let i = unplayed.length-1; i >= 0; --i){\r\n        if(unplayed[i].playtime_forever > 10){\r\n            unplayed.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    const [click, setClick] = useState(0);\r\n    function handleClick(event){\r\n        setClick(click + 1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let rng = Math.floor(Math.random() * (unplayed.length-1 - 0) + 0);\r\n\r\n        setGame(unplayed[rng]);\r\n    }, [click])\r\n\r\n    if(unplayed.length === 0){\r\n        return(\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"profile-info mt-4 row text-center d-flex justify-content-center\">\r\n            <h3 className=\"text-light col-sm-10 m-2\">Revisit one of your unplayed games:</h3>\r\n            {rngGame &&\r\n                <div className=\"text-center row d-flex justify-content-center\">\r\n                     <img className=\"col-md-5 col-10\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + rngGame.appid + '/' + rngGame.img_logo_url + '.jpg'} \r\n                        alt={'Game icon:' + rngGame.name} />\r\n                    <h5>{rngGame.name}</h5>\r\n                </div>\r\n            }\r\n            <button className=\"btn btn-outline-light m-2 col-3 btn-sm \" onClick={handleClick}>New Game</button>\r\n        </div>\r\n    );\r\n}\r\nexport default RandomGame;","import {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\nimport GamesGraph from './GamesGraph.js'\r\nimport Loading from './Loading.js'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport RandomGame from './RandomGame.js';\r\n\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n\r\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n  //Perhaps there is a more elegent way to do this\r\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n  //Max's api steam key. Use it for this project\r\n  const key = \"386540A52F687754D4E1767230822EDE\";\r\n  const headers =\r\n  {\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {'Content-Type': 'application/json'},\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n  };\r\n\r\n  const [loading, setLoad] = useState(null);\r\n  const [loadMsg, setLoadMsg] = useState(\"\");\r\n\r\n  const [playerSummary, setPlayerSummary] = useState(null);\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [allGames, setGames] = useState(null);\r\n\r\n  //user content\r\n  const [steamid, setSteamid] = useState(0);\r\n  const [playedGames, setPlayedGames] = useState([]);\r\n  const [friendsList, setFriendsList] = useState([]);\r\n\r\n  //game content\r\n  const [appid, setAppid] = useState(0);\r\n  const [gameBannerURL, setGameBannerURL] = useState(\"\");\r\n  const [gameTitle, setGameTitle] = useState(\"\");\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [gameAchievements, setGameAchievements] = useState([]);\r\n  const [playerGameStats, setPlayerGameStats] = useState([]);\r\n  \r\n\r\n  //React things\r\n  useEffect( () => {\r\n    setLoad(1);\r\n    grabData();\r\n    setLoad(null);\r\n  }, [searchClick]);\r\n\r\n  async function grabData(event)\r\n  {\r\n    //reset values\r\n    setPlayerSummary(null);\r\n    setLevel(\"\");\r\n    setGames(null);\r\n\r\n    setSteamid(0);\r\n    setPlayedGames(null);\r\n    setFriendsList(null);\r\n    \r\n    setGameTitle(null);\r\n    setGameAchievements(null);\r\n    setPlayerGameStats(null);\r\n    \r\n    //get the form seach boxes\r\n    let searchedApp = document.getElementById(\"game\").value;\r\n    let searchedProfile = document.getElementById(\"username\").value;\r\n    let generatedSteamid;\r\n    let generatedAppid;\r\n    let generatedAppTitle;\r\n\r\n    //game/app name\r\n    //check if the user entered a username to search for\r\n    if (searchedProfile)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is \"scouteriv\" from https://steamcommunity.com/id/scouteriv/\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      let steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + searchedProfile + '&format=json', headers)\r\n      //console.log(steamidResponse.response)\r\n      generatedSteamid = steamidResponse.response.steamid;\r\n      \r\n      //backup to check if the entered profile name is a steamid\r\n      if (!generatedSteamid && /^\\d+$/.test(searchedProfile))\r\n      {\r\n        generatedSteamid = searchedProfile;\r\n      }\r\n      console.log(\"Found user \" + generatedSteamid + \" from \" + searchedProfile);\r\n\r\n      setLoadingMessage(1, \"Finding user \" + generatedSteamid)\r\n    }\r\n    \r\n    if (searchedApp)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      let appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n\r\n      setLoadingMessage(8, \"Searching for \" + searchedApp)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      let appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === searchedApp.toLowerCase());\r\n\r\n      //check if the game is an appid\r\n      if (!appObject && /^\\d+$/.test(searchedApp))\r\n      {\r\n        console.log(\"Checking if the entered game is a valid appid\")\r\n        appObject = appListResponse.applist.apps.find(app => app.appid.toString() === searchedApp);\r\n      }\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        generatedAppid = appObject.appid;\r\n        generatedAppTitle = appObject.name;\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + searchedApp)\r\n      }\r\n      else\r\n      {\r\n        console.log(\"No game found with query \" + searchedApp)\r\n      }\r\n    }\r\n\r\n    let friendsListResponse;\r\n    let playerSummeryResponse;\r\n\r\n    //stats for player summary\r\n    if (generatedSteamid)\r\n    {\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n\r\n      setLoadingMessage(15, \"fetching player summary\")\r\n\r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      let steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(steamLevelResponse.response)\r\n      setLoadingMessage(27, \"\")\r\n      \r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + ',&format=json', headers)\r\n      console.log(friendsListResponse.friendslist)\r\n      setLoadingMessage(32, \"\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      let ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n      setLoadingMessage(41, \"\")\r\n\r\n      setGames(ownedGamesResponse.response.games)\r\n      setPlayerSummary(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level);\r\n      if (friendsListResponse) setFriendsList(friendsListResponse.friendslist.friends);\r\n    }\r\n\r\n    if (generatedSteamid && generatedAppid) //if both a user and game is searched and valid\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      setLoadingMessage(42, \"Searching player achievements\")\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      let playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse);\r\n      setLoadingMessage(57, \"\")\r\n\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      let globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + generatedAppid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse);\r\n      setLoadingMessage(69, \"\")\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      let numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse);\r\n      setPlayerCount(numCurrentPlayersResponse.response.player_count);\r\n      setLoadingMessage(77, \"\")\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      let gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      setLoadingMessage(100, \"\")\r\n      \r\n      // the inputs to this one must come from the previous API call\r\n      // not a lot of games implement this\r\n      let gameStats;\r\n      let userStatsForGameResponse;\r\n      try {\r\n        gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n\r\n        console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n        userStatsForGameResponse = await fetchJSON(proxy +\r\n          'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n          key + '&appid=' + generatedAppid + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n        // userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n        console.log(userStatsForGameResponse.playerstats.stats);\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Game does not have stats\");\r\n      }\r\n       \r\n      try {\r\n        if (gameSchemaResponse.game.availableGameStats.achievements)\r\n        {\r\n          let mergedAchievementList = mergeAchievementObjects(\r\n            playerAchievementsResponse.playerstats.achievements,\r\n            globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n            gameSchemaResponse.game.availableGameStats.achievements);\r\n          console.log(mergedAchievementList);\r\n          setGameAchievements(mergedAchievementList);\r\n\r\n          let fullStatObject = makeStatObjects(gameSchemaResponse.game.availableGameStats.stats,\r\n            userStatsForGameResponse.playerstats.stats);\r\n          setPlayerGameStats(fullStatObject);\r\n\r\n          /* experimental concurrent API pull */\r\n          // let combinedGameStats = combineStats(gameSchemaResponse.game.availableGameStats.stats,\r\n          //   playerSummeryResponse.response.players[0],\r\n          //   userStatsForGameResponse.playerstats.stats,\r\n          //   friendsListResponse.friendslist.friends,\r\n          //   generatedAppid);\r\n        }\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Something in gameSchemaResponse.game.availableGameStats is undefined\");\r\n      }\r\n    }\r\n    else if (generatedSteamid && !generatedAppid) //if only the username is valid\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      let recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n      setPlayedGames(recentlyPlayedGamesResponse.response.games);\r\n      setLoadingMessage(72, \"Finding user stats\")\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      let communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n      setLoadingMessage(99, \"\")\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      let playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n    }\r\n    else if (!generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY valid appid searched\")\r\n    }\r\n    else\r\n    {\r\n      console.log(\"\\tNO valid item searched\");\r\n    }\r\n\r\n    setSteamid(generatedSteamid);\r\n    setAppid(generatedAppid);\r\n    setGameTitle(generatedAppTitle);\r\n    fetchGameBannerURL(generatedAppid);\r\n    \r\n    setLoad(null);\r\n  }\r\n\r\n  //take the arrays of the achievement schema, global stats\r\n  //and user stats and combine them into one array a unified object\r\n  function mergeAchievementObjects(userAchievements, globalAchievements, achievementSchemas)\r\n  {\r\n    let achievementObjectList = [];\r\n    for (let i = 0; i < achievementSchemas.length; i++)\r\n    {\r\n      let achievementObject = {\r\n        achieved: userAchievements[i].achieved,\r\n        apiname: userAchievements[i].apiname,\r\n        unlocktime: userAchievements[i].unlocktime,\r\n        name: globalAchievements[i].name,\r\n        percent: globalAchievements[i].percent,\r\n        defaultvalue: achievementSchemas[i].defaultvalue,\r\n        displayName: achievementSchemas[i].displayName,\r\n        hidden: achievementSchemas[i].hidden,\r\n        icon: achievementSchemas[i].icon,\r\n        icongray: achievementSchemas[i].icongray,\r\n        name: achievementSchemas[i].name,\r\n        description: achievementSchemas[i].description,\r\n      }\r\n      achievementObjectList.push(achievementObject);\r\n    }\r\n    return achievementObjectList;\r\n  }\r\n\r\n  //experimental concurrent function. Not working yet\r\n  async function combineStats(statSchema, player, playerStats, friends, gameid)\r\n  {\r\n    var t0 = performance.now()\r\n    console.log(statSchema);\r\n    console.log(player);\r\n    console.log(playerStats);\r\n    console.log(friends);\r\n\r\n    let friendsListString = \"\";\r\n    for (const friend of friends)\r\n    {\r\n      friendsListString = friendsListString.concat(friend.steamid + \",\");\r\n    }\r\n\r\n    //get the names of steam friends\r\n    let friendSummariesResponse = await fetchJSON(proxy + \r\n      'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n      key + '&steamids=' + friendsListString + '&format=json', headers)\r\n    let friendSummaries = friendSummariesResponse.response.players\r\n\r\n    //fetch all of their games concurrently\r\n    let friendsGameList = [];\r\n    try {\r\n      var list = await Promise.all(\r\n        friendSummaries.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n              key + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())));\r\n      friendsGameList = list;\r\n    }\r\n    catch (error)\r\n    {\r\n        console.log(error)\r\n        throw (error)\r\n    }\r\n\r\n    //add the steamid to the game list so they have an accompanying person\r\n    let friendsWithGame = []\r\n    friendsWithGame.unshift(player);\r\n    for (let i = 0; i < friendsGameList.length; i++)\r\n    {\r\n      if (!(friendsGameList[i].response['games'])) continue;\r\n      for (let j = 0; j < friendsGameList[i].response.games.length; j++)\r\n      {\r\n        if (friendsGameList[i].response.games[j].appid === gameid)\r\n        {\r\n          friendsWithGame.push(friendSummaries[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    console.log(friendsWithGame)\r\n\r\n    //fetch all stats concurrently\r\n    let friendsStats = []\r\n    try {\r\n      var list = await Promise.all(\r\n        friendsWithGame.map(friend => \r\n          fetch(proxy +\r\n              'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n              key + '&appid=' + gameid + '&steamid=' + friend.steamid + '&format=json', headers)\r\n            .then(response =>\r\n              response = response.json())))\r\n            .catch((error) => {\r\n              console.error('Error:', error);\r\n            })\r\n        friendsStats = list;\r\n    }\r\n    catch (error)\r\n    {\r\n      console.log(\"Data is set to private for a friend\")\r\n    }\r\n\r\n    console.log(friendsStats)\r\n    var t1 = performance.now();\r\n    console.log(\"Call to combineStats took \" + ((t1 - t0)/1000).toFixed(1) + \" seconds.\");\r\n  }\r\n\r\n  //set the loading message\r\n  function setLoadingMessage(percent, message)\r\n  {\r\n    setLoad(percent)\r\n    if (message) setLoadMsg(message)\r\n  }\r\n\r\n  //combine the stat schema and the stats of the player\r\n  function makeStatObjects(statSchema, playerStats)\r\n  {\r\n    for (let i = 0; i < statSchema.length; i++)\r\n    {\r\n      for (let j = 0; j < playerStats.length; j++)\r\n      {\r\n        if (statSchema[i].name === playerStats[j].name)\r\n        {\r\n          statSchema[i].value = playerStats[j].value;\r\n        }\r\n      }\r\n      if (!('value' in statSchema[i])) statSchema[i].value = 0;\r\n      if (!(statSchema[i].displayName)) statSchema[i].displayName = statSchema[i].name;\r\n    }\r\n    statSchema = statSchema.filter(stat => stat.value != 0);\r\n    return statSchema;\r\n  }\r\n\r\n  //fetch from an API URL and return the resulting JSON\r\n  async function fetchJSON(apiURL, headers)\r\n  {\r\n    let response = await fetch(apiURL, headers);\r\n    if ((response.status >= 400) && (response.status < 500))\r\n    {\r\n      console.error(\"client error. returning undefined to be caught later on\");\r\n      return undefined;\r\n    }\r\n    else if (!response.ok)\r\n    {\r\n      console.error(\"There was an error: \" + response.status);\r\n    }\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  //convert steam status if to a string\r\n  function getStatusString(statusCode)\r\n  {\r\n    let status = \"Unknown\";\r\n    switch(statusCode)\r\n    {\r\n      case 0:\r\n        status = \"Offline\"\r\n        break;\r\n      case 1:\r\n        status = \"Online\"\r\n        break;\r\n      case 2:\r\n        status = \"Busy\"\r\n        break;\r\n      case 3:\r\n        status = \"Away\"\r\n        break;\r\n      case 4:\r\n        status = \"Snooze\"\r\n        break;\r\n      case 5:\r\n        status = \"Looking to Trade\"\r\n        break;\r\n      case 6:\r\n        status = \"Looking to Play\"\r\n        break;\r\n      default:\r\n        status = \"Private\"\r\n        break;\r\n    }\r\n    return status;\r\n  }\r\n\r\n  //convert minutes to hours and minutes\r\n  function minutesToHours(minutes)\r\n  {\r\n    return Math.floor(minutes / 60) + \" hr \" + (minutes % 60) + \" min\";\r\n  }\r\n\r\n  //convert the time that is recieved from steam api into a date and time\r\n  function convertSteamTimeToUTC(seconds)\r\n  {\r\n    if (!seconds)\r\n      return \"Private\";\r\n\r\n    let time = new Date(seconds * 1000);\r\n      \r\n    let options = {\r\n      weekday: 'short',\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    };\r\n    return time.toLocaleDateString('en-US', options);\r\n  }\r\n\r\n  //return a pretty string saying the duration that the parameter is\r\n  function getTimeDifferenceString(timeInSeconds)\r\n  {\r\n    let then = new Date(timeInSeconds*1000)\r\n    let differenceInMinutes = Math.abs(Date.now() - then) / (1000 * 60);\r\n    let minutes = Math.floor(differenceInMinutes % 60);\r\n\r\n    let differenceInHours = (differenceInMinutes / 60);\r\n    let hours = Math.floor(differenceInHours % 24);\r\n\r\n    let differenceInDays = (differenceInMinutes / (60 * 24));\r\n    let days = Math.floor(differenceInDays % 365);\r\n    let differenceInYears = (differenceInMinutes / (60 * 24 * 365));\r\n    let years = Math.floor(differenceInYears);\r\n\r\n    let timeDifference = (years ? (years + \" years, \") : \"\")  + \r\n      (days ? (days + \" days, \") : \"\") + \r\n      (hours ? (hours + \" hours, \") : \"\") + \r\n      (minutes ? (minutes + \" minutes \") : \"\") + \"ago\";\r\n    return timeDifference;\r\n  }\r\n\r\n  //bundled function to return a string with time, and how long ago that time was\r\n  function fullTimeWithDifference(timeInMilliseconds)\r\n  {\r\n    if (!timeInMilliseconds) return \"Private\";\r\n\r\n    return convertSteamTimeToUTC(timeInMilliseconds) +\r\n      \" (\" + getTimeDifferenceString(timeInMilliseconds) + \")\";\r\n  }\r\n\r\n  //print the state and country, or just state, or just country, depending on what is defined\r\n  function getLocationString(state, country)\r\n  {\r\n    return (state ? state : \"\") + (state ? \", \" : \"\") + (country ? country : \"\")\r\n  }\r\n\r\n  //take in an appid and return a url of an image of that appid's game/app\r\n  async function fetchGameBannerURL(id)\r\n  {\r\n    let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/page_bg_generated.jpg\";\r\n    let response = await fetch(proxy + bannerURL)\r\n    .then(response => {\r\n      if (response.ok)\r\n        return response;\r\n      else\r\n        return Promise.reject(response.status);\r\n    })\r\n    .catch(error => {\r\n      console.log(\"Error getting high-quality game image, using default, low-res header img instead: \" + error);\r\n      bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/header.jpg\";\r\n      return bannerURL;\r\n    })\r\n    .finally(function() {\r\n      return bannerURL;\r\n    });\r\n    setGameBannerURL(bannerURL);\r\n  }\r\n\r\n  //take in an array of achievements and return what percent are 'achieved'\r\n  function getAchievementPercent(achievementList, targetGame, gameList)\r\n  {\r\n    let gameFound = false;\r\n    for (let i = 0; i < gameList.length; i++)\r\n    {\r\n      if (gameList[i].appid === targetGame) gameFound = true;\r\n    }\r\n\r\n    if (!gameFound)\r\n    {\r\n      return \"Player does not have this game.\"\r\n    }\r\n\r\n    if (achievementList)\r\n    {\r\n      //achievements obtained so far\r\n      let userAchievementCount = 0;\r\n      for (let i = 0; i < achievementList.length; i++)\r\n      {\r\n        if (achievementList[i].achieved) userAchievementCount++;\r\n      }\r\n      return (userAchievementCount + \" out of \" + achievementList.length + \" achievements obtained\");\r\n    }\r\n    else\r\n    {\r\n      return (\"This game does not have achievements\");\r\n    }\r\n  }\r\n\r\n  //get the time that an achievement was unlocked, or state if it is still locked\r\n  function getAchievementStatus(achievement)\r\n  {\r\n    return achievement.achieved ?\r\n      (\"Unlocked \" + convertSteamTimeToUTC(achievement.unlocktime)) : \"Locked\";\r\n  }\r\n\r\n  //get the status of an achievement\r\n  function getAchievementDescription(achievement)\r\n  {\r\n      return achievement.description ? achievement.description : \"\";\r\n  }\r\n\r\n  //return HTML/JSX statement\r\n  return (loading) ? (\r\n    <div>\r\n      <Router>\r\n        <Loading loading={loading} loadingMsg={loadMsg} />\r\n      </Router>\r\n    </div>\r\n  ) :\r\n    (\r\n    <div>\r\n      {playerSummary &&\r\n      <div className=\"row d-flex justify-content-center\">\r\n        {/* PLAYER SUMMARY THAT IS ALWAYS PRESENT */}\r\n        <div className=\"container\"> \r\n          <div className=\"player-summary col-xs-12 col-md-12 col-lg-8 justify-content-between\">\r\n              <a className=\"player-summary-avatar\" href={playerSummary.profileurl}>\r\n                <img id=\"profile-image\" src={playerSummary.avatarfull} alt={playerSummary.personaname + \"'s avatar\"}></img>\r\n              </a>\r\n              <div className=\"player-summary-persona fs-2\">\r\n                <span className=\"player-summary-tiny-font\">Full Persona Name</span>{playerSummary.personaname}\r\n              </div>\r\n              <div className=\"player-summary-steamid fs-6\">\r\n                <span className=\"player-summary-tiny-font\">SteamID</span>{playerSummary.steamid}\r\n              </div>\r\n              <div className=\"player-summary-status fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Status</span>{getStatusString(playerSummary.personastate)}\r\n              </div>\r\n              {friendsList &&\r\n              <div className=\"player-summary-friends fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Friends</span>{friendsList.length}\r\n              </div>\r\n              }\r\n              {playerSummary.realname &&\r\n              <div className=\"player-summary-real-name fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Real Name</span>{playerSummary.realname}\r\n              </div>\r\n              }\r\n              {(playerSummary.locstatecode || playerSummary.loccountrycode) &&\r\n              <div className=\"player-summary-location fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Location</span>{getLocationString(playerSummary.locstatecode,playerSummary.loccountrycode)}\r\n                <img className=\"player-summary-flag\" src={\"https://www.countryflags.io/\" + playerSummary.loccountrycode + \"/shiny/64.png\"}></img>\r\n              </div>\r\n              }\r\n              <div className=\"player-summary-last-online fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Last Log off</span>{fullTimeWithDifference(playerSummary.lastlogoff)}\r\n              </div>\r\n              <div className=\"player-summary-created fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Account Created</span>{fullTimeWithDifference(playerSummary.timecreated)}\r\n              </div>\r\n              <div className=\"player-summary-level fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Steam Level</span>{steamLevel}\r\n              </div>\r\n              {allGames &&\r\n              <div className=\"player-summary-games fs-6\">\r\n                <span className=\"player-summary-tiny-font\">Owned Games</span>{allGames.length}\r\n              </div>\r\n              }\r\n          </div>\r\n        </div>\r\n        <div id=\"user-app-content\" className=\"row justify-content-center\">\r\n        {/* USER-ONLY SEARCH CONTENT */}\r\n        {playedGames &&\r\n        <div className=\"container m-4\">\r\n          <div className=\"profile-info mx-auto flex-row flex-wrap d-flex\">\r\n            <h4 className=\"col-12 text-center mt-2\">Recently Played Games</h4>\r\n            {playedGames.map(game => (\r\n            <div key={game.appid} className=\"rounded the-game flex-fill m-2 p-2 col-xs-12 col-sm-6 col-md-3\">\r\n              <img id=\"game-icon\" className=\"mr-3\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + game.appid + '/' + game.img_icon_url + '.jpg'} \r\n                alt={'Game icon:' + game.name} height=\"50px\" width=\"50px\" />\r\n              <span className=\"ml-2\"> {game.name}</span>\r\n              <span className=\"game-facts rounded border border-light m-2 p-2\">Playtime: {minutesToHours(game.playtime_forever)}</span>\r\n            </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        }\r\n        {/* USER-GAME SEARCH CONTENT */}\r\n          {/* Game banner */}\r\n        {gameTitle &&\r\n          <div className=\"row game-banner\">\r\n            <div className=\"col-xs-12 col-md-8 game-banner-title m-0 p-0\" style={{backgroundImage: `url(${gameBannerURL})`}}>\r\n            <h2 className=\"text-light text-left align-middle\" style={{lineHeight: \"75px\"}}>{gameTitle}</h2>\r\n            </div>\r\n            <div className=\"col-xs-12 col-md-4 game-banner-info\">\r\n              <p className=\"text-light game-banner-info-playercount\">{playerCount + \" players online\"}</p>\r\n              <p className=\"text-light game-banner-info-achievement\">{getAchievementPercent(gameAchievements, appid, allGames)}</p>\r\n            </div>\r\n          </div>\r\n        }\r\n          {/* Game achievement grid */}\r\n        {gameAchievements &&\r\n          <div className=\"row col-xs-12\">\r\n            <div className=\"achievement-grid flex-row flex-wrap d-flex justify-content-between\">\r\n            {gameAchievements.map(achievement => (\r\n              <div key={achievement.name} className=\"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\">\r\n                <img className=\"achievement-icon mx-auto\" src={achievement.icon} alt={achievement.name} width=\"75px\" height=\"75px\"/>\r\n                <p className=\"achievement-global-percent text-light\">{achievement.percent.toFixed(2)}% of players have this achievement.</p>\r\n                <p className=\"achievement-unlock text-light\">{getAchievementStatus(achievement)}</p>\r\n                <h3 className=\"achievement-title text-light\">{achievement.displayName}</h3>\r\n                <p className=\"achievement-description text-light\">{getAchievementDescription(achievement)}</p>\r\n              </div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n        }\r\n          {/* Game stats table */}\r\n        {playerGameStats &&\r\n        <div className=\"container\">\r\n          <table className=\"table table-dark table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">Stat Name</th>\r\n                <th scope=\"col\">{playerSummary.personaname}'s Stat</th>\r\n              </tr>\r\n            </thead>\r\n            {playerGameStats.map(stat => (\r\n            <tbody key={stat.name} className=\"table-striped\">\r\n              <tr>\r\n                <th scope=\"row\">{stat.displayName}</th>\r\n                <td>{stat.value}</td>\r\n              </tr>\r\n            </tbody>\r\n            ))}\r\n          </table>\r\n        </div>\r\n        }\r\n        </div>      \r\n        {(!appid) && allGames &&\r\n\r\n          <div className=\"row d-flex justify-content-center col-12\">\r\n            <br></br>\r\n            <GamesGraph games={allGames}></GamesGraph>\r\n            <RandomGame games={allGames}></RandomGame>\r\n          </div>\r\n        }\r\n    </div>\r\n      }     \r\n    <div className=\"footer-space\"></div>\r\n      <Redirect to =\"/\" />\r\n      {/* A little extra padding... */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main\r\n","import './App.css'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"search-bar\" htmlFor=\"username\">User Profile</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control dark-bg\"\r\n                  id=\"username\"\r\n                  aria-describedby=\"username-help\"\r\n                  placeholder=\"Enter a Steam ID or vanity URL\"\r\n                  name=\"username\"\r\n                  value={usernameSearch}\r\n                  onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"search-bar\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"game\"\r\n                  aria-describedby=\"game-help\"\r\n                  placeholder=\"Enter a Steam game name or ID\"\r\n                  name=\"game\"\r\n                  value={appSearch}\r\n                  onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-xs-12 col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label className=\"search-bar h5\" htmlFor=\"username\">User Profile</label>\r\n                  <input type=\"text\"\r\n                    className=\"form-control dark-bg\"\r\n                    id=\"username\"\r\n                    aria-describedby=\"username-help\"\r\n                    placeholder=\"Enter a Steam ID or vanity URL\"\r\n                    name=\"username\"\r\n                    value={usernameSearch}\r\n                    onChange={e => setUsernameSearch(e.target.value)}\r\n                    required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL from a Steam profile, or enter the ID of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\" className=\"search-bar h5\">Steam Game</label>\r\n                <input type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"game\"\r\n                  aria-describedby=\"game-help\"\r\n                  placeholder=\"Enter a Steam game or ID\"\r\n                  name=\"game\"\r\n                  value={appSearch}\r\n                  onChange={e => setAppSearch(e.target.value)}\r\n                  />\r\n                <small id=\"game-help\" className=\"form-text\">Enter an app name or ID that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>SteamCompare</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam is a trademark of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}