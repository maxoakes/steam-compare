{"version":3,"sources":["main.js","App.js","index.js"],"names":["Main","usernameSearch","searchClick","proxy","key","headers","mode","cache","credentials","redirect","referrerPolicy","console","log","useState","playerinfo","setPlayer","onlineTest","setOnline","steamLevel","setLevel","timeLogOff","setLastLogin","setSteamid","playedGames","setPlayedGames","setAppid","gameBannerURL","setGameBannerURL","gameTitle","setGameTitle","playerCount","setPlayerCount","gameAchievements","setGameAchievements","setGameStats","event","a","appName","document","getElementById","value","vanityURL","fetchJSON","steamidResponse","response","generatedSteamid","steamid","appListResponse","appObject","applist","apps","find","app","name","toLowerCase","generatedAppid","appid","generatedAppTitle","playerSummeryResponse","steamLevelResponse","players","player_level","playerAchievementsResponse","globalAchievementPercentagesResponse","numCurrentPlayersResponse","player_count","gameSchemaResponse","game","gameStats","availableGameStats","stats","length","globalGameStatsResponse","userStatsForGameResponse","playerstats","achievements","mergedAchievementList","mergeAchievementObjects","achievementpercentages","error","ownedGamesResponse","recentlyPlayedGamesResponse","communityBadgeProgressResponse","friendsListResponse","playerBansResponse","groupListResponse","games","fetchGameBannerURL","userAchievements","globalAchievements","achievementSchemas","achievementObjectList","i","achievementObject","achieved","apiname","unlocktime","percent","defaultvalue","displayName","hidden","icon","icongray","push","convertSteamTimeToUTC","seconds","unlockTime","Date","toDateString","getUTCHours","toString","padStart","getUTCMinutes","apiURL","fetch","status","undefined","ok","json","data","id","bannerURL","then","Promise","reject","catch","finally","getAchievementStatus","achievement","getAchievementDescription","description","useEffect","grabData","personastate","lastlogoff","className","src","avatarfull","height","width","alt","personaname","loccountrycode","map","img_icon_url","minutes","playtime_forever","Math","floor","style","backgroundImage","lineHeight","achievementList","userAchievementCount","getAchievementPercent","toFixed","to","App","BodyHTML","setUsernameSearch","appSearch","setAppSearch","isMainMenuSearch","setIsMainMenuSearch","setClick","searchMenuWithStatsHTML","onSubmit","handleSubmit","htmlFor","type","aria-describedby","placeholder","onChange","e","target","onClick","bodyHTML","required","preventDefault","href","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a885ca8.chunk.js","sourcesContent":["import {Redirect} from 'react-router-dom';\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst Main = ({usernameSearch, searchClick}) => {\r\n\r\n  // TODO this works as a proxy website for CORS to allow the api to get fetched.\r\n  //Perhaps there is a more elegent way to do this\r\n  const proxy = \"https://still-tor-77449.herokuapp.com/\"\r\n\r\n  //Max's api steam key. Use it for this project\r\n  const key = \"386540A52F687754D4E1767230822EDE\";\r\n  const headers =\r\n  {\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {'Content-Type': 'application/json'},\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n  };\r\n\r\n  console.log(\"SEARCH:\", usernameSearch)\r\n\r\n  const [playerinfo, setPlayer] = useState(\"\");\r\n  const [onlineTest, setOnline] = useState(\"\");\r\n  const [steamLevel, setLevel] = useState(\"\");\r\n  const [timeLogOff, setLastLogin] = useState(\"\");\r\n  const [isPrivate, setPrivate] = useState(false);\r\n\r\n  //user content\r\n  const [steamid, setSteamid] = useState(0);\r\n  const [playedGames, setPlayedGames] = useState([]);\r\n\r\n  //game content\r\n  const [appid, setAppid] = useState(0);\r\n  const [gameBannerURL, setGameBannerURL] = useState(\"\");\r\n  const [gameTitle, setGameTitle] = useState(\"\");\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [gameAchievements, setGameAchievements] = useState([]);\r\n  const [gameStats, setGameStats] = useState([]);\r\n  \r\n\r\n  //React things\r\n  useEffect( () => {\r\n    grabData();\r\n  }, [searchClick]);\r\n  \r\n  useEffect( () => {\r\n    switch(playerinfo.personastate)\r\n    {\r\n      case 0:\r\n        setOnline(\"Offline\")\r\n        break;\r\n      case 1:\r\n        setOnline(\"Online\")\r\n        break;\r\n      case 2:\r\n        setOnline(\"Busy\")\r\n        break;\r\n      case 3:\r\n        setOnline(\"Away\")\r\n        break;\r\n      case 4:\r\n        setOnline(\"Snooze\")\r\n        break;\r\n      case 5:\r\n        setOnline(\"Looking to Trade\")\r\n        break;\r\n      case 6:\r\n        setOnline(\"Looking to Play\")\r\n        break;\r\n      default:\r\n        setOnline(\"Private\")\r\n        break;\r\n    }\r\n    setLastLogin(convertSteamTimeToUTC(playerinfo.lastlogoff));\r\n  }, [playerinfo])\r\n\r\n  async function grabData(event)\r\n  {\r\n    setPlayedGames(null);\r\n    setGameTitle(null);\r\n    setGameAchievements(null);\r\n    setGameStats(null);\r\n\r\n    //get the form seach boxes\r\n    let appName = document.getElementById(\"game\").value;\r\n    let vanityURL = document.getElementById(\"username\").value;\r\n    let generatedSteamid;\r\n    let generatedAppid;\r\n    let generatedAppTitle;\r\n\r\n    //game/app name\r\n    //check if the user entered a username to search for\r\n    if (vanityURL)\r\n    {\r\n      //get a steamid from a 'vanity' url. This is the one for your steam profile\r\n      //Max's is \"scouteriv\" from https://steamcommunity.com/id/scouteriv/\r\n      console.log(\"ISteamUser/ResolveVanityURL\")\r\n      let steamidResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=' + \r\n        key + '&vanityurl=' + vanityURL + '&format=json', headers)\r\n      console.log(steamidResponse.response)\r\n      generatedSteamid = steamidResponse.response.steamid;\r\n      console.log(\"Found user \" + generatedSteamid + \" from \" + vanityURL)\r\n    }\r\n    \r\n    if (appName)\r\n    {\r\n      //get the appid from the game name that the user enters\r\n      //this requests takes a few seconds. Likely(?) no way to get around it if we are not making a backend\r\n      console.log(\"ISteamApps/GetAppList\")\r\n      let appListResponse = await fetchJSON(proxy + \r\n        'http://api.steampowered.com/ISteamApps/GetAppList/v0002/', headers)\r\n      //console.log(appListResponse.applist.apps)\r\n\r\n      //go through each game and see if the name of the game matches what the user entered\r\n      let appObject = appListResponse.applist.apps.find(app => app.name.toLowerCase() === appName.toLowerCase());\r\n      \r\n      //set the appid only if the game is found\r\n      if (appObject)\r\n      {\r\n        generatedAppid = appObject.appid;\r\n        generatedAppTitle = appObject.name;\r\n        console.log(\"Found game \" + appObject.appid + \" from \" + appName)\r\n      }\r\n      else\r\n      {\r\n        console.log(\"No game found with: \" + appName)\r\n      }\r\n    }\r\n\r\n    //stats for player summary\r\n    if (generatedSteamid)\r\n    {\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      let playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      //console.log(playerSummeryResponse.response.players[0])\r\n      \r\n      console.log(\"IPlayerService/GetSteamLevel\")\r\n      let steamLevelResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      //console.log(steamLevelResponse.response)\r\n      \r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n      setLevel(steamLevelResponse.response.player_level);\r\n    }\r\n\r\n    //if both a user and game is searched and valid\r\n    if (generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tappid AND steamid searched\")\r\n\r\n      console.log(\"ISteamUserStats/GetPlayerAchievements\")\r\n      let playerAchievementsResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(playerAchievementsResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetGlobalAchievementPercentagesForApp\")\r\n      let globalAchievementPercentagesResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2/?key=' + \r\n        key + '&gameid=' + generatedAppid + '&format=json', headers)\r\n      console.log(globalAchievementPercentagesResponse);\r\n\r\n      console.log(\"ISteamUserStats/GetNumberOfCurrentPlayers\")\r\n      let numCurrentPlayersResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(numCurrentPlayersResponse);\r\n      setPlayerCount(numCurrentPlayersResponse.response.player_count);\r\n      \r\n      console.log(\"ISteamUserStats/GetSchemaForGame\")\r\n      let gameSchemaResponse = await fetchJSON(proxy +\r\n        'https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v2/?key=' + \r\n        key + '&appid=' + generatedAppid + '&format=json', headers)\r\n      console.log(gameSchemaResponse.game);\r\n      \r\n      // the inputs to this one must come from the previous API call\r\n      // not a lot of games implement this. not sure if we want to call it\r\n      let gameStats;\r\n      try {\r\n        gameStats = gameSchemaResponse.game.availableGameStats.stats;\r\n\r\n        console.log(\"ISteamUserStats/GetGlobalStatsForGame\")\r\n        let globalGameStatsResponse = await fetchJSON(proxy +\r\n          'https://api.steampowered.com/ISteamUserStats/GetGlobalStatsForGame/v1/?key=' + \r\n          key + '&appid=' + generatedAppid + '&count=' + gameStats.length + '&name[0]=' + gameStats[0].name + '&format=json', headers)\r\n        console.log(globalGameStatsResponse);\r\n\r\n        console.log(\"ISteamUserStats/GetUserStatsForGame\")\r\n        let userStatsForGameResponse = await fetchJSON(proxy +\r\n          'https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?key=' + \r\n          key + '&appid=' + generatedAppid + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n        // userStatsForGameResponse.playerstats yields stats and acheivements, but achievements was retrieved earlier\r\n        console.log(userStatsForGameResponse.playerstats.stats);\r\n      }\r\n      catch(unused) {\r\n        console.log(\"Game does not have stats\");\r\n      }\r\n       \r\n      try {\r\n        if (gameSchemaResponse.game.availableGameStats.achievements)\r\n        {\r\n          let mergedAchievementList = mergeAchievementObjects(\r\n            playerAchievementsResponse.playerstats.achievements,\r\n            globalAchievementPercentagesResponse.achievementpercentages.achievements,\r\n            gameSchemaResponse.game.availableGameStats.achievements);\r\n          console.log(mergedAchievementList);\r\n          setGameAchievements(mergedAchievementList);\r\n        }\r\n      }\r\n      catch(error) {\r\n        console.error(\"Something in gameSchemaResponse.game.availableGameStats is undefined\");\r\n      }\r\n    }\r\n    //if only the username is valid\r\n    else if (generatedSteamid && !generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY steamid searched\")\r\n\r\n      console.log(\"IPlayerService/GetOwnedGames\")\r\n      let ownedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json&include_appinfo=1', headers)\r\n      console.log(ownedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetRecentlyPlayedGames\")\r\n      let recentlyPlayedGamesResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(recentlyPlayedGamesResponse.response)\r\n\r\n      console.log(\"IPlayerService/GetCommunityBadgeProgress\")\r\n      let communityBadgeProgressResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(communityBadgeProgressResponse.response)\r\n\r\n      console.log(\"ISteamUser/GetFriendList\")\r\n      let friendsListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetFriendList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + ',&format=json', headers)\r\n      console.log(friendsListResponse)\r\n\r\n      console.log(\"ISteamUser/GetPlayerBans\")\r\n      let playerBansResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerBansResponse.players[0])\r\n\r\n      console.log(\"ISteamUser/GetPlayerSummaries\")\r\n      let playerSummeryResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=' + \r\n        key + '&steamids=' + generatedSteamid + '&format=json', headers)\r\n      console.log(playerSummeryResponse.response.players[0])\r\n      setPlayer(playerSummeryResponse.response.players[0]);\r\n\r\n      console.log(\"ISteamUser/GetUserGroupList\")\r\n      let groupListResponse = await fetchJSON(proxy + \r\n        'https://api.steampowered.com/ISteamUser/GetUserGroupList/v1/?key=' + \r\n        key + '&steamid=' + generatedSteamid + '&format=json', headers)\r\n      console.log(groupListResponse.response)\r\n\r\n      setPlayedGames(recentlyPlayedGamesResponse.response.games);\r\n    }\r\n    //if only a game was searched\r\n    else if (!generatedSteamid && generatedAppid)\r\n    {\r\n      console.log(\"\\tONLY appid searched\")\r\n    }\r\n    //if nothing was searched?\r\n    else\r\n    {\r\n      console.log(\"\\tNO item searched\");\r\n    }\r\n\r\n    setSteamid(generatedSteamid);\r\n    setAppid(generatedAppid);\r\n    setGameTitle(generatedAppTitle);\r\n    fetchGameBannerURL(generatedAppid);\r\n  }\r\n\r\n  //take the arrays of the achievement schema, global stats\r\n  //and user stats and combine them into one array a unified object\r\n  function mergeAchievementObjects(userAchievements, globalAchievements, achievementSchemas)\r\n  {\r\n    let achievementObjectList = [];\r\n    for (let i = 0; i < achievementSchemas.length; i++)\r\n    {\r\n      let achievementObject = {\r\n        achieved: userAchievements[i].achieved,\r\n        apiname: userAchievements[i].apiname,\r\n        unlocktime: userAchievements[i].unlocktime,\r\n        name: globalAchievements[i].name,\r\n        percent: globalAchievements[i].percent,\r\n        defaultvalue: achievementSchemas[i].defaultvalue,\r\n        displayName: achievementSchemas[i].displayName,\r\n        hidden: achievementSchemas[i].hidden,\r\n        icon: achievementSchemas[i].icon,\r\n        icongray: achievementSchemas[i].icongray,\r\n        name: achievementSchemas[i].name,\r\n      }\r\n      achievementObjectList.push(achievementObject);\r\n    }\r\n    return achievementObjectList;\r\n  }\r\n\r\n  //convert the time that is recieved from steam api into a date and time\r\n  function convertSteamTimeToUTC(seconds)\r\n  {\r\n    if (!seconds)\r\n      return \"Private\";\r\n\r\n    let unlockTime = new Date(seconds*1000);\r\n    let timeString = unlockTime.toDateString() + \" at \" + \r\n      unlockTime.getUTCHours().toString().padStart(2, '0') + \":\" + \r\n      unlockTime.getUTCMinutes().toString().padStart(2, '0') + \" UTC\";\r\n      \r\n    return timeString;\r\n  }\r\n\r\n  //fetch from an API URL and return the resulting JSON\r\n  async function fetchJSON(apiURL, headers)\r\n  {\r\n    let response = await fetch(apiURL, headers);\r\n    if ((response.status >= 400) && (response.status < 500))\r\n    {\r\n      console.error(\"client error. returning undefined to be caught later on\");\r\n      return undefined;\r\n    }\r\n    else if (!response.ok)\r\n    {\r\n      console.error(\"There was an error: \" + response.status);\r\n    }\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n\r\n  //convert minutes to hours and minutes\r\n  function minutesToHours(minutes)\r\n  {\r\n    return Math.floor(minutes/60) + \" hr \" + (minutes % 60) + \" min\";\r\n  }\r\n\r\n  //take in an appid and return a url of an image of that appid's game/app\r\n  async function fetchGameBannerURL(id)\r\n  {\r\n    let bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/page_bg_generated.jpg\";\r\n    let response = await fetch(proxy + bannerURL)\r\n    .then(response => {\r\n      if (response.ok)\r\n        return response;\r\n      else\r\n        return Promise.reject(response.status);\r\n    })\r\n    .catch(error => {\r\n      console.log(\"Error getting high-quality game image, using default, low-res header img instead: \" + error);\r\n      bannerURL = \"https://steamcdn-a.akamaihd.net/steam/apps/\" + id + \"/header.jpg\";\r\n      return bannerURL;\r\n    })\r\n    .finally(function() {\r\n      return bannerURL;\r\n    });\r\n    setGameBannerURL(bannerURL);\r\n  }\r\n\r\n  //take in an array of achievements and return what percent are 'achieved'\r\n  function getAchievementPercent(achievementList)\r\n  {\r\n    if (achievementList)\r\n    {\r\n      //achievements obtained so far\r\n      let userAchievementCount = 0;\r\n      for (let i = 0; i < achievementList.length; i++)\r\n      {\r\n        if (achievementList[i].achieved) userAchievementCount++;\r\n      }\r\n      return (userAchievementCount + \" out of \" + achievementList.length + \" achievements obtained\");\r\n    }\r\n    else\r\n    {\r\n      return (\"This game does not have achievements\");\r\n    }\r\n  }\r\n\r\n  //get the time that an achievement was unlocked, or state if it is still locked\r\n  function getAchievementStatus(achievement)\r\n  {\r\n    return achievement.achieved ?\r\n      (\"Unlocked \" + convertSteamTimeToUTC(achievement.unlocktime)) : \"Locked\";\r\n  }\r\n\r\n  //get the status of an achievement\r\n  function getAchievementDescription(achievement)\r\n  {\r\n      return achievement.description ? achievement.description : \"\";\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12 col-md-12\">\r\n          <div className=\"row\"> \r\n            <div className=\"user-info col-xs-8 col-md-8 d-flex justify-content-center\">\r\n              <div className=\"profile-info yellow-neon-border mb-4 mt-2\">\r\n                <div className=\"d-flex justify-content-center mt-2\">\r\n                  <img id=\"profile-image\" src={playerinfo.avatarfull} height=\"100px\" width=\"100px\" alt=\"Avatar\"></img>\r\n                </div>\r\n                <p className=\"profile-text\">\r\n                  <span id=\"profile-display-name\">{playerinfo.personaname} | </span>\r\n                  {playerinfo.loccountrycode &&\r\n                    <span id=\"profile-country\">{playerinfo.loccountrycode} | </span>\r\n                  }\r\n                    <span id=\"profile-status\">{onlineTest}</span> \r\n                    <br />\r\n                    <span id=\"profile-level\">Level {steamLevel}</span> | \r\n                    <span id=\"profile-steamid\"> Steam ID: {playerinfo.steamid}</span> | \r\n                    {}\r\n                    <span id=\"profile-steamid\"> Last Time Online: {timeLogOff}</span> \r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div id=\"user-app-content\" className=\"row justify-content-center\">\r\n          {/* USER-ONLY SEARCH CONTENT */}\r\n          {playedGames &&\r\n          <div className=\"container\">\r\n            <div className=\"profile-info yellow-neon-border mx-auto pb-2 flex-row flex-wrap d-flex\">\r\n              <h4 className=\"col-12 text-center mt-2\">Recently Played Games</h4>\r\n              {playedGames.map(game => (\r\n              <div key={game.appid} className=\"rounded the-game bg-secondary flex-fill m-2 p-2 col-xs-12 col-sm-6 col-md-4\">\r\n                <img id=\"game-icon\" className=\"mr-3\" src={'http://media.steampowered.com/steamcommunity/public/images/apps/' + game.appid + '/' + game.img_icon_url + '.jpg'} \r\n                  alt={'Game icon:' + game.name} />\r\n                <span className=\"ml-2\">{game.name}</span>\r\n                <span className=\"game-facts rounded border border-light m-2 p-2\">Playtime: {minutesToHours(game.playtime_forever)}</span>\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          }\r\n          {/* USER-GAME SEARCH CONTENT */}\r\n            {/* Game banner */}\r\n          {gameTitle &&\r\n            <div className=\"row game-banner\">\r\n              <div className=\"col-xs-12 col-md-8 game-banner-title m-0 p-0\" style={{backgroundImage: `url(${gameBannerURL})`}}>\r\n              <h2 className=\"text-light text-left align-middle\" style={{lineHeight: \"75px\"}}>{gameTitle}</h2>\r\n              </div>\r\n              <div className=\"col-xs-12 col-md-4 game-banner-info\">\r\n                <p className=\"text-light game-banner-info-playercount\">{playerCount + \" players online\"}</p>\r\n                <p className=\"text-light game-banner-info-achievement\">{getAchievementPercent(gameAchievements)}</p>\r\n              </div>\r\n            </div>\r\n          }\r\n            {/* Game achievement grid */}\r\n          {gameAchievements &&\r\n            <div className=\"row col-xs-12\">\r\n              <div className=\"achievement-grid flex-row flex-wrap d-flex justify-content-between\">\r\n              {gameAchievements.map(achievement => (\r\n                <div key={achievement.name} className=\"achievement-square flex-fill col-xs-12 col-sm-6 col-md-4 col-lg-3\">\r\n                  <img className=\"achievement-icon mx-auto\" src={achievement.icon} alt={achievement.name} width=\"75px\" height=\"75px\"/>\r\n                  <p className=\"achievement-global-percent text-light\">{achievement.percent.toFixed(2)}% of players have this achievement.</p>\r\n                  <p className=\"achievement-unlock text-light\">{getAchievementStatus(achievement)}</p>\r\n                  <h3 className=\"achievement-title text-light\">{achievement.displayName}</h3>\r\n                  <p className=\"achievement-description text-light\">{getAchievementDescription(achievement)}</p>\r\n                </div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n          }\r\n            {/* Game stats table */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    <div className=\"footer-space\"></div>\r\n      <Redirect to =\"/\" />\r\n      {/* A little extra padding... */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main\r\n","import './App.css'\r\nimport React, {useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Main from './main.js'\r\n\r\nfunction App()\r\n{\r\n  function BodyHTML()\r\n  {\r\n    //current states of the search bars\r\n    const [usernameSearch, setUsernameSearch] = useState(\"\");\r\n    const [appSearch, setAppSearch] = useState(\"\");\r\n    const [isMainMenuSearch, setIsMainMenuSearch] = useState(true);\r\n    const [searchClick, setClick] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      console.log(\"Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n    });\r\n\r\n    //HTML of the searchbars when the window is showing user/game stats\r\n    let searchMenuWithStatsHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-12\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                <input type=\"text\"\r\n                className=\"form-control dark-bg\"\r\n                id=\"username\"\r\n                aria-describedby=\"username-help\"\r\n                placeholder=\"Enter a Steam ID\"\r\n                name=\"username\"\r\n                value={usernameSearch}\r\n                onChange={e => setUsernameSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-5\">\r\n                <label className=\"green-glow\" htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"game\"\r\n                aria-describedby=\"game-help\"\r\n                placeholder=\"Enter a Steam Game\"\r\n                name=\"game\"\r\n                value={appSearch}\r\n                onChange={e => setAppSearch(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-2 mt-4\">\r\n                  <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary bg-dark\" onClick={handleClick}>Search!</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <br></br>\r\n          {/* the content that is fetched form the Steam API and main.js will be created here */}\r\n          <Router>\r\n            <Main usernameSearch={usernameSearch} searchClick={searchClick}></Main>\r\n          </Router>      \r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    //HTML of the searchbar when it is the initial search menu\r\n    let centeredSearchHTML = (\r\n      <div className=\"row\">\r\n        <div className=\"body col-xs-12 col-md-12\">\r\n          <div className=\"form-body\">\r\n            <form id=\"entry-form\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Steam ID</label>\r\n                <label className=\"blue-glow\" htmlFor=\"username\">Steam ID</label>\r\n                      <input type=\"text\"\r\n                      className=\"form-control dark-bg\"\r\n                      id=\"username\"\r\n                      aria-describedby=\"username-help\"\r\n                      placeholder=\"Enter a Steam ID\"\r\n                      name=\"username\"\r\n                      value={usernameSearch}\r\n                      onChange={e => setUsernameSearch(e.target.value)}\r\n                      required/>\r\n                <small id=\"username-help\" className=\"form-text\">Enter a Steam 'vanity' URL of a user.</small>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"game\">Steam Game</label>\r\n                <input type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"game\"\r\n                      aria-describedby=\"game-help\"\r\n                      placeholder=\"Enter a Steam Game\"\r\n                      name=\"game\"\r\n                      value={appSearch}\r\n                      onChange={e => setAppSearch(e.target.value)}\r\n                      />\r\n                <small id=\"game-help\" className=\"form-text\">Enter a game or app that is available on Steam.</small>\r\n              </div>\r\n              <button type=\"submit\" id=\"entry-submit\" className=\"btn btn-primary\" >Search!</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let bodyHTML = isMainMenuSearch ? centeredSearchHTML : searchMenuWithStatsHTML;\r\n\r\n    //when the seach button is pressed, set the states of the searchbar, inturn showing the correct HTML\r\n    function handleSubmit(event)\r\n    {\r\n      console.log(\"BUTTON PRESS: Searched name: \" + usernameSearch + \". Searched app: \"+ appSearch);\r\n      event.preventDefault();\r\n      if (appSearch || usernameSearch)\r\n      {\r\n        console.log(\"there is a search present\");\r\n        if (!isMainMenuSearch)\r\n        {\r\n          console.log(\"stats window already open, calling grabData() manually.\");\r\n          setIsMainMenuSearch(false);\r\n          return bodyHTML;\r\n        }\r\n        setIsMainMenuSearch(false);\r\n      }\r\n      else\r\n      {\r\n        console.log(\"there is not a search present\")\r\n        setIsMainMenuSearch(true);\r\n      };\r\n    };\r\n\r\n    function handleClick(event){\r\n      setClick(searchClick+1);\r\n    }\r\n    \r\n    return bodyHTML;\r\n  };\r\n\r\n  //always show the header and footer, then show whatever searchbar is active in BodyHTML tags\r\n  return (\r\n    <div className='App'>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"header col-xs-12 col-md-12\">\r\n            <h1>Title</h1>\r\n          </div>\r\n        </div>\r\n        <BodyHTML></BodyHTML>\r\n        <div className=\"row\">\r\n          <div className=\"footer col-xs-12 col-md-12 bg-dark\">\r\n            <hr />\r\n            <p className=\"footer-links\">\r\n              <a href=\"https://steamdb.info/calculator/\">SteamDB</a> |&nbsp;\r\n              <a href=\"https://store.steampowered.com/\">Steam Store</a> |&nbsp;\r\n              <a href=\"https://partner.steamgames.com/doc/webapi_overview\">Steam Web API Documentation</a> |&nbsp;\r\n              <a href=\"https://steamapi.xpaw.me/\">xPaw's Steam Web API Documentation</a>\r\n            </p>\r\n            <p className=\"footer-authors font-weight-light\">\r\n              Created by Arturo Bravo, Courtney Ficker, Max Oakes\r\n            </p>\r\n            <p className=\"footer-legal text-muted \">Steam and the Steam logo are trademarks of\r\n            Valve Corporation. All other trademarks are property of their respective owners.\r\n            This deployment was created under fair use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './main.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}